// Get[$MANAGER_WIDGET/Common/af/2.0.0/sf.min.js]

console.log("navigator.userAgent: " + navigator.userAgent);
if (navigator.userAgent.toLowerCase().indexOf("applewebkit") >= 0 && window.curWidget) {
  window._browser = "tv_webkit"
} else {
  if (navigator.userAgent.toLowerCase().indexOf("chrome/") >= 0) {
    window._browser = "chrome"
  } else {
    if (navigator.userAgent.toLowerCase().indexOf("safari/") >= 0 && !window.curWidget) {
      window._browser = "safari"
    } else {
      if (navigator.userAgent.toLowerCase().indexOf("msie") >= 0) {
        window._browser = "internetexplorer"
      } else {
        if (navigator.userAgent.toLowerCase().indexOf("desinger") >= 0) {
            window._browser = "designer"
        }
      }
    }
  }
}

console.log("Detected Browser : " + window._browser);
(function () {
console.log("[AF] PC Mode");
if (window.location.search.indexOf("modelid") < 0) {
  var url = document.location.href;
  url = url.substring(0, (url.indexOf("?") == -1) ? url.length : url.indexOf("?"));
  window.location.href = url + "?country=US&language=1&lang=en&modelid=Valencia&server=operation&firmware=T-SPHAKRC-1000&remocon=2_35_259_0&area=USA&product=0&mgrver=3.000";
  return
}
window.curWidget = {
  id: "1234567",
  width: 960,
  height: 540,
  setPreference: function (key, value) {
    return null
  }
};
if (!window.console) {
  console = {}
}
console.log = console.log ||
function () {};
console.warn = console.warn ||
function () {};
console.error = console.error ||
function () {};
console.info = console.info ||
function () {};
var alertCount = 0;
window.alert = function (message) {
  console.log(message)
};
window.FileSystem = function () {
  this.storage = window.localStorage || null;
  var storage = {};
  if (!this.storage) {
    this.storage = {
      getItem: function (key) {
        return storage[key] || null
      },
      setItem: function (key, value) {
        storage[key] = value
      },
      removeItem: function (key, value) {
        delete storage[key]
      },
      clear: function (key, value) {
        storage = {}
      }
    }
  }
  var oFile = {};
  var oCommonFile = {};
  this.openFile = function (path, mode) {
    return new FilePointer(path)
  };
  this.openCommonFile = function (path, mode) {
    alert("[FS] openCommonFile(" + path + "," + mode + ")");
    return new CommonFilePointer(path)
  };
  this.isValidCommonPath = function (path) {
    alert("[FS] isValidCommonPath(" + path + ")");
    var pathObj = null;
    try {
      pathObj = eval("oCommonFile." + path.replace("/", "."))
    } catch (e) {
      alert("\tEXCEPTION: " + e)
    }
    return pathObj ? 1 : 0
  };
  this.closeFile = function (fp) {
    alert("[FS] closeFile(" + fp + ")")
  };
  function FilePointer(path) {
    this.readAll = function () {
      var text = $.ajax({
        url: path,
        async: false
      }).responseText;
      return text
    };
    this.toString = function () {
      return "[Object FilePointer]"
    }
  }
  function CommonFilePointer(path) {
    this.readAll = function () {
      return oCommonFile[path]
    };
    this.toString = function () {
      return "[Object CommonFilePointer]"
    }
  }
}
})()
var sf = sf || {};
sf.version = "2.0.0";
console.log("############# Samsung TV Apps Framework : " + sf.version + " #############");
(function (e) {
  if (e.core) {
    return
  }
  var h = ".designer/lib";
  e.core = {
    _afPath: {
      root: h,
      core: h,
      resources: h,
      images: h,
      lang: h
    },
    exit: function (l) {
      l = (l === undefined) ? false : l;
      alert("[AF core] sf.core.exit(" + l + ")");
    },
    version: function () {
      alert("[AF core] AF Version: " + e.version);
      return e.version
    },
    loadJS: function (n, p) {
      alert("[AF core] sf.core.loadJS()");
      if (!(n instanceof Array)) {
        n = [n]
      }
      var l = [];
      for (var m = 0; m < n.length; m++) {
        if (n[m] != "") {
          l.push(n[m])
        }
      }
      n = l;
      new o(n, p);
      function o(q, z) {
        alert("[AF core] jsLoader() : " + q.length + " files: " + q);
        var s = 0,
          y = null,
          r = null,
          x = document.getElementsByTagName("head")[0];
        for (var u = 0, w = q.length; u < w; u++) {
          r = q[u];
          if (r.indexOf("/mtd_down") == 0) {
            r = b + ((r.charAt(0) != "/") ? "/" : "") + r
          }
          y = document.createElement("script");
          y.type = "text/javascript";
          y.setAttribute("waper_dontsave", "true");
          y.src = r + "?" + (new Date()).getTime();
          y.onload = t;
          x.appendChild(y)
        }
        if (!q || !q.length) {
          setTimeout(function () {
            if (z && z instanceof Function) {
              z()
            }
          }, 10)
        }
        function t() {
          alert("[AF core] jsLoader " + q[s] + " (" + (s + 1) + "/" + q.length + ")");
          s++;
          if (s >= q.length) {
            if (typeof z == "function") {
              z()
            }
          }
        }
      }
    },
    loadCSS: function (l, m) {
      alert("[AF core] sf.core.loadCSS() : " + l);
      if (!(l instanceof Array)) {
        l = new Array(l)
      }
      var q = null;
      cssRules = null;
      var r = l.length;
      var t = (new Date()).getTime();
      for (var n = 0; n < l.length; n++) {
        var o = l[n];
        if (o.indexOf("/mtd_down") == 0) {
          o = b + ((o.charAt(0) != "/") ? "/" : "") + o
        }
        var s = document.createElement("link");
        s.type = "text/css";
        s.rel = "stylesheet";
        s.setAttribute("waper_dontsave", "true");
        s.href = o + "?" + (new Date()).getTime();
        if (m && m instanceof Function) {
          (function (x) {
            var y = o;
            var u = null,
              w = null;
            u = setInterval(function () {
              if (p(x)) {
                alert("[AF core] " + y + " loaded");
                clearInterval(u);
                clearTimeout(w);
                r--;
                if (r <= 0) {
                  alert("######## All CSSs Loaded : " + ((new Date()).getTime() - t) + "ms ########");
                  if (m && m instanceof Function) {
                    m()
                  }
                  m = null
                }
              }
            }, 10);
            w = setTimeout(function () {
              alert("[AF core] " + y + " timeout");
              clearInterval(u);
              r--;
              if (r <= 0) {
                alert("######## All CSSs Loaded : " + ((new Date()).getTime() - t) + "ms ########");
                if (m && m instanceof Function) {
                  m()
                }
                m = null
              }
            }, 20);
          })(s)
        }
        alert(o);
        document.getElementsByTagName("head")[0].appendChild(s)
      }
      if (!l || !l.length) {
        setTimeout(function () {
          if (m && m instanceof Function) {
            m()
          }
        }, 10)
      }
      function p(u) {
        if (!q) {
          q = "sheet";
          cssRules = "cssRules";
          if (!(q in u)) {
            q = "styleSheet";
            if (!(q in u)) {
              q = null
            }
          }
          if (u[q] && !(cssRules in u[q])) {
            cssRules = "rules"
          }
          alert("Property for sheet : " + q + ", rules : " + cssRules)
        }
        return (s[q] && u[q][cssRules] && u[q][cssRules].length) ? true : false
      }
    },
    readFile: function (o) {
      alert("[AF core] sf.core.readFile(" + o + ")");
      var m = "";
      if (FileSystem) {
        var l = new FileSystem();
        var n = l.openFile(o, "r");
        if (n) {
          m = n.readAll();
          l.closeFile(n)
        } else {
          alert("[AF core] File open failed.")
        }
        return m
      } else {
        alert("[AF core] FileSystem is not supported!!!")
      }
      return m
    },
    getEnvValue: function (l) {
      var n = null;
      if (!a) {
        a = d()
      }
      if (l && typeof l === "string") {
        n = a[l]
      }
      var m = n;
      if (l == "id" || l == "pw") {
        m = "******"
      }
      console.log("[AF core] getEnvValue(" + l + ") returns " + m);
      return n
    },
    _changeSource: function () {
      alert("[AF core] sf.core._changeSource() does nothing");
      return;
    },
    _restoreSource: function () {
      alert("[AF core] sf.core._restoreSource() does nothing");
      return;
    },
    plugin: function (m, l) {
      return;
    },
    _getPlugin: function (l) {
      return document.getElementById(g + l)
    },
    sefplugin: function (m, l) {
      return;
    },
    _getSEFPlugin: function (l) {
      return document.getElementById(c + l)
    },
    mapAliasedKeys: function (l) {
      switch (l) {
      case e.key.PANEL_VOL_DOWN:
        l = e.key.LEFT;
        break;
      case e.key.PANEL_VOL_UP:
        l = e.key.RIGHT;
        break;
      case e.key.WHEELUP:
      case e.key.PANEL_CH_UP:
        l = e.key.UP;
        break;
      case e.key.WHEELDOWN:
      case e.key.PANEL_CH_DOWN:
        l = e.key.DOWN;
        break;
      case e.key.PANEL_ENTER:
      case e.key.PANEL_SOURCE:
        l = e.key.ENTER;
        break;
      case e.key.PANEL_MENU:
        l = e.key.RETURN;
        break
      }
      return l
    },
    PL_AUDIO_OUTPUT_DEVICE_EXTERNAL: 3,
    PL_AUDIO_VOLUME_KEY_UP: 0,
    PL_AUDIO_VOLUME_KEY_DOWN: 1,
    PL_AUDIO_OUTPUT_DEVICE_RECEIVER: 4,
    PLR_FALSE: 0,
    PLR_TRUE: 1,
    PL_AUDIO_MUTE_OFF: 1,
    PL_AUDIO_MUTE_ON: 0,
    PL_TV_PRODUCT_TYPE_TV: 0,
    PL_TV_PRODUCT_TYPE_MONITOR: 1,
    PL_TV_PRODUCT_TYPE_BD: 2,
    PL_CMN_INFO_VERSION: 0,
    PL_NNAVI_STATE_BANNER_NONE: 0,
    PL_NNAVI_STATE_BANNER_VOL: 1,
    PL_NNAVI_STATE_BANNER_VOL_CH: 2,
    PL_PRFID_AUTO_PROTECTION_TIME: 13,
    EVENT_TO_DEVICE_SCREEN_SAVER_ON: 3,
    EVENT_TO_DEVICE_SCREEN_SAVER_OFF: 4,
    EVENT_TO_DEVICE_HIDE_TOOLS: 6,
    PICTURE_SETTING: 1,
    SOUND_SETTING: 0,
    MANAGER_EVT_RETURN_WIDGETID: "100",
    MANAGER_EVT_RETURN_TO_WIDGET: "101",
    MANAGER_EVT_GET_SNS_LIST: "32",
    MANAGER_EVT_GET_APP_ALL_LIST: "36",
    MANAGER_EVT_GET_APP_PATH: "33",
    MANAGER_EVT_MOVE_APP_INFO: "34",
    MANAGER_EVT_RUN_START_CHECK: "200",
    MANAGER_EVT_RUN_DISCONNECT_CEC: "201",
    MANAGER_EVT_RUN_UPDATE: "202",
    PL_DTVAPP_TOOL: 18,
    PL_TVMW_SOURCE_MEDIA: 43
  };
  var b = "file://localhost";
  var f = null;
  var g = "_plugin_id_";
  var j = ["TV", "TVMW", "NNAVI", "AUDIO", "APPCOMMON", "FRONTPANEL", "IMAGEVIEWER", "PLAYER", "STORAGE", "NETWORK", "DOWNLOAD", "SCREEN", "TIME", "VIDEO", "WINDOW"];
  var c = "_sef_id_";
  var a = null;
  function d() {
    console.log("[AF core] parseInfo()");
    var s = window.location.href;
    var q = /(\w*=[\w!@#\$%\*\^\(\)\-\+\|\.=\ \']*)/g;
    var r = {};
    for (var p = 0, n = s.match(q), m = n.length, o; p < m; p++) {
      o = n[p].split("=");
      r[o[0]] = decodeURIComponent(o[1])
    }
    return r
  }
})(sf);
(function (b) {
  var d = null;
  var e = "_sfdata.json";
  var a = "1234567";
  var c = false;
  b.core.localData = function (g, j) {
    if (!c) {
      h()
    }
    if (j !== undefined) {
      return k(g, j)
    } else {
      return f(g)
    }
    function f(l) {
      l = (l !== undefined) ? l : 0;
      var m = (d) ? d[l] : null;
      alert("[AF core] sf.core.localData.get(" + l + ") returns : " + m);
      return m
    }
    function k(l, m) {
      if (d == null) {
        d = {}
      }
      alert("[AF core] sf.core.localData.set(" + l + "," + m + ")");
      d[l] = m;
      return m
    }
    function h() {
      alert("[AF core] sf.core.localData._load()");
      c = true;
      var l = new FileSystem();
      if (l.isValidCommonPath(a) != 1) {
        alert("[AF core] directory is not found : " + a);
        d = null;
        return
      }
      var n = l.openCommonFile(a + "/" + e, "r");
      if (!n) {
        alert("[AF core] file is not found : " + e);
        d = null;
        return
      }
      var m = n.readAll();
      alert("[AF core] loaded App data : " + m);
      d = (m == "") ? {} : $.parseJSON(m);
      l.closeFile(n)
    }
  };
  b.core._saveLocalData = function () {
    alert("[AF core] sf.core._saveLocalData()");
    var f = new FileSystem();
    if (f.isValidCommonPath(a) != 1) {
      alert("[AF core] create data directory..");
      //LDW> f.createCommonDir(a)
    }
    if (d && d != "") {
      var h = f.openCommonFile(a + "/" + e, "w");
      if (!h) {
        alert("[AF core] cannot open App data file..");
        return
      }
      var g = $.toJSON(d);
      alert("[AF core] save App data : " + g);
      h.writeAll(g);
      f.closeFile(h)
    } else {
      alert("[AF core] no need to save file.")
    }
  }
})(sf);
(function (sf) {
  var conf = null;
  function parseJSON(text) {
    if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
      return eval("(" + text + ")")
    }
    return null
  }
  sf.core.getAppConf = function (key) {
    if (!conf) {
      sf.core._readAppConf()
    }
    if (!conf) {
      return null
    }
    if (key) {
      alert("[AF core] getConf(" + key + ") returns " + conf[key]);
      return conf[key]
    } else {
      return conf
    }
  };
  sf.core._readAppConf = function () {
    alert("[AF core] readConf()");
    try {
      var filePath = "app.json";
      conf = parseJSON(sf.core.readFile(filePath))
    } catch (e) {
      alert("[AF core] " + e.toString())
    }
  }
})(sf);
(function (b) {
  var a = {};
  b.core.setWMEventListener = function (c, d) {
    alert("[AF core] setWMEventListener(" + c + ")");
    if (typeof d == "function") {
      a[c] = d
    } else {
      alert("[AF core] second param must be a function.")
    }
  };
  b.core.registerEventListener = function () {
    alert("[AF core] registerEventListener()");
    curWidget.onWidgetEvent = function (c) {
      alert("[AF core] !!! curWidget.onWidgetEvent !!!");
      alert("[AF core] !!! type : " + c.type);
      var d = a[c.type];
      if (typeof d == "function") {
        d(c.data || null)
      } else {
        alert("[AF core] no event handler binded on this event : " + c.type)
      }
    }
  }
})(sf);
(function (l) {
  var b = null;
  var g = null;
  var o = null;
  var j = l.core.getEnvValue("product");
  var c = l.core.getEnvValue("modelid");
  l.env = {
    PRODUCTTYPE_TV: 0,
    PRODUCTTYPE_MONITOR: 1,
    PRODUCTTYPE_BD: 2,
    getProductType: function () {
      alert("[AF env] getProductType() : " + j);
      return j
    },
    getModelID: function () {
      alert("[AF env] getModelID() : " + c);
      return c
    },
    SUPPORT3D_FIRMWARE_UPDATE_NEEDED: -1,
    SUPPORT3D_NOTSUPPORTED: 0,
    SUPPORT3D_SUPPORTED: 1,
    get3DSupported: function () {
      alert("[AF env] get3DSupported():");
      return;
    },
    getFirmwareVer: function () {
      return;
    },
  };
  var k = window._browser;
  l.env.getBrowser = function () {
    return k
  };
  curWidget.width = h("width");
  curWidget.height = h("height");
  var e = parseInt(curWidget.height, 10);
  if (e == 540 || e == 720 || e == 1080) {
    e += "p"
  } else {
    e = "540p"
  }
  l.env.getResolution = function () {
    alert("[AF env] getResolution: " + e);
    return e
  };
  l.env.getScreenSize = function () {
    if (curWidget && curWidget.width && curWidget.height) {
      alert("[AF env] getScreenSize: " + curWidget.width + "x" + curWidget.height);
      return {
        width: curWidget.width,
        height: curWidget.height
      }
    } else {
      var q = $(window).width();
      var p = $(window).height();
      alert("[AF env] getScreenSize: " + q + "x" + p);
      return {
        width: q,
        height: p
      }
    }
  };
  alert("[AF Core] Resolution: " + l.env.getResolution() + " - " + l.env.getScreenSize().width + "x" + l.env.getScreenSize().height);
  l.env.getLanguageCode = function () {
    var p = l.core.getEnvValue("lang");
    alert("[AF env] getLanguageCode: " + p);
    return p
  };
  l.env.getCountryCode = function () {
    var p = l.core.getEnvValue("country");
    alert("[AF env] getCountryCode: " + p);
    return p
  };
  var f = null;
  l.env.getAppVersion = function () {
    alert("[AF env] getAppVersion()");
    if (!f) {
      f = h("ver")
    }
    alert("\tenvAppVersion : " + f);
    return f || null
  };
  var a = null;
  l.env.getMouseEventAvailable = function () {
    alert("[AF env] getMouseEventAvailable()");
    var q = null;
    var p = null;
    if (a === null) {
      q = h("mouse");
      if (q) {
        q = q.toUpperCase()
      }
      p = l.env.getBrowser();
      a = false;
      if (q && q == "Y" && p && p == "tv_webkit") {
        a = true
      }
    }
    return a
  };
  var n = null;
  l.env.getVoiceRecogAvailable = function () {
    return false;
  };
  var m = null;
  l.env.getGestureRecogAvailable = function () {
    return false;
  };
  l.env.getPopupOpacity = function () {
    alert("[AF env] getPopupOpacity()");
    var q = 0.8;
    try {
      q = deviceapis.application.getPopupOpacity()
    } catch (p) {
      q = 0.8
    }
    alert("returns " + q);
    if (q < 0 && q > 1) {
      q = 0.8
    }
    return q || 0.8
  };
  l.env.TARGETLOCATION_UNKNOWN = 0;
  l.env.TARGETLOCATION_KOR = 1;
  l.env.TARGETLOCATION_USA = 2;
  l.env.TARGETLOCATION_BRA = 3;
  l.env.TARGETLOCATION_PANEURO = 4;
  l.env.TARGETLOCATION_CHI = 5;
  l.env.TARGETLOCATION_HKG = 6;
  l.env.TARGETLOCATION_ARB = 7;
  l.env.TARGETLOCATION_PANNORDIG = 8;
  l.env.TARGETLOCATION_SOUTHEASTASIA = 9;
  l.env.TARGETLOCATION_ASIA_ATV = 10;
  l.env.TARGETLOCATION_ASIA_DTV = 11;
  l.env.TARGETLOCATION_TW = 12;
  l.env.TARGETLOCATION_NORTHAFRICA = 13;
  l.env.TARGETLOCATION_EA_DTV = 14;
  l.env.TARGETLOCATION_CIS = 15;
  l.env.TARGETLOCATION_PHI = 16;
  l.env.TARGETLOCATION_S_AFR_DTV = 17;
  l.env.getTargetLocation = function () {
    alert("[AF env] getTargetLocation()");
  };
  var d = null;
  function h(t) {
    alert("getConfigXMLValue(" + t + ")");
    if (!d) {
      try {
        d = null;
        if (window.DOMParser) {
          alert("Use DOMParser");
          var p = l.core.readFile("config.xml");
          if (!p) {
            alert("Fail to read config.xml");
            return null
          }
          var u = new DOMParser();
          d = u.parseFromString(p, "text/xml")
        } else {
          if (window.XMLHttpRequest) {
            alert("Use XHR");
            var q = new XMLHttpRequest();
            q.open("GET", "config.xml", false);
            q.send();
            d = q.responseXML
          } else {
            alert("CANNOT use DOMParser and XHR. Fail to get config.");
            return null
          }
        }
      } catch (s) {
        alert("EXCEPTION1 (getConfigXMLValue) : " + s);
        d = null;
        return null
      }
    }
    try {
      var r = d.getElementsByTagName(t);
      if (r && r.length) {
        alert("Returns " + r[0].textContent);
        return r[0].textContent
      } else {
        alert("Can't find the tag. Returns null");
        return null
      }
    } catch (s) {
      alert("EXCEPTION2 (getConfigXMLValue) : " + s);
      return null
    }
  }
})(sf);
(function (a) {
  var c = false;
  a.core.init = function () {
    if (c) {
      return
    }
    c = true;
    alert("[AF Core] init()");
    var o = a.core.getAppConf();
    var q = [];
    var r = [];
    var f = a.env.getLanguageCode(); 
    alert("[AF core] lang before : " + f);
    if (o && o.languages) {
      if (!a.util.inArray(f, o.languages)) {
        f = o.languages[0] || "en"
      }
    }
    alert("[AF core] lang after : " + f);
    q.push(a.core._afPath.lang + "/" + f + ".js");
    alert("[AF ui] load base theme.");
    r.push(a.core._afPath.core + "/base_" + a.env.getResolution() + ".css");
    var g = a.core.getAppConf("theme");
    if (g && g != "base") {
      r.push(a.core._afPath.core + "/" + a.core.getAppConf("theme") + "_" + a.env.getResolution() + ".css")
    }
    if (o && o.languages) {
      q.push(f + ".js")
    }
    if (o && o.scenes && o.scenes.length) {
      q.push("app/init.js")
    }
    if (o && o.files && o.files.length) {
      var p = /\.([0-9a-z]+)(?:[\?#]|$)/i;
      for (var l = 0; l < o.files.length; l++) {
        var e = o.files[l].match(p);
        if (e && e.length == 2) {
          if (e[1].toLowerCase() == "js") {
            q.push(o.files[l]);
          } else {
            if (e[1].toLowerCase() == "css") {
              r.push(o.files[l]);
            }
          }
        }
      }
    }
    var s = false;
    var n = false;
    /*LDW>
    a.core.loadCSS(r, function () {
      s = true;
      if (s && n) {
        d()
      }
    });
    a.core.loadJS(q, function () {
      n = true;
      if (s && n) {
        d()
      }
    });
    */
    d();
    function d() {
      if (o && o.scenes && o.scenes.length) {
        $(document).ready(function () {
          alert("DOCUMENT READY");
          E();
          function E() {
            alert("initializeScene()");
            a.scene.init(function () {
              if (typeof onStart == "function") {
                try {
                  onStart()
                } catch (j) {
                  alert("EXCEPTION(onStart): " + j)
                }
              }
            })
          }
        })
      }
    }
    $(window).unload(function () {
      alert("[AF core] unload handler");
      if (typeof onDestroy == "function") {
        try {
          onDestroy()
        } catch (w) {
          alert("EXCEPTION(onDestroy): " + w)
        }
      } else {
        alert("[AF core] onDestroy is not defined..")
      }
    });
    if (jQuery) {
      jQuery.ajaxSetup({
        type: "GET",
        timeout: 60000,
        beforeSend: function (j) {
        },
        complete: function (t, j) {
        },
        error: function (t, j, u) {
        }
      })
    }
  }
})(sf);
(function (b) {
  b.key = {
    N1: 101,
    N2: 98,
    N3: 6,
    N4: 8,
    N5: 9,
    N6: 10,
    N7: 12,
    N8: 13,
    N9: 14,
    N0: 17,
    PRECH: 259,
    VOL_UP: 7,
    VOL_DOWN: 11,
    MUTE: 27,
    CH_UP: 68,
    CH_DOWN: 65,
    SOURCE: 222,
    CHLIST: 84,
    TOOLS: 75,
    ENTER: 29443,
    RETURN: 88,
    INFO: 31,
    EXIT: 45,
    UP: 29460,
    DOWN: 29461,
    LEFT: 4,
    RIGHT: 5,
    RED: 108,
    GREEN: 20,
    YELLOW: 21,
    BLUE: 22,
    REW: 69,
    REW_: 1080,
    PAUSE: 74,
    FF: 72,
    FF_: 1078,
    REC: 192,
    PLAY: 71,
    STOP: 70,
    THREE_D: 1219,
    PANEL_CH_UP: 105,
    PANEL_CH_DOWN: 106,
    PANEL_VOL_UP: 203,
    PANEL_VOL_DOWN: 204,
    PANEL_ENTER: 309,
    PANEL_SOURCE: 612,
    PANEL_MENU: 613,
    PANEL_POWER: 614,
    FAMILYSTORY: 2252,
    CAMERA: 2253,
    HISTORY: 246,
    SMARTHUB: 261,
  };
  b.key.preventDefault = function () {
    alert("[AF Key] preventDefault()");
    event.preventDefault()
  };
  b.key.registerKey = function (g) {
    var f = b.core.plugin("APPCOMMON");
    if (f) {
      alert("[AF core] sf.key.registerKey(" + g + " -> [" + d[g] + "])");
      f.RegisterKey(d[g])
    }
  };
  b.key.unregisterKey = function (g) {
    var f = b.core.plugin("APPCOMMON");
    if (f) {
      alert("[AF core] sf.key.unregisterKey(" + g + " -> [" + d[g] + "])");
      f.UnregisterKey(d[g])
    }
  };
  var c = {
    PL_APPCOMMON_KEY_JOYSTICK_OK: 29443,
    PL_APPCOMMON_KEY_MENU: 262,
    PL_APPCOMMON_KEY_JOYSTICK_UP: 29460,
    PL_APPCOMMON_KEY_JOYSTICK_DOWN: 29461,
    PL_APPCOMMON_KEY_JOYSTICK_LEFT: 4,
    PL_APPCOMMON_KEY_JOYSTICK_RIGHT: 5,
    PL_APPCOMMON_KEY_3: 6,
    PL_APPCOMMON_KEY_VOLUP: 7,
    PL_APPCOMMON_KEY_4: 8,
    PL_APPCOMMON_KEY_5: 9,
    PL_APPCOMMON_KEY_6: 10,
    PL_APPCOMMON_KEY_VOLDOWN: 11,
    PL_APPCOMMON_KEY_7: 12,
    PL_APPCOMMON_KEY_8: 13,
    PL_APPCOMMON_KEY_9: 14,
    PL_APPCOMMON_KEY_MUTE: 27,
    PL_APPCOMMON_KEY_CHDOWN: 65,
    PL_APPCOMMON_KEY_0: 17,
    PL_APPCOMMON_KEY_CHUP: 68,
    PL_APPCOMMON_KEY_PRECH: 259,
    PL_APPCOMMON_KEY_GREEN: 20,
    PL_APPCOMMON_KEY_YELLOW: 21,
    PL_APPCOMMON_KEY_CYAN: 22,
    PL_APPCOMMON_KEY_SOURCE: 222,
    PL_APPCOMMON_KEY_TV: 77,
    PL_APPCOMMON_KEY_INFO: 31,
    PL_APPCOMMON_KEY_EXIT: 45,
    PL_APPCOMMON_KEY_FAVCH: 256,
    PL_APPCOMMON_KEY_REWIND: 69,
    PL_APPCOMMON_KEY_STOP: 70,
    PL_APPCOMMON_KEY_PLAY: 71,
    PL_APPCOMMON_KEY_FF: 72,
    PL_APPCOMMON_KEY_REC: 192,
    PL_APPCOMMON_KEY_PAUSE: 74,
    PL_APPCOMMON_KEY_TOOLS: 115,
    PL_APPCOMMON_KEY_FF_: 1078,
    PL_APPCOMMON_KEY_REWIND_: 1080,
    PL_APPCOMMON_KEY_RETURN: 88,
    PL_APPCOMMON_KEY_2: 98,
    PL_APPCOMMON_KEY_DMA: 1099,
    PL_APPCOMMON_KEY_1: 101,
    PL_APPCOMMON_KEY_CH_LIST: 84,
    PL_APPCOMMON_KEY_RED: 108,
    PL_APPCOMMON_KEY_CONTENTS: 261,
    PL_APPCOMMON_KEY_W_LINK: 115,
    PL_APPCOMMON_KEY_RSS: 147,
    PL_APPCOMMON_KEY_ENTERTAINMENT: 653,
    PL_APPCOMMON_KEY_PANNEL_POWER: 614,
    PL_APPCOMMON_KEY_PANNEL_CHUP: 105,
    PL_APPCOMMON_KEY_PANNEL_CHDOWN: 106,
    PL_APPCOMMON_KEY_PANNEL_VOLUP: 203,
    PL_APPCOMMON_KEY_PANNEL_VOLDOWN: 204,
    PL_APPCOMMON_KEY_PANNEL_ENTER: 309,
    PL_APPCOMMON_KEY_PANNEL_MENU: 613,
    PL_APPCOMMON_KEY_PANNEL_SOURCE: 612,
    PL_APPCOMMON_KEY_3D: 1219,
    PL_APPCOMMON_KEY_FAMILYHUB: 252,
    PL_APPCOMMON_KEY_CAMERA: 253,
    PL_APPCOMMON_KEY_HISTORY: 246
  };
  var d = {};
  d[b.key.N1] = c.PL_APPCOMMON_KEY_1;
  d[b.key.N2] = c.PL_APPCOMMON_KEY_2;
  d[b.key.N3] = c.PL_APPCOMMON_KEY_3;
  d[b.key.N4] = c.PL_APPCOMMON_KEY_4;
  d[b.key.N5] = c.PL_APPCOMMON_KEY_5;
  d[b.key.N6] = c.PL_APPCOMMON_KEY_6;
  d[b.key.N7] = c.PL_APPCOMMON_KEY_7;
  d[b.key.N8] = c.PL_APPCOMMON_KEY_8;
  d[b.key.N9] = c.PL_APPCOMMON_KEY_9;
  d[b.key.N0] = c.PL_APPCOMMON_KEY_0;
  d[b.key.PRECH] = c.PL_APPCOMMON_KEY_PRECH;
  d[b.key.VOL_UP] = c.PL_APPCOMMON_KEY_VOLUP;
  d[b.key.VOL_DOWN] = c.PL_APPCOMMON_KEY_VOLDOWN;
  d[b.key.CH_UP] = c.PL_APPCOMMON_KEY_CHUP;
  d[b.key.CH_DOWN] = c.PL_APPCOMMON_KEY_CHDOWN;
  d[b.key.MUTE] = c.PL_APPCOMMON_KEY_MUTE;
  d[b.key.SOURCE] = c.PL_APPCOMMON_KEY_SOURCE;
  d[b.key.CHLIST] = c.PL_APPCOMMON_KEY_CH_LIST;
  d[b.key.MENU] = c.PL_APPCOMMON_KEY_MENU;
  d[b.key.WLINK] = c.PL_APPCOMMON_KEY_W_LINK;
  d[b.key.ENTER] = c.PL_APPCOMMON_KEY_JOYSTICK_OK;
  d[b.key.RETURN] = c.PL_APPCOMMON_KEY_RETURN;
  d[b.key.INFO] = c.PL_APPCOMMON_KEY_INFO;
  d[b.key.EXIT] = c.PL_APPCOMMON_KEY_EXIT;
  d[b.key.UP] = c.PL_APPCOMMON_KEY_JOYSTICK_UP;
  d[b.key.DOWN] = c.PL_APPCOMMON_KEY_JOYSTICK_DOWN;
  d[b.key.LEFT] = c.PL_APPCOMMON_KEY_JOYSTICK_LEFT;
  d[b.key.RIGHT] = c.PL_APPCOMMON_KEY_JOYSTICK_RIGHT;
  d[b.key.RED] = c.PL_APPCOMMON_KEY_RED;
  d[b.key.GREEN] = c.PL_APPCOMMON_KEY_GREEN;
  d[b.key.YELLOW] = c.PL_APPCOMMON_KEY_YELLOW;
  d[b.key.BLUE] = c.PL_APPCOMMON_KEY_CYAN;
  d[b.key.INFOLINK] = c.PL_APPCOMMON_KEY_RSS;
  d[b.key.DMA] = c.PL_APPCOMMON_KEY_DMA;
  d[b.key.EMODE] = c.PL_APPCOMMON_KEY_ENTERTAINMENT;
  d[b.key.CONTENTS] = c.PL_APPCOMMON_KEY_CONTENTS;
  d[b.key.FAVCH] = c.PL_APPCOMMON_KEY_FAVCH;
  d[b.key.REW] = c.PL_APPCOMMON_KEY_REWIND;
  d[b.key.PAUSE] = c.PL_APPCOMMON_KEY_PAUSE;
  d[b.key.FF] = c.PL_APPCOMMON_KEY_FF;
  d[b.key.REC] = c.PL_APPCOMMON_KEY_REC;
  d[b.key.PLAY] = c.PL_APPCOMMON_KEY_PLAY;
  d[b.key.STOP] = c.PL_APPCOMMON_KEY_STOP;
  d[b.key.PANEL_CH_UP] = c.PL_APPCOMMON_KEY_PANNEL_CHUP;
  d[b.key.PANEL_CH_DOWN] = c.PL_APPCOMMON_KEY_PANNEL_CHDOWN;
  d[b.key.PANEL_VOL_UP] = c.PL_APPCOMMON_KEY_PANNEL_VOLUP;
  d[b.key.PANEL_VOL_DOWN] = c.PL_APPCOMMON_KEY_PANNEL_VOLDOWN;
  d[b.key.PANEL_ENTER] = c.PL_APPCOMMON_KEY_PANNEL_ENTER;
  d[b.key.PANEL_SOURCE] = c.PL_APPCOMMON_KEY_PANNEL_SOURCE;
  d[b.key.PANEL_MENU] = c.PL_APPCOMMON_KEY_PANNEL_MENU;
  d[b.key.PANEL_POWER] = c.PL_APPCOMMON_KEY_PANNEL_POWER;
  d[b.key.THREE_D] = c.PL_APPCOMMON_KEY_3D;
  var e = {
    PL_TVMW_KEY_1: 0,
    PL_TVMW_KEY_2: 1,
    PL_TVMW_KEY_3: 2,
    PL_TVMW_KEY_4: 3,
    PL_TVMW_KEY_5: 4,
    PL_TVMW_KEY_6: 5,
    PL_TVMW_KEY_7: 6,
    PL_TVMW_KEY_8: 7,
    PL_TVMW_KEY_9: 8,
    PL_TVMW_KEY_0: 9,
    PL_TVMW_KEY_HYPHEN: 10,
    PL_TVMW_KEY_11: 11,
    PL_TVMW_KEY_CH_UP: 100,
    PL_TVMW_KEY_CH_DOWN: 101,
    PL_TVMW_KEY_CH_PREV: 102,
    PL_TVMW_KEY_CH_FAV: 103,
    PL_TVMW_KEY_CH_LIST: 104,
    PL_TVMW_KEY_CH_PANNEL_UP: 105,
    PL_TVMW_KEY_CH_PANNEL_DOWN: 106,
    PL_TVMW_KEY_VOL_UP: 200,
    PL_TVMW_KEY_VOL_DOWN: 201,
    PL_TVMW_KEY_MUTE: 202,
    PL_TVMW_KEY_VOL_PANNEL_UP: 203,
    PL_TVMW_KEY_VOL_PANNEL_DOWN: 204,
    PL_TVMW_KEY_ENTER: 300,
    PL_TVMW_KEY_RETURN: 301,
    PL_TVMW_KEY_EXIT: 302,
    PL_TVMW_KEY_ARROW_UP: 303,
    PL_TVMW_KEY_ARROW_DOWN: 304,
    PL_TVMW_KEY_ARROW_LEFT: 305,
    PL_TVMW_KEY_ARROW_RIGHT: 306,
    PL_TVMW_KEY_WHEEL_LEFT: 307,
    PL_TVMW_KEY_WHEEL_RIGHT: 308,
    PL_TVMW_KEY_PANNEL_ENTER: 309,
    PL_TVMW_KEY_RED: 400,
    PL_TVMW_KEY_GREEN: 401,
    PL_TVMW_KEY_YELLOW: 402,
    PL_TVMW_KEY_CYAN: 403,
    PL_TVMW_KEY_REWARD: 500,
    PL_TVMW_KEY_PAUSE: 501,
    PL_TVMW_KEY_FOWARD: 502,
    PL_TVMW_KEY_PLAY: 503,
    PL_TVMW_KEY_STOP: 504,
    PL_TVMW_KEY_REC: 505,
    PL_TVMW_KEY_INFO: 600,
    PL_TVMW_KEY_TOOLS: 601,
    PL_TVMW_KEY_INFOLINK: 602,
    PL_TVMW_KEY_EMODE: 603,
    PL_TVMW_KEY_DATA: 604,
    PL_TVMW_KEY_DMA: 605,
    PL_TVMW_KEY_CONTENTS: 606,
    PL_TVMW_KEY_MENU: 607,
    PL_TVMW_KEY_WISELINK: 608,
    PL_TVMW_KEY_SOURCE: 609,
    PL_TVMW_KEY_POWER: 610,
    PL_TVMW_KEY_TV: 611,
    PL_TVMW_KEY_PANNEL_SOURCE: 612,
    PL_TVMW_KEY_PANNEL_MENU: 613,
    PL_TVMW_KEY_PANNEL_POWER: 614,
    PL_TVMW_KEY_TTX_MIX: 650,
    PL_TVMW_KEY_GUIDE: 651,
    PL_TVMW_KEY_SUBTITLE: 652,
    PL_TVMW_KEY_ASPECT: 653,
    PL_TVMW_KEY_DOLBY_SRR: 654,
    PL_TVMW_KEY_MTS: 655,
    PL_TVMW_KEY_REPEAT: 656,
    PL_TVMW_KEY_STEP: 1023,
    PL_TVMW_KEY_PIP_ONOFF: 1032,
    PL_TVMW_KEY_AD: 1039,
    PL_TVMW_KEY_PMODE: 1040,
    PL_TVMW_KEY_SMODE: 1043,
    PL_TVMW_KEY_PIP_CHUP: 1050,
    PL_TVMW_KEY_PIP_CHDOWN: 1051,
    PL_TVMW_KEY_FF_: 1078,
    PL_TVMW_KEY_REWIND_: 1080,
    PL_TVMW_KEY_DISC_MENU: 1086,
    PL_TVMW_KEY_SUB_TITLE: 1089,
    PL_TVMW_KEY_SLEEP: 1097,
    PL_TVMW_KEY_PCMODE: 1105,
    PL_TVMW_KEY_AV1: 1132,
    PL_TVMW_KEY_SVIDEO1: 1133,
    PL_TVMW_KEY_COMPONENT1: 1134,
    PL_TVMW_KEY_COMPONENT2: 1136,
    PL_TVMW_KEY_HDMI: 1139,
    PL_TVMW_KEY_AV2: 1165,
    PL_TVMW_KEY_AV3: 1166,
    PL_TVMW_KEY_SVIDEO2: 1167,
    PL_TVMW_KEY_SVIDEO3: 1168,
    PL_TVMW_KEY_ZOOM2: 1169,
    PL_TVMW_KEY_PANORAMA: 1170,
    PL_TVMW_KEY_4_3: 1171,
    PL_TVMW_KEY_16_9: 1172,
    PL_TVMW_KEY_DYNAMIC: 1173,
    PL_TVMW_KEY_STANDARD: 1174,
    PL_TVMW_KEY_MOVIE1: 1175,
    PL_TVMW_KEY_CUSTOM: 1176,
    PL_TVMW_KEY_HDMI1: 1184,
    PL_TVMW_KEY_HDMI2: 1205,
    PL_TVMW_KEY_HDMI3: 1206,
    PL_TVMW_KEY_HDMI4: 1210,
    PL_TVMW_KEY_TILT: 1217,
    PL_TVMW_KEY_EZ_VIEW: 1218,
    PL_TVMW_KEY_3D: 1219,
    PL_TVMW_KEY_AUTO_ARC_PVR_RECORDING_TEST: 1220,
    PL_TVMW_KEY_AUTO_ARC_PVR_PLAY_TEST: 1221,
    PL_TVMW_KEY_AUTO_ARC_PVR_DELETE_ALL: 1222,
    PL_TVMW_KEY_AUTO_ARC_HOTEL_INTERACTIVE: 1223,
    PL_TVMW_KEY_D_LIST_UP: 1224,
    PL_TVMW_KEY_D_LIST_DOWN: 1225,
    PL_TVMW_KEY_D_ONDEMAND: 1226,
    PL_TVMW_KEY_D_PANNEL_VIRTUAL_ENTER: 1227,
    PL_TVMW_KEY_D_PANNEL_VIRTUAL_SOURCE: 1228,
    PL_TVMW_KEY_D_REC_PAUSE: 1229,
    PL_TVMW_KEY_D_CONTINUED_FF: 1230,
    PL_TVMW_KEY_D_CONTINUED_RW: 1231,
    PL_TVMW_KEY_D_CONTINUED_OFF: 1232,
    PL_TVMW_KEY_D_CANCEL: 1233,
    PL_TVMW_KEY_D_TITLE_MENU: 1234,
    PL_TVMW_KEY_D_REPEAT_AB: 1235,
    PL_TVMW_KEY_D_AUDIO: 1236,
    PL_TVMW_KEY_D_REC_MODE: 1237,
    PL_TVMW_KEY_D_USB: 1238,
    PL_TVMW_KEY_D_HDD: 1239,
    PL_TVMW_KEY_D_DISC: 1240,
    PL_TVMW_KEY_D_TEST: 1241,
    PL_TVMW_KEY_D_COPY: 1242,
    PL_TVMW_KEY_D_FRONT_PLAY: 1243,
    PL_TVMW_KEY_D_FRONT_STOP: 1244,
    PL_TVMW_KEY_D_FRONT_FF: 1245,
    PL_TVMW_KEY_D_FRONT_RW: 1246,
    PL_TVMW_KEY_D_FRONT_REC: 1247,
    PL_TVMW_KEY_D_VERSION_DISPLAY_KEU: 1248,
    PL_TVMW_KEY_D_VIEW_MODE: 1249,
    PL_TVMW_KEY_D_COLD_START: 1250
  };
  var a = {};
  a[b.key.N1] = e.PL_TVMW_KEY_1;
  a[b.key.N2] = e.PL_TVMW_KEY_2;
  a[b.key.N3] = e.PL_TVMW_KEY_3;
  a[b.key.N4] = e.PL_TVMW_KEY_4;
  a[b.key.N5] = e.PL_TVMW_KEY_5;
  a[b.key.N6] = e.PL_TVMW_KEY_6;
  a[b.key.N7] = e.PL_TVMW_KEY_7;
  a[b.key.N8] = e.PL_TVMW_KEY_8;
  a[b.key.N9] = e.PL_TVMW_KEY_9;
  a[b.key.N0] = e.PL_TVMW_KEY_0;
  a[b.key.PRECH] = e.PL_TVMW_KEY_CH_PREV;
  a[b.key.VOL_UP] = e.PL_TVMW_KEY_VOL_UP;
  a[b.key.VOL_DOWN] = e.PL_TVMW_KEY_VOL_DOWN;
  a[b.key.CH_UP] = e.PL_TVMW_KEY_CH_UP;
  a[b.key.CH_DOWN] = e.PL_TVMW_KEY_CH_DOWN;
  a[b.key.MUTE] = e.PL_TVMW_KEY_MUTE;
  a[b.key.SOURCE] = e.PL_TVMW_KEY_SOURCE;
  a[b.key.CHLIST] = e.PL_TVMW_KEY_CH_LIST;
  a[b.key.MENU] = e.PL_TVMW_KEY_MENU;
  a[b.key.WLINK] = e.PL_TVMW_KEY_WISELINK;
  a[b.key.ENTER] = e.PL_TVMW_KEY_ENTER;
  a[b.key.RETURN] = e.PL_TVMW_KEY_RETURN;
  a[b.key.INFO] = e.PL_TVMW_KEY_INFO;
  a[b.key.EXIT] = e.PL_TVMW_KEY_EXIT;
  a[b.key.UP] = e.PL_TVMW_KEY_ARROW_UP;
  a[b.key.DOWN] = e.PL_TVMW_KEY_ARROW_DOWN;
  a[b.key.LEFT] = e.PL_TVMW_KEY_ARROW_LEFT;
  a[b.key.RIGHT] = e.PL_TVMW_KEY_ARROW_RIGHT;
  a[b.key.RED] = e.PL_TVMW_KEY_RED;
  a[b.key.GREEN] = e.PL_TVMW_KEY_GREEN;
  a[b.key.YELLOW] = e.PL_TVMW_KEY_YELLOW;
  a[b.key.BLUE] = e.PL_TVMW_KEY_CYAN;
  a[b.key.INFOLINK] = e.PL_TVMW_KEY_INFOLINK;
  a[b.key.DMA] = e.PL_TVMW_KEY_DMA;
  a[b.key.EMODE] = e.PL_TVMW_KEY_EMODE;
  a[b.key.CONTENTS] = e.PL_TVMW_KEY_CONTENTS;
  a[b.key.FAVCH] = e.PL_TVMW_KEY_CH_FAV;
  a[b.key.REW] = e.PL_TVMW_KEY_REWARD;
  a[b.key.PAUSE] = e.PL_TVMW_KEY_PAUSE;
  a[b.key.FF] = e.PL_TVMW_KEY_FOWARD;
  a[b.key.REC] = e.PL_TVMW_KEY_REC;
  a[b.key.PLAY] = e.PL_TVMW_KEY_PLAY;
  a[b.key.STOP] = e.PL_TVMW_KEY_STOP;
  a[b.key.PANEL_CH_UP] = e.PL_TVMW_KEY_CH_PANNEL_UP;
  a[b.key.PANEL_CH_DOWN] = e.PL_TVMW_KEY_CH_PANNEL_DOWN;
  a[b.key.PANEL_VOL_UP] = e.PL_TVMW_KEY_VOL_PANNEL_UP;
  a[b.key.PANEL_VOL_DOWN] = e.PL_TVMW_KEY_VOL_DOWN;
  a[b.key.PANEL_ENTER] = e.PL_TVMW_KEY_PANNEL_ENTER;
  a[b.key.PANEL_SOURCE] = e.PL_TVMW_KEY_PANNEL_SOURCE;
  a[b.key.PANEL_MENU] = e.PL_TVMW_KEY_PANNEL_MENU;
  a[b.key.PANEL_POWER] = e.PL_TVMW_KEY_PANNEL_POWER;
  a[b.key.THREE_D] = e.PL_TVMW_KEY_3D
})(sf);
(function (b) {
  b.core._PCMode = true;
  var a = {
    AUDIO: {
      GetPluginInfo: function () {
        return null
      },
      CheckExternalOutMode: function () {
        return null
      },
      GetExternalOutMode: function () {
        return null
      },
      GetOutputDevice: function () {
        return null
      },
      GetSystemMute: function () {
        return null
      },
      GetUserMute: function () {
        return null
      },
      GetVolume: function () {
        return null
      },
      IsActiveSourceOnCEC: function () {
        return null
      },
      SetExternalOutMode: function () {
        return null
      },
      SetSystemMute: function () {
        return null
      },
      SetTVSourceOnCEC: function () {
        return null
      },
      SetUserMute: function () {
        return null
      },
      SetVolumeWithKey: function () {
        return null
      }
    },
    APPCOMMON: {
      GetPluginInfo: function () {
        return null
      },
      CheckReservedKey: function () {
        return null
      },
      IsKeyRegister: function () {
        return null
      },
      RegisterAllKey: function () {
        return null
      },
      RegisterColorKey: function () {
        return null
      },
      RegisterKey: function () {
        return null
      },
      RegisterNaviKey: function () {
        return null
      },
      RegisterNumKey: function () {
        return null
      },
      RegisterPlaybackKey: function () {
        return null
      },
      SendEvent_IME: function () {
        return null
      },
      SendEvent_IME_Sync: function () {
        return null
      },
      SendKeyToTVViewer: function () {
        return null
      },
      SubscribeEvent: function () {
        return null
      },
      UnregisterAllKey: function () {
        return null
      },
      UnregisterColorKey: function () {
        return null
      },
      UnregisterKey: function () {
        return null
      },
      UnregisterNaviKey: function () {
        return null
      },
      UnregisterNumKey: function () {
        return null
      },
      UnregisterPlaybackKey: function () {
        return null
      },
      UnsubscribeEvent: function () {
        return null
      },
      SendDualTVWidgetViewInfo: function () {
        return null
      }
    },
    DEVICE: {
      GetPluginInfo: function () {
        return null
      },
      GetDisplayPanelType: function () {
        return 0
      },
      GetModel: function () {
        return "UNXXD8000_USA"
      },
      "GetRealModel ": function () {
        return "UN46D8000_USA"
      }
    },
    FRONTPANEL: {
      GetPluginInfo: function () {
        return null
      },
      DisplayVFD_Show: function () {
        return null
      },
      DisplayVFD_Time: function () {
        return null
      }
    },
    IMAGEVIEWER: {
      GetPluginInfo: function () {
        return null
      },
      ClearScreen: function () {
        return null
      },
      GetPlayerVersion: function () {
        return null
      },
      GetVideoHeight: function () {
        return null
      },
      GetVideoWidth: function () {
        return null
      },
      InitPlayer: function () {
        return null
      },
      Play: function () {
        return null
      },
      SetDisplayArea: function () {
        return null
      },
      SetDisplayLock: function () {
        return null
      },
      SetTransitionEffect: function () {
        return null
      },
      ShowImage: function () {
        return null
      },
      Stop: function () {
        return null
      },
      OnBufferingComplete: null,
      OnBufferingStart: null,
      OnConnectionFailed: null,
      OnNetworkDisconnected: null,
      OnRenderError: null,
      OnRenderingComplete: null,
      OnStreamInfoReady: null,
      OnStreamNotFound: null,
    },
    NETWORK: {
      GetPluginInfo: function () {
        return null
      },
      CheckCableConnection: function () {
        return null
      },
      CheckDNS: function () {
        return null
      },
      CheckGateway: function () {
        return null
      },
      CreatePlugin: function () {
        return null
      },
      GetActiveType: function () {
        return null
      },
      GetDNS: function () {
        return null
      },
      GetGateway: function () {
        return null
      },
      GetHostAddr: function () {
        return null
      },
      GetHWaddr: function () {
        return null
      },
      GetIpType: function () {
        return null
      },
      GetNetMask: function () {
        return null
      },
      GetStatus: function () {
        return null
      },
      HttpTest: function () {
        return null
      },
      IPConflictTest: function () {
        return null
      }
    },
    NNAVI: {
      GetPluginInfo: function () {
        return null
      },
      ActivateReady: function () {
        return null
      },
      ActivateWithData: function () {
        return null
      },
      ChangeWidgetManager: function () {
        return null
      },
      GetAppKey: function () {
        return null
      },
      GetDUID: function () {
        return "123456789"
      },
      GetFirmware: function () {
        return "T-INFOLINK2012-1000"
      },
      GetModelCode: function () {
        return "12_ECHO_P"
      },
      GetPath: function () {
        return null
      },
      GetRemoconType: function () {
        return null
      },
      GetServerType: function () {
        return null
      },
      GetSupportPIG: function () {
        return null
      },
      GetSystemVersion: function () {
        return null
      },
      GetToken: function () {
        return null
      },
      NeedThisRemoconKey: function () {
        return null
      },
      ResetWidgetData: function () {
        return null
      },
      SendEventToDevice: function () {
        return null
      },
      SetBannerState: function () {
        return null
      }
    },
    PLAYER: {
      GetPluginInfo: function () {
        return null
      },
      ClearScreen: function () {
        return null
      },
      GetAvailableBitrates: function () {
        return null
      },
      GetCurrentBitrates: function () {
        return null
      },
      GetDuration: function () {
        return null
      },
      GetLiveDuration: function () {
        return null
      },
      GetPlayerVersion: function () {
        return null
      },
      GetVideoHeight: function () {
        return null
      },
      GetVideoWidth: function () {
        return null
      },
      InitPlayer: function () {
        return null
      },
      JumpBackward: function () {
        return null
      },
      JumpForward: function () {
        return null
      },
      Pause: function () {
        return null
      },
      Play: function () {
        return null
      },
      Resume: function () {
        return null
      },
      ResumePlay: function () {
        return null
      },
      SetCropArea: function () {
        return null
      },
      SetDisplayArea: function () {
        return null
      },
      SetICT: function () {
        return null
      },
      SetInitialBuffer: function () {
        return null
      },
      SetInitialTimeOut: function () {
        return null
      },
      SetMacrovision: function () {
        return null
      },
      SetPendingBuffer: function () {
        return null
      },
      SetPlaybackSpeed: function () {
        return null
      },
      SetPlayerProperty: function () {
        return null
      },
      SetTotalBufferSize: function () {
        return null
      },
      SetVBIData: function () {
        return null
      },
      StartPlayback: function () {
        return null
      },
      Stop: function () {
        return null
      },
      OnAdEnd: null,
      OnAdStart: null,
      OnAuthenticationFailed: null,
      OnBufferingComplete: null,
      OnBufferingProgress: null,
      OnBufferingStart: null,
      OnConnectionFailed: null,
      OnCurrentPlayTime: null,
      OnNetworkDisconnected: null,
      OnRenderError: null,
      OnRenderingComplete: null,
      OnResolutionChanged: null,
      OnStreamInfoReady: null,
      OnStreamNotFound: null
    },
    SCREEN: {
      GetPluginInfo: function () {
        return null
      },
      Check3DEffectMode: function () {
        return null
      },
      Flag3DEffectSupport: function () {
        return null
      },
      Flag3DTVConnect: function () {
        return null
      },
      Get3DEffectMode: function () {
        return null
      },
      GetOption: function () {
        return null
      },
      Set3DEffectMode: function () {
        return null
      },
      SetOption: function () {
        return null
      }
    },
    TV: {
      GetPluginInfo: function () {
        return null
      },
      CheckPIP: function () {
        return null
      },
      FlagStreamDST: function () {
        return null
      },
      GetBDProductType: function () {
        return null
      },
      GetCountry: function () {
        return null
      },
      GetDisplayPanelType: function () {
        return null
      },
      GetDST: function () {
        return null
      },
      GetLanguage: function () {
        return null
      },
      GetLanguageSet: function () {
        return null
      },
      GetPIP: function () {
        return null
      },
      GetPresentProgram_Duration: function () {
        return null
      },
      GetPresentProgram_EndTime: function () {
        return null
      },
      GetPresentProgram_StartTime: function () {
        return null
      },
      GetPresentProgram_Title: function () {
        return null
      },
      GetProductCode: function () {
        return null
      },
      GetProductType: function () {
        return null
      },
      GetProgram_Duration: function () {
        return null
      },
      GetProgram_EndTime: function () {
        return null
      },
      GetProgram_StartTime: function () {
        return null
      },
      GetProgram_Title: function () {
        return null
      },
      GetProgramList: function () {
        return null
      },
      GetProgramList_Size: function () {
        return null
      },
      GetTargetLocation: function () {
        return 0
      },
      GetTimeZone: function () {
        return null
      },
      GetTimeZone_Offset: function () {
        return null
      },
      SetCountry: function () {
        return null
      },
      SetDST: function () {
        return null
      },
      SetEvent: function () {
        return null
      },
      SetLanguage: function () {
        return null
      },
      SetPIP: function () {
        return null
      },
      SetTimeZone: function () {
        return null
      },
      SetWatchDog: function () {
        return null
      },
      UnsetEvent: function () {
        return null
      },
      OnEvent: null
    },
    TVMW: {
      GetPluginInfo: function () {
        return null
      },
      CheckReservedKey: function () {
        return null
      },
      Deactivate: function () {
        return null
      },
      GetActiveApp: function () {
        return null
      },
      GetBGApp: function () {
        return null
      },
      GetCountry: function () {
        return null
      },
      GetLanguage: function () {
        return null
      },
      GetProfile: function () {
        return null
      },
      GetSource: function () {
        return null
      },
      GetTVUseMode: function () {
        return null
      },
      IsRegisteredKey: function () {
        return null
      },
      RegForBGApp: function () {
        return null
      },
      RegisterKey: function () {
        return null
      },
      RegisterKeyGroup: function () {
        return null
      },
      SendKeyToTVViewer: function () {
        return null
      },
      SetProfile: function () {
        return null
      },
      SetSource: function () {
        return null
      },
      SetMediaSource: function () {
        return null
      },
      SetWatchDog: function () {
        return null
      },
      UnregForBGApp: function () {
        return null
      },
      UnregisterKey: function () {
        return null
      },
      UnregisterKeyGroup: function () {
        return null
      }
    },
    WINDOW: {
      GetPluginInfo: function () {
        return null
      },
      CheckScreenRect_PosSizeMode: function () {
        return null
      },
      GetCurrentChannel_Major: function () {
        return null
      },
      GetCurrentChannel_Minor: function () {
        return null
      },
      GetCurrentChannel_Name: function () {
        return null
      },
      GetCurrentChannel_OriginNetID: function () {
        return null
      },
      GetCurrentChannel_ProgramNumber: function () {
        return null
      },
      GetCurrentChannel_PTC: function () {
        return null
      },
      GetCurrentChannel_ServiceName: function () {
        return null
      },
      GetCurrentChannel_Type: function () {
        return null
      },
      GetResolution: function () {
        return null
      },
      GetScreenRect: function () {
        return null
      },
      GetScreenRect_PosMode: function () {
        return null
      },
      GetScreenRect_SizeMode: function () {
        return null
      },
      GetSource: function () {
        return null
      },
      GetState_Show: function () {
        return null
      },
      SetChannel: function () {
        return null
      },
      SetChannel_PTC: function () {
        return null
      },
      SetChannel_Seek: function () {
        return null
      },
      SetScreenRect: function () {
        return null
      },
      SetScreenRect_PosSizeMode: function () {
        return null
      },
      SetSource: function () {
        return null
      },
      Show: function () {
        return null
      }
    }
  };
  if (b.core._PCMode) {
    b.core.plugin = b.core.sefplugin = function (c) {
      return a[c.toUpperCase()]
    };
    /*LDW> 
    b.key.LEFT = 37;
    b.key.RIGHT = 39;
    b.key.UP = 38;
    b.key.DOWN = 40;
    b.key.ENTER = 13;
    b.key.N0 = 48;
    b.key.N1 = 49;
    b.key.N2 = 50;
    b.key.N3 = 51;
    b.key.N4 = 52;
    b.key.N5 = 53;
    b.key.N6 = 54;
    b.key.N7 = 55;
    b.key.N8 = 56;
    b.key.N9 = 57;
    b.key.RETURN = 27;
    b.key.RED = 112;
    b.key.GREEN = 113;
    b.key.YELLOW = 114;
    b.key.BLUE = 115;
    b.key.SMARTHUB = 116;
    b.key.SOURCE = 117;
    b.key.CHLIST = 118;
    b.key.MUTE = 119;
    b.key.VOL_DOWN = 120;
    b.key.VOL_UP = 121;
    b.key.CH_DOWN = 122;
    b.key.CH_UP = 123;
    b.key.MENU = 91;
    b.key.TOOLS = 93;
    document.body.addEventListener("keydown", function () {
      event.preventDefault()
    })
    */
  }
})(sf);
alert("[AF core] core.js included");
(function (sf) {
  var focusInterval = null;
  sf.scene = {
    get: function (key) {
      var retValue = storage.get(key);
      alert("[AF scene] sf.scene.get(" + key + ") returns " + (retValue ? key : null));
      return retValue
    },
    show: function (sceneID, data) {
      alert("[AF scene] sf.scene.show(" + sceneID + ")");
      var scene = this.get(sceneID);
      if (!scene) {
        alert("[AF scene] Invalid scene Id : " + sceneID);
        return
      }
      
      var el = document.getElementById(sceneID);
      if (el) {
      	el.style.display = "block";
      	if (!el.fInit) {
      		scene.initialize();	
      		el.fInit = true;
      	}
      } else {
        alert("[AF scene] cannot find div : " + sceneID);
      }
      
      scene.handleShow(data)
    },
    hide: function (sceneID, data) {
      alert("[AF scene] sf.scene.hide(" + sceneID + ")");
      var scene = this.get(sceneID);
      if (!scene) {
        alert("[AF scene] Invalid scene Id : " + sceneID);
        return
      }
      var id = sceneID;
      var el = document.getElementById(id);
      if (el) {
        el.style.display = "none"
      } else {
        alert("[AF scene] cannot find div : " + id)
      }
      scene.handleHide(data)
    },
    focus: function (sceneID, data) {
      alert("[AF scene] sf.scene.focus(" + sceneID + ")");
	  currentScene = window["Scene"+sceneID];
	  /*
      if (!this.getVisible(sceneID)) {
        alert("\t" + sceneID + ": This scene is not shown yet. Please show this scene first.");
        return
      }
      */
      var scene = this.get(sceneID);
      if (!scene) {
        alert("[AF scene] Invalid scene Id : " + sceneID);
        return
      }
      var oldScene = curFocused;
      if (oldScene) {
        oldScene.handleBlur()
      }
      curFocused = scene;
      scene.handleFocus(data)
    },
    init: function (callback) {
      alert("[AF scene] sf.scene.init()");
      sf.scene.loadScenes(function () {
        sf.scene._bindKeyHandler();
        if (callback && callback instanceof Function) {
          callback()
        }
      })
    },
    loadScenes: function () {
      alert("[AF scene] sf.scene.loadScenes()");
      var scenes, files, callback;
      var conf = sf.core.getAppConf();
      if (arguments.length == 1) {
        scenes = conf.scenes || [];
        callback = arguments[0]
      } else {
        if (arguments.length == 2) {
          scenes = arguments[0] || [];
          callback = arguments[1]
        }
      }
      if (!scenes || !scenes.length) {
        setTimeout(function () {
          callback(false)
        }, 0);
        return false
      }
      var arrFiles = [];
      var aCssPath = [];
      $.each(scenes, function (index, value) {
        arrFiles.push("app/scenes/" + value + ".js");
        aCssPath.push("app/stylesheets/" + value + ".css");
      });
      //addScenesFiles();
      function addScenesFiles() {
        for (var i in arrFiles) {
            var css = document.createElement("link");
            css.type = "text/css";
            css.rel = "stylesheet";
            css.href = aCssPath[i];
            css.setAttribute("waper_dontsave", "true");
            var js = document.createElement("script");
            js.type = "text/javascript";
            js.src = arrFiles[i];
            if (i == (arrFiles.length - 1)) js.onload = createSceneInstance;
            js.setAttribute("waper_dontsave", "true");
            document.getElementsByTagName("head")[0].appendChild(css);
            document.getElementsByTagName("head")[0].appendChild(js);
        }
      }
      var bSceneCSSLoaded = false;
      var bSceneJSLoaded = false;
      /*LDW>
      sf.core.loadCSS(aCssPath, function () {
        bSceneCSSLoaded = true;
        if (bSceneCSSLoaded && bSceneJSLoaded) {
          createSceneInstance()
        }
      });
      sf.core.loadJS(arrFiles, function () {
        bSceneJSLoaded = true;
        if (bSceneCSSLoaded && bSceneJSLoaded) {
          createSceneInstance()
        }
      });
      */
      createSceneInstance();
      function createSceneInstance() {
        $.each(scenes, function (index, SceneID) {
          alert("SCENE: " + SceneID);
          var sceneClass = "Scene" + SceneID;
          try {
            var instance = eval("new " + sceneClass + "()");
            instance.id = SceneID;
            storage.set(SceneID, instance);

            var scene = sf.scene.get(SceneID);
            //scene.initialize();
          } catch (e) {
            alert("[AF scene] !!!!! cannot create scene instance !!!!!");
            alert("[AF scene] " + e.toString())
          }
        });
        //LDW>
        if (window._browser == "designer") setCompSetAttr();
        var all_page = document.querySelectorAll("div[data-role='page']");
        for (var i=0; i < all_page.length; i++) {
        	all_page[i].fInit = false;
            all_page[i].style.display = "none";
        }
              
        if (typeof callback == "function") {
          callback()
        }
      }
      function setCompSetAttr() {
      	var avsetting_elems = document.querySelectorAll("div[data-role='dtvAVSetting']");
      	for (var i=0; i < avsetting_elems.length; i++) compSetAttrAVSetting($(avsetting_elems[i]));
      	var usb_elems = document.querySelectorAll("div[data-role='dtvUSB']");
      	for (var j=0; j < usb_elems.length; j++) compSetAttrUSB($(usb_elems[j]));
      	var videoplayer_elems = document.querySelectorAll("div[data-role='dtvVideoPlayer']");
      	for (var k=0; k < videoplayer_elems.length; k++) compSetAttrVideoPlayer($(videoplayer_elems[k]));
      	var audioplayer_elems = document.querySelectorAll("div[data-role='dtvAudioPlayer']");
      	for (var l=0; l < audioplayer_elems.length; l++) compSetAttrAudioPlayer($(audioplayer_elems[l]));
      	var imageviewer_elems = document.querySelectorAll("div[data-role='dtvImageViewer']");
      	for (var m=0; m < imageviewer_elems.length; m++) compSetAttrImageViewer($(imageviewer_elems[m]));
      	var slideshow_elems = document.querySelectorAll("div[data-role='dtvSlideShow']");
      	for (var n=0; n < slideshow_elems.length; n++) compSetAttrSlideShow($(slideshow_elems[n]));
      }
    },
    getFocused: function (sceneid) {
      alert("[AF scene] getFocused(" + sceneid + ")");
      if (sceneid) {
        return curFocused.id == sceneid
      } else {
        return curFocused.id
      }
    },
    getVisible: function (sceneID) {
      alert("[AF scene] getVisible(" + sceneID + ")");
      if (!sceneID) {
        alert("\treturns false");
        return false
      }
      var el = document.getElementById("Scene" + sceneID);
      var visible = (el && el.style.display == "block");
      alert("\tresult: " + visible);
      return visible ? true : false
    },
    getState: function (sceneID) {
      alert("[AF scene] getState(" + sceneID + ")");
      if (this.getFocused(sceneID)) {
        alert("\treturns 'focused'");
        return "focused"
      } else {
        alert("\treturns " + (this.getVisible(sceneID) ? "shown" : "hidden"));
        return this.getVisible(sceneID) ? "shown" : "hidden"
      }
    },
    _bindKeyHandler: function () {
      $("body").unbind("keydown");
      $("body").bind("keydown", function (event) {
        alert("[AF scene] body keydown event fired");
        if (document.activeElement && document.activeElement.tagName && document.activeElement.tagName.toUpperCase() != "BODY") {
          alert("\tbody is not activated currently... skip! : " + document.activeElement.tagName)
        } else {
          sf.scene._handleKeyDown()
        }
      });
      if (false) {
        $(document).delegate("*", "focus", function (event) {
          alert("Focused!!!!!!!!!!!!! " + this);
          document.activeElement = this
        });
        $(document).delegate("*", "blur", function (event) {
          alert("Blured!!!!!!!!!!!!! " + this);
          document.activeElement = null
        })
      }
    },
    returnFocus: function () {
      alert("[AF core] sf.scene.returnFocus()");
      this.clearKeyHandler();
      setTimeout(function () {
        if (document.activeElement && document.activeElement.tagName && document.activeElement.tagName.toUpperCase() != "BODY") {
          document.activeElement.blur()
        }
      }, 0)
    },
    aKeyHandlers: [],
    pushKeyHandler: function (eh, opt) {
      alert("[AF scene] pushKeyHandler()");
      var defaultOpt = {
        context: null,
        id: (new Date().getTime())
      };
      opt = $.extend(defaultOpt, opt);
      this.aKeyHandlers.push({
        handler: eh,
        context: opt.context || null,
        id: opt.id
      });
      alert("handler id: " + opt.id);
      return opt.id
    },
    removeKeyHandler: function (id) {
      alert("[AF scene] removeKeyHandler(" + id + ")");
      if (id) {
        for (var i = this.aKeyHandlers.length - 1; i >= 0; i--) {
          if (this.aKeyHandlers[i].id == id) {
            this.aKeyHandlers.splice(i, 1);
            alert("remove index " + i + " handler")
          }
        }
      }
    },
    popKeyHandler: function () {
      alert("[AF scene] popKeyHandler()");
      return this.aKeyHandlers.pop()
    },
    clearKeyHandler: function () {
      alert("[AF scene] clearKeyHandler()");
      this.aKeyHandlers = []
    },
    getKeyHandler: function () {
      alert("[AF scene] getKeyHandler()");
      if (this.aKeyHandlers && this.aKeyHandlers.length) {
        alert(this.aKeyHandlers.length + " handlers found");
        var eh = this.aKeyHandlers[this.aKeyHandlers.length - 1];
        return (eh || null)
      } else {
        return {
          handler: this._handleSceneKeyDown,
          context: this
        }
      }
    },
    _handleKeyDown: function (keyCode) {
      keyCode = keyCode || event.keyCode;
      alert("[AF scene] sf.scene._handleKeyDown(" + keyCode + ")");
      keyCode = sf.core.mapAliasedKeys(keyCode);
      var objHandler = this.getKeyHandler();
      if (objHandler && objHandler.handler && objHandler.handler instanceof Function) {
        objHandler.handler.call(objHandler.context || null, keyCode)
      }
    },
    _handleSceneKeyDown: function (keyCode) {
      alert("[AF scene] _handleSceneKeyDown (" + keyCode + ")");
      if (keyCode === undefined) {
        alert("do nothing. keyCode: " + keyCode);
        return
      }
      var scene = curFocused;
      if (scene && typeof scene.handleKeyDown == "function") {
        scene.handleKeyDown(keyCode)
      } else {
        alert("[AF scene] cannot run current focused scene's key handler.");
        alert("[AF scene] scene : " + scene);
        if (scene) {
          alert("[AF scene] key handler : " + scene.handleKeyDown)
        }
      }
    },
    _isSceneArchUsed: function () {
      alert("[AF scene] _isSceneArchUsed()");
      var scenes = sf.core.getAppConf("scenes");
      var used = (scenes && scenes.length) ? true : false;
      alert("\treturns: " + used);
      return used
    }
  };
  var oKeyHandler = {};
  var storage = new Storage();
  var curFocused = "";
  function Storage() {
    var data = {};
    this.get = function (key) {
      var retValue = null;
      if (data[key]) {
        retValue = data[key]
      }
      alert("[AF scene] storage.get(" + key + ") returns " + retValue);
      return retValue
    };
    this.set = function (key, value) {
      data[key] = value;
      alert("[AF scene] Storage.set(" + key + ")")
    };
    this.add = function (key, prop, value) {
      if (data[key]) {
        data[key][prop] = value
      } else {
        alert("[AF scene] cannot add the property.")
      }
    };
    this._getData = function () {
      return data
    }
  }
})(sf);
alert("[AF scene] Scene.js included");
sf = sf || {};
(function (d) {
  function a(h) {
    return;
    var g = "";
    for (var f = 0; f < e; f++) {
      g += "\t"
    }
    alert(g + h)
  }
  var e = 0;
  d.util = {
    xml2json: function (g) {
      var f = this.xml2obj(g);
      return this.obj2json(f)
    },
    xml2obj: function (m) {
      var l = {};
      var g = true;
      e++;
      a("xml2obj : " + m.tagName + "(" + m.nodeType + ")");
      if (m.nodeType == 9) {
        e--;
        return this.xml2obj(m.documentElement)
      } else {
        if (m.nodeType == 1) {
          var f = 0;
          for (var k = m.firstChild; k; k = k.nextSibling) {
            if ((k.nodeType == 3 && k.nodeValue.match(/[^ \f\n\r\t\v]/)) || k.nodeType == 4) {
              f++
            }
          }
          a("valueCount = " + f);
          for (var h = 0; h < m.attributes.length; h++) {
            a("attribute " + m.attributes[h].nodeName + " = " + m.attributes[h].nodeValue);
            l[m.attributes[h].nodeName] = m.attributes[h].nodeValue;
            g = false
          }
          for (var k = m.firstChild; k; k = k.nextSibling) {
            a("Child node : " + k.nodeType);
            if (k.nodeType == 3 && k.nodeValue.match(/[^ \f\n\r\t\v]/)) {
              if (f == 1 && m.attributes.length == 0) {
                l = k.nodeValue
              } else {
                l.text = k.nodeValue
              }
              g = false
            } else {
              if (k.nodeType == 4) {
                if (f == 1 && m.attributes.length == 0) {
                  l = k.nodeValue
                } else {
                  l.cdata = k.nodeValue
                }
                g = false
              } else {
                if (k.nodeType != 3) {
                  var j = this.xml2obj(k);
                  if (j) {
                    if (l[k.tagName]) {
                      if (l[k.tagName] instanceof Array) {
                        l[k.tagName].push(j)
                      } else {
                        l[k.tagName] = [l[k.tagName]];
                        l[k.tagName].push(j)
                      }
                    } else {
                      l[k.tagName] = j
                    }
                    g = false
                  } else {
                    a("this is nothing")
                  }
                }
              }
            }
          }
        }
      }
      e--;
      return g ? null : l
    },
    obj2json: function (j) {
      var k = "";
      if (j.constructor == Array) {
        k += "[";
        for (var h = 0; h < j.length; h++) {
          k += h != 0 ? ", " : "";
          k += this.obj2json(j[h])
        }
        k += "]"
      } else {
        if (j.constructor == String) {
          k += '"' + j + '"'
        } else {
          if (j.constructor == Date) {
            if (j.toJSON) {
              k += '"' + j.toJSON() + '"'
            } else {
              k += '"' + j + '"'
            }
          } else {
            if (j.constructor == Object) {
              k += "{";
              var g = 0;
              for (var f in j) {
                k += g != 0 ? ", " : "";
                k += '"' + f + '" : ' + this.obj2json(j[f]);
                g++
              }
              k += "}"
            } else {
              if (j.constructor == Number) {
                k += j
              }
            }
          }
        }
      }
      return k
    },
    dateFormat: function (g, f) {
      return g.toFormattedString(f || null)
    },
    inArray: function (h, g) {
      alert("inArray(" + h + ", " + g + ")");
      for (var f = 0; f < g.length; f++) {
        if (g[f] == h) {
          return true
        }
      }
      return false
    },
    init: function () {
      Date._MonthNames = [d.lang.SID_JANUARY, d.lang.SID_FEBRUARY, d.lang.SID_MARCH, d.lang.SID_APRIL, d.lang.SID_MAY_FULL, d.lang.SID_JUNE, d.lang.SID_JULY, d.lang.SID_AUGUST, d.lang.SID_SEPTEMBER, d.lang.SID_OCTOBER, d.lang.SID_NOVEMBER, d.lang.SID_DECEMBER];
      Date._MonthNames_abbr = [d.lang.SID_JAN, d.lang.SID_FEB, d.lang.SID_MAR, d.lang.SID_APR, d.lang.SID_MAY, d.lang.SID_JUN, d.lang.SID_JUL, d.lang.SID_AUG, d.lang.SID_SEP, d.lang.SID_OCT, d.lang.SID_NOV, d.lang.SID_DEC];
      Date._DayNames = [d.lang.SID_SUNDAY, d.lang.SID_MONDAY, d.lang.SID_TUESDAY, d.lang.SID_WEDNESDAY, d.lang.SID_THURSDAY, d.lang.SID_FRIDAY, d.lang.SID_SATURDAY];
      Date._DayNames_abbr = [d.lang.SID_SUN, d.lang.SID_MON, d.lang.SID_TUE, d.lang.SID_WED, d.lang.SID_THU, d.lang.SID_FRI, d.lang.SID_SAT]
    }
  };
  Date._MonthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  Date._MonthNames_abbr = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  Date._DayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  Date._DayNames_abbr = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  Date.prototype.toFormattedString = function (g) {
    if (!g) {
      g = Date.getLocaleFormatStr()
    }
    var h = this;
    var l = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var k = g.replace(/(d|D|j|l|N|S|w|z)/g, function (m) {
      switch (m) {
      case "d":
        return j(h.getDate(), 2);
      case "D":
        return Date._DayNames_abbr[h.getDay()];
      case "j":
        return h.getDate();
      case "l":
        return Date._DayNames[h.getDay()];
      case "S":
        return f(h.getDate());
      case "w":
        return h.getDay()
      }
      return ""
    });
    k = k.replace(/(F|m|M|n|t)/g, function (m) {
      switch (m) {
      case "F":
        return _Date._MonthNames[h.getMonth()];
      case "m":
        return j(h.getMonth() + 1, 2);
      case "M":
        return _Date._MonthNames_abbr[h.getMonth()];
      case "n":
        return (h.getMonth() + 1);
      case "t":
        return l[h.getMonth()] + (h.getFullYear() % 4 == 0 && h.getFullYear() % 100 != 0 || h.getFullYear() % 400 == 0) && h.getMonth() == 1 ? 1 : 0
      }
      return ""
    });
    k = k.replace(/(Y|y)/g, function (m) {
      switch (m) {
      case "Y":
        return h.getFullYear();
      case "y":
        return (h.getFullYear() + "").substr(2, 2)
      }
      return ""
    });
    k = k.replace(/(a|A|g|G|h|H|i|s|u)/g, function (m) {
      switch (m) {
      case "a":
        return h.getHours() < 12 ? "am" : "pm";
      case "A":
        return h.getHours() < 12 ? "AM" : "PM";
      case "g":
        return h.getHours() % 12;
      case "G":
        return h.getHours();
      case "h":
        return j(h.getHours() % 12, 2);
      case "H":
        return j(h.getHours(), 2);
      case "i":
        return j(h.getMinutes(), 2);
      case "s":
        return j(h.getSeconds(), 2);
      case "u":
        return h.getMilliseconds()
      }
      return ""
    });
    k = k.replace(/(T)/g, function (m) {
      switch (m) {
      case "T":
        var o = h.getTimezoneOffset() / 60;
        var q = o <= 0 ? "+" : "-";
        o = Math.abs(o);
        var p = Math.floor(o);
        var n = (o - p) * 60;
        p = (p < 10 ? "0" : "") + p;
        n = (n < 10 ? "0" : "") + n;
        return q + p + ":" + n
      }
      return ""
    });
    return k;
    function j(o, n) {
      o += "";
      for (var m = 0; o.length < n; m++) {
        o = "0" + o
      }
      return o
    }
    function f(n) {
      var m = n - parseInt(n / 10, 10) * 10;
      var o = n + "" + (m <= 1 ? "st" : m == 2 ? "nd" : m == 3 ? "rd" : "th");
      return o
    }
  };
  var b = {
    1: "Y/m/d a h:i",
    2: "m/d/Y h:i a",
    3: "d/m/Y h:i a",
    4: "d/m/Y H:i",
    5: "d/m/Y h:i a",
    6: "d/m/Y h:i a",
    7: "d/m/Y h:i a",
    8: "d/m/Y H:i",
    9: "d/m/Y h:i a",
    10: "d/m/Y h:i a",
    11: "d/m/Y h:i a",
    12: "d/m/Y h:i a",
    13: "d/m/Y h:i a",
    14: "d/m/Y h:i a",
    15: "d/m/Y h:i a",
    16: "d/m/Y h:i a",
    17: "d/m/Y h:i a",
    0: null,
  };
  var c = null;
  Date.getLocaleFormatStr = function () {
    if (!c) {
      c = d.env.getTargetLocation()
    }
    return b[c]
  };
  Number.prototype.addZeros = function (g) {
    var h = this + "";
    for (var f = 0; h.length < g; f++) {
      h = "0" + h
    }
    return h
  };
  Number.prototype.addTh = function () {
    var f = this + "" + (this <= 1 ? "st" : this == 2 ? "nd" : this == 3 ? "rd" : "th");
    return f
  };
  String.prototype.trim = function () {
    return this.replace(/^\s+|\s+$/g, "")
  }
})(sf);
alert("[AF Util] util.js included");
(function (a) {
  a.service = {
    setVolumeControl: function (b) {
      alert("[AF service] sf.service.setVolumeControl(" + b + ")");
    },
    setChannelControl: function (b) {
      alert("[AF service] sf.service.setVolControl(" + b + ")");
    },
    setScreenSaver: function (d, c) {
      alert("[AF service] sf.service.setScreenSaver(" + d + "," + (c ? c : "") + ")");
    },
    showSetting: function (f, g) {
      alert("[AF service] sf.service.showSetting(" + f + ")");
    },
    hideSetting: function () {
      alert("[AF service] sf.service.hideSetting()");
    },
    getSNSAppList: function (e) {
      alert("[AF service] sf.service.getSNSAppList()");
    },
    getAvailAppList: function (e) {
      alert("[AF service] sf.service.getAvailAppList()");
    },
    checkAppInstalled: function (b, c) {
    },
    PIG: {
      bOn: false,
      sDivID: null,
      elPIG: null,
      bMediaSource: false,
      oWindowPlugin: {},
      nPluginStyle: 0,
      MEDIA_SOURCE: 43,
      SEF_PLUGIN: 10,
      LEGACY_PLUGIN: 11,
      show: function (c) {
        alert("[sf.service.PIG] show()");
      },
      hide: function () {
        alert("[sf.service.PIG] hide()");
      }
    }
  }
})(sf);
alert("[AF Service] service.js included");
(function (h) {
  var n = false;
  var l = null;
  var b = 0;
  var e = false;
  var k = null;
  h.service.AVSetting = {
    show: function (p) {
      alert("[AF service.AVSetting] show()");
      /*LDW>
      var o = h.core.getEnvValue("product");
      if (o != h.core.PL_TV_PRODUCT_TYPE_TV && o != h.core.PL_TV_PRODUCT_TYPE_MONITOR) {
        alert("[AF service.AVSetting] Only available in TV or Monitor.");
        return false
      }
      */
      
      //LDW>
      if (window._browser == "designer") {
        var elems = document.querySelectorAll("div[data-role='dtvAVSetting']");
        for (var i = 0; i < elems.length; i++) {
        	initAVSettingForDesigner($(elems[i]));
        }
        return true;
      }


      n = (document.querySelectorAll("#sf-service-avsetting").length > 0) ? true : false;
      
      if (!n) {
        n = true;
        f()
      }
      l = p;
      if (k) {
        k.show();
        k.move(0)
      }
      //LDW> j();
      return true;
    },
    hide: function () {
      alert("[AF service.AVSetting] hide()");
      
      if (!n) {
        return
      }
      if (e) {
        h.service.hideSetting()
      }
      if (k) {
        k.hide()
      }
      g();
      if (l && l instanceof Function) {
        l()
      }
      m();
    }
  };
  var d = false;
  h.service.AVSetting.handleKeydown = function () {
    var o = event.keyCode;
    alert("[AF service.AVSetting] handleKeydown()");
    if (d) {
      alert("[AF service.AVSetting] Blocking...");
      h.key.preventDefault();
      return
    }
    j();
    switch (o) {
    case h.key.UP:
    case h.key.DOWN:
      b = (b + 1) % 2;
      k.move(b);
      break;
    case h.key.ENTER:
    case h.key.RETURN:
    case h.key.EXIT:
      h.key.preventDefault();
      this.hide();
      break
    }
  };
  function initAVSettingForDesigner(elem) {
  	elem.show();
  	if (elem.find("#sf-service-avsetting").length != 0) return;
  	if (elem.parent().css("display") == "none") return;
    elem.html('<div id="sf-service-avsetting" data-role="temp"><div class="dim"></div><div class="sf-service-avsetting-bg alpha"><div class="sf-service-avsetting-bg-top"><div class="sf-service-avsetting-bg-top-l"></div><div class="sf-service-avsetting-bg-top-c"></div><div class="sf-service-avsetting-bg-top-r"></div></div><div class="sf-service-avsetting-bg-mid"><div class="sf-service-avsetting-bg-mid-l"></div><div class="sf-service-avsetting-bg-mid-c"></div><div class="sf-service-avsetting-bg-mid-r"></div></div><div class="sf-service-avsetting-bg-btm"><div class="sf-service-avsetting-bg-btm-l"></div><div class="sf-service-avsetting-bg-btm-c"></div><div class="sf-service-avsetting-bg-btm-r"></div></div></div><div class="sf-service-avsetting-bg"><div class="sf-service-avsetting-bg-top"><div class="sf-service-avsetting-bg-top-l"></div><div class="sf-service-avsetting-bg-top-c"></div><div class="sf-service-avsetting-bg-top-r"></div></div><div class="sf-service-avsetting-bg-mid"><div class="sf-service-avsetting-bg-mid-l"></div><div class="sf-service-avsetting-bg-mid-c"></div><div class="sf-service-avsetting-bg-mid-r"></div></div><div class="sf-service-avsetting-bg-btm"><div class="sf-service-avsetting-bg-btm-l"></div><div class="sf-service-avsetting-bg-btm-c"></div><div class="sf-service-avsetting-bg-btm-r"></div></div></div><div id="sf-service-avsetting-title">' + h.lang.SID_TOOLS + '</div><div id="sf-service-avsetting-items"></div><div id="sf-service-avsetting-keyhelp"></div><a href="javascript:void(0)" id="sf-service-avsetting-anchor"></a></div>');
    $("#"+elem.attr("id") + " #sf-service-avsetting-items").sfList({
      data: [h.lang.SID_PICTURE_SETTING, h.lang.SID_SOUND_SETTING],
      index: 0,
      itemsPerPage: 2
    }).sfList("focus");
    $("#"+elem.attr("id") + " #sf-service-avsetting-keyhelp").sfKeyHelp({
      iconset: "WHITE",
      "return": h.lang.SID_RETURN
    });
    
    if (elem.attr("data-visible") == "hide") elem.hide();
    
    //compSetAttrAVSetting(elem);
  }
  function a() {
    $('<div id="sf-service-avsetting" waper_focus="false" waper_dontsave="true"></div>').html('<div class="dim" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg alpha" waper_focus="false" waper_dontsave="true"><div class="sf-service-avsetting-bg-top" waper_focus="false" waper_dontsave="true"><div class="sf-service-avsetting-bg-top-l" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-top-c" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-top-r" waper_focus="false" waper_dontsave="true"></div></div><div class="sf-service-avsetting-bg-mid" waper_focus="false" waper_dontsave="true"><div class="sf-service-avsetting-bg-mid-l" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-mid-c" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-mid-r" waper_focus="false" waper_dontsave="true"></div></div><div class="sf-service-avsetting-bg-btm" waper_focus="false" waper_dontsave="true"><div class="sf-service-avsetting-bg-btm-l" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-btm-c" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-btm-r" waper_focus="false" waper_dontsave="true"></div></div></div><div class="sf-service-avsetting-bg" waper_focus="false" waper_dontsave="true"><div class="sf-service-avsetting-bg-top" waper_focus="false" waper_dontsave="true"><div class="sf-service-avsetting-bg-top-l" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-top-c" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-top-r" waper_focus="false" waper_dontsave="true"></div></div><div class="sf-service-avsetting-bg-mid" waper_focus="false" waper_dontsave="true"><div class="sf-service-avsetting-bg-mid-l" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-mid-c" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-mid-r" waper_focus="false"></div waper_dontsave="true"></div><div class="sf-service-avsetting-bg-btm" waper_focus="false" waper_dontsave="true"><div class="sf-service-avsetting-bg-btm-l" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-btm-c" waper_focus="false" waper_dontsave="true"></div><div class="sf-service-avsetting-bg-btm-r" waper_focus="false" waper_dontsave="true"></div></div waper_dontsave="true"></div><div id="sf-service-avsetting-title" waper_focus="false" waper_dontsave="true">' + h.lang.SID_TOOLS + '</div><div id="sf-service-avsetting-items" waper_focus="false" waper_dontsave="true"></div><div id="sf-service-avsetting-keyhelp" waper_focus="false" waper_dontsave="true"></div><a href="javascript:void(0)" id="sf-service-avsetting-anchor" waper_focus="false" waper_dontsave="true"></a>').appendTo("body");

    $("#sf-service-avsetting-items").sfList({
      data: [h.lang.SID_PICTURE_SETTING, h.lang.SID_SOUND_SETTING],
      index: 0,
      itemsPerPage: 2
    });
    $("#sf-service-avsetting-keyhelp").sfKeyHelp({
      iconset: "WHITE",
      "return": h.lang.SID_RETURN
    });
    $("#sf-service-avsetting-anchor").keydown(function () {
      h.service.AVSetting.handleKeydown()
    });

    this.show = function () {
      alert("[AF service.AVSetting] view : show()");
      $("#sf-service-avsetting").show();
      $("#sf-service-avsetting-items").sfList("focus");
      this.handlerId = null;
      if (h.scene._isSceneArchUsed()) {
        this.handlerId = h.scene.pushKeyHandler(h.service.AVSetting.handleKeydown, {
          context: h.service.AVSetting
        })
      } else {
        $("#sf-service-avsetting-anchor").focus()
      }
      var o = h.env.getPopupOpacity();
      alert("Popup opacity: " + o);
      if (o > 0 && o <= 1) {
        alert("Apply popup opacity");
        $("#sf-service-avsetting .alpha").css("opacity", o)
      }
    };
    this.hide = function (o) {
      alert("[AF service.AVSetting] view : hide()");
      $("#sf-service-avsetting").hide();
      if (this.handlerId) {
        h.scene.removeKeyHandler(this.handlerId);
        this.handlerId = null
      }
    };
    this.move = function (o) {
      alert("[AF service.AVSetting] view : move(" + o + ")");
      if (window._browser == "designer") return;
      $("#sf-service-avsetting-items").sfList("move", o)
    }
  }
  function m() {
    l = null;
    b = 0;
    k.move(b);
    e = false
  }
  function f() {
    alert("[AF service.AVSetting] initialize()");
    k = new a()
  }
  var c = null;
  function j() {
    g();
    c = setTimeout(function () {
      h.service.AVSetting.hide()
    }, 60000)
  }
  function g() {
    if (c) {
      clearTimeout(c);
      c = null
    }
  }
})(sf);
alert("[AF AVSetting] avsetting.js included");
(function (a) {
  a.service.VideoPlayer = new b();
  function b() {
    this.playAble = false;
    this.init = function (V) {
      alert("[VideoPlayer] init(" + V + ")");
      n = V || {};
      /*LDW>
      if (!r) {
        j()
      }
      if (!u) {
        C();
        n.zIndex = g;
        B(n)
      } else {
        B(n)
      }
      */
      
      if (window._browser == "designer") {
        var elems = document.querySelectorAll("div[data-role='dtvVideoPlayer']");
        for (var i = 0; i < elems.length; i++) {
        	$(elems[i]).css("z-index", 20);
        	initVideoPlayerForDesigner($(elems[i]));
        }
        return true;
      }
      
      initVideoPlayerForDesigner($("body"));

      if (!r) {
        j()
      }
        
      this.bar_hide = function() {
        $("#sf-service-videoplayer-full-infobar").hide();
        $("#sf-service-videoplayer-full-helpbar").hide();
      };
      
      var mine = this;
      this.bar_show = function() {
        $("#sf-service-videoplayer-full-infobar").show();
        $("#sf-service-videoplayer-full-helpbar").show();
        setTimeout(mine.bar_hide, 3000);
      };
      
      $("#sf-service-videoplayer-full").bind("click", function(){
        if (L) {
            mine.bar_show();
        }
      });
      
      $("#sf-service-videoplayer-full td[key='RETURN']").bind("click", function(){
        mine.setFullScreen(false);
      });
      
      this.__setInfobarIcon = function (state) {
      	var st = "stop";
      	if (state == "play") st = "play";
      	else mine.playAble = false;
      	$("#sf-service-videoplayer #sf-service-videoplayer-mini-infobar-state")[0].className = "sf-service-videoplayer-mini-infobar-state-"+st;
      	$("#sf-service-videoplayer #sf-service-videoplayer-full-infobar-state")[0].className = "sf-service-videoplayer-full-infobar-state-"+st;
      };
      
      function initVideoPlayerForDesigner(elem) {
      	if (elem.find("#sf-service-videoplayer").length != 0) return;
  		if (elem.parent().css("display") == "none") return;

      	var video_elem = '<div id="sf-service-videoplayer"><div id="_pluginObjectPlayerContainer" data-role="temp" waper_focus="false"></div>'
          + '<div id="sf-service-videoplayer-mini" waper_focus="false" style="display:none;width:100%;height:100%;"><div id="_pluginObjectPlayerContainer_mini" style="width:100%;background:black;" waper_focus="false"></div>'
          + '<div id="sf-service-videoplayer-mini-infobar" waper_focus="false"><div id="sf-service-videoplayer-mini-infobar-state" class="sf-service-videoplayer-mini-infobar-state-stop" waper_focus="false"></div>'
          + '<div id="sf-service-videoplayer-mini-infobar-speed" waper_focus="false"></div>'
          /*+ '<div id="sf-service-videoplayer-mini-infobar-time" waper_focus="false"><div id="sf-service-videoplayer-mini-infobar-time-0" waper_focus="false">00:00:00</div>'
          + '<div id="sf-service-videoplayer-mini-infobar-time-1" waper_focus="false">/</div><div id="sf-service-videoplayer-mini-infobar-time-2" waper_focus="false">00:00:00</div></div>'
          + '<div id="sf-service-videoplayer-mini-infobar-progress-bg" waper_focus="false">'
          + '<div id="sf-service-videoplayer-mini-infobar-progress-bg-left" waper_focus="false"></div><div id="sf-service-videoplayer-mini-infobar-progress-bg-right" waper_focus="false"></div><div id="sf-service-videoplayer-mini-infobar-progress-bg-middle" waper_focus="false"></div></div>'
          + '<div id="sf-service-videoplayer-mini-infobar-progress-play" style="width:0px;" waper_focus="false">'
          + '<div id="sf-service-videoplayer-mini-infobar-progress-play-left" waper_focus="false"></div><div id="sf-service-videoplayer-mini-infobar-progress-play-right" waper_focus="false"></div><div id="sf-service-videoplayer-mini-infobar-progress-play-middle" waper_focus="false"></div></div>*/
          + '</div></div>'
          + '<div id="sf-service-videoplayer-full" waper_focus="false" style="display:none;position:fixed;">'
          + '<div id="_pluginObjectPlayerContainer" data-role="temp" waper_focus="false"></div>'
          + '<div id="sf-service-videoplayer-full-infobar" waper_focus="false">'
          + '<div id="sf-service-videoplayer-full-infobar-bg0" waper_focus="false"></div><div id="sf-service-videoplayer-full-infobar-bg1" waper_focus="false"></div><div id="sf-service-videoplayer-full-infobar-state" class="sf-service-videoplayer-full-infobar-state-stop" waper_focus="false"></div>'
          + '<div id="sf-service-videoplayer-full-infobar-speed" waper_focus="false"></div>'
          /*+ '<div id="sf-service-videoplayer-full-infobar-time" waper_focus="false"><div id="sf-service-videoplayer-full-infobar-time-0" waper_focus="false">00:00:00</div>'
          + '<div id="sf-service-videoplayer-full-infobar-time-1" waper_focus="false">/</div><div id="sf-service-videoplayer-full-infobar-time-2" waper_focus="false">00:00:00</div></div>'*/
          + '<div id="sf-service-videoplayer-full-infobar-progress-bg" waper_focus="false">'
          + '<div id="sf-service-videoplayer-full-infobar-progress-bg-left" waper_focus="false"></div><div id="sf-service-videoplayer-full-infobar-progress-bg-right" waper_focus="false"></div><div id="sf-service-videoplayer-full-infobar-progress-bg-middle" waper_focus="false"></div></div>'
          + '<div id="sf-service-videoplayer-full-infobar-progress-play" style="width:0px;" waper_focus="false">'
          + '<div id="sf-service-videoplayer-full-infobar-progress-play-left" waper_focus="false"></div><div id="sf-service-videoplayer-full-infobar-progress-play-right" waper_focus="false"></div><div id="sf-service-videoplayer-full-infobar-progress-play-middle" waper_focus="false"></div></div>'
          + '<div id="sf-service-videoplayer-full-infobar-title" waper_focus="false"></div>'
          + '<div id="sf-service-videoplayer-full-infobar-volume" waper_focus="false"><div id="sf-service-videoplayer-full-infobar-volume-icon" waper_focus="false"></div><div id="sf-service-videoplayer-full-infobar-volume-text" waper_focus="false"></div></div></div>'
          + '<div id="sf-service-videoplayer-full-helpbar" class="sf-ui-keyhelp sf-ui-keyhelp-black" waper_focus="false">'
          + '<table cellpadding="0px" cellspacing="0px" border="0px" valign="middle" style="width:100%;height:100%;" waper_focus="false">'
          + '<tbody waper_focus="false"><tr waper_focus="false"><td class="sf-ui-keyhelp-margin-left" waper_focus="false"></td><td style="text-align:right;" waper_focus="false"><table cellpadding="0px" cellspacing="0px" border="0px" style="table-layout:fixed;" align="right" waper_focus="false">'
          + '<tbody waper_focus="false"><tr waper_focus="false"><td class="sf-ui-keyhelp-icon sf-ui-keyhelp-icon-return" key="RETURN" waper_focus="false"></td><td class="sf-ui-keyhelp-margin-icon" key="RETURN" waper_focus="false"></td>'
          + '<td class="sf-ui-keyhelp-text" key="RETURN" waper_focus="false">Return</td></tr></tbody></table></td><td class="sf-ui-keyhelp-margin-right" waper_focus="false"></td></tr></tbody></table></div></div></div></div>';
        
        elem.append(video_elem);
        
        if (window._browser == "designer") {
	        var value = elem.attr('data-fullscreen');
		    if(isEmpty(value) || value != "true") value = false;
	        else value = true;
	        __setVideoFullScreen(elem, value);
	        if (elem.attr("data-visible") == "hide") elem.hide();
	        else elem.show();
        }
      }
    };
    //LDW>
    this.show = function () {
      if (window._browser == "designer") return;
      alert("[VideoPlayer] show()");
      /*LDW>
      if (!r) {
        j()
      }
      if (L) {
        c.hide();
        E.show()
      } else {
        if (N) {
          E.hide();
          c.show()
        }
      }
      H.show()
      */
      
      $("#sf-service-videoplayer").show();
      this.setFullScreen(L);
    };
    this.hide = function () {
      if (window._browser == "designer") return;
      alert("[VideoPlayer] hide()");
      /*LDW>
      if (!r) {
        j()
      }
      c.hide();
      E.hide();
      H.hide()
      */
      
      /*
      document.querySelector("#_pluginObjectPlayerContainer").style.display = "none";
      document.querySelector("#sf-service-videoplayer-full").style.display = "none";
      document.querySelector("#sf-service-videoplayer-mini").style.display = "none";
      */
      $("#sf-service-videoplayer").hide();
    };
    this.play = function (V) {
      if (window._browser == "designer") return;
      if (this.playAble) return;
      this.playAble = true;
      
      alert("[VideoPlayer] play(" + V + ")");
      /*LDW>
      if (!r) {
        j()
      }
      if (!u) {
        C();
        B({
          zIndex: g
        })
      }
      if (A != a.service.VideoPlayer.STATE_STOPPED) {
        alert('[VideoPlayer] !ERROR! play() should be called on "STATE_STOPPED". Current State : ' + J[A]);
        return false
      }
      M = $.extend({}, V);
      if (M.fullScreen) {
        L = true;
        H.setDisplayRect(new SRect(0, 0, curWidget.width, curWidget.height));
        c.hide();
        E.show();
        E.showBars();
        this.focus()
      } else {
        L = false;
        if (!N) {
          alert("[VideoPlayer] !ERROR! Position is not set. Do setPosition().");
          return
        }
        H.setDisplayRect(N);
        E.hide();
        E.hideBars();
        c.show()
      }
      t();
      if (M.title) {
        E.refresh("title", M.title)
      }
      c.showLoading();
      E.showLoading();
      this.show();
      if (M.is3D && iCCheck3DEffect.is3DEffectSupport()) {
        if (L) {
          a.key.unregisterKey(a.key.THREE_D);
          deviceapis._plugin("Screen", "Set3DEffectFunction", deviceapis._pluginDef.PLR_TRUE);
          a.service.setVolumeControl(false)
        } else {
          a.key.registerKey(a.key.THREE_D);
          deviceapis._plugin("Screen", "Set3DEffectFunction", deviceapis._pluginDef.PLR_FALSE);
          a.service.setVolumeControl(true)
        }
      } else {
        a.service.setVolumeControl(true)
      }
      if (M.subtitle) {
        if (H.getSubtitleAvailable()) {
          this.Subtitle._downloadFile(M.subtitle.url, function (X) {
            if (X) {
              M.subtitle = {
                path: X,
                streamID: 0,
                sync: 0,
                callback: R
              };
              m.Subtitle.show()
            } else {
              alert('[VideoPlayer] Download failed. "subtitle" option is deleted.');
              delete M.subtitle
            }
            W()
          })
        } else {
          alert('[VideoPlayer] Not Support Subtitle function. "subtitle" option is deleted.');
          delete M.subtitle;
          W()
        }
      } else {
        W()
      }
      function W() {
        H.open(M.url, M);
        H.play(e, function (X) {
          alert("[VideoPlayer] " + X);
          H.stop()
        }, M.startTime || 0)
      }
      */
      
      if (V.fullScreen == true || V.fullScreen == false) {
        this.setFullScreen(V.fullScreen);
      }
      
      this.__setInfobarIcon("play");
      var parent_elem = $("#sf-service-videoplayer #_pluginObjectPlayerContainer")[0];
      if (parent_elem.querySelector("video")) {
        parent_elem.innerHTML = "";
      }
      var video_elem = document.createElement("video");
      video_elem.setAttribute("autoplay", "autoplay");
      video_elem.src = V.url;
      var mine = this;
      video_elem.addEventListener("ended", function(event) {
        mine.__setInfobarIcon("stop");
        
        if (n.onend && typeof(n.onend) == "function") {
            n.onend();
        }
      }, false);
      parent_elem.appendChild(video_elem);
    };
    this.stop = function () {
      if (window._browser == "designer") return;
      alert("[VideoPlayer] stop()");
      /*LDW>
      if (!r) {
        j()
      }
      if (!u) {
        alert("[VideoPlayer] Check the usage.");
        return
      }
      H.stop();
      O(a.service.VideoPlayer.STATE_STOPPED);
      t();
      a.key.unregisterKey(a.key.THREE_D);
      a.service.setVolumeControl(false);
      if (M) {
        c.hideTime();
        c.refresh("curtime", new PlayTime(0));
        c.refresh("totaltime", 0);
        c.hideLoading();
        E.refresh("curtime", new PlayTime(0));
        E.refresh("totaltime", 0);
        E.refresh("title", "");
        E.hideLoading();
        if (M.subtitle) {
          c.Subtitle.clear();
          c.Subtitle.hide();
          E.Subtitle.clear();
          E.Subtitle.hide()
        }
        if (L) {
          E.hide();
          E.hideBars();
          a.service.AVSetting.hide();
          if (I) {
            a.scene.removeKeyHandler(I);
            I = null
          } else {
            a.scene.returnFocus()
          }
          if (M.fullScreen === false) {
            H.setDisplayRect(N);
            c.show()
          } else {
            H.hide()
          }
        }
        L = false;
        M = null
      }
      */
      this.__setInfobarIcon("stop");
      $("#sf-service-videoplayer #_pluginObjectPlayerContainer")[0].innerHTML = "";
    };
    this.pause = function () {
      if (window._browser == "designer") return;
      alert("[VideoPlayer] pause()");
      /*LDW>
      if (!r) {
        j()
      }
      if (!u) {
        alert("[VideoPlayer] Check the usage.");
        return false
      }
      if (m.Skip.isInProgress()) {
        alert("[VideoPlayer] Skipping now.. pause skipping..");
        z.pause();
        return false
      }
      if (A != a.service.VideoPlayer.STATE_PLAYING) {
        alert('[VideoPlayer] !ERROR! pause() should be called on "STATE_PLAYING". Current State : ' + J[A]);
        return false
      }
      var V = H.pause();
      if (V) {
        O(a.service.VideoPlayer.STATE_PAUSED);
        return true
      } else {
        alert("[VideoPlayer] Fail to Pause.");
        return false
      }
      */
    };
    this.resume = function () {
      if (window._browser == "designer") return;
      alert("[VideoPlayer] resume()");
      /*LDW>
      if (!r) {
        j()
      }
      if (!u) {
        alert("[VideoPlayer] Check the usage.");
        return
      }
      if (m.Skip.isInProgress()) {
        alert("[VideoPlayer] Skipping now.. resume skipping..");
        z.resume()
      }
      if (A != a.service.VideoPlayer.STATE_PAUSED) {
        alert('[VideoPlayer] !ERROR! resume() should be called on "STATE_PAUSED". Current State : ' + J[A]);
        return false
      }
      var V = H.resume();
      if (V) {
        return true
      } else {
        alert("[VideoPlayer] Fail to Resume.");
        return false
      }*/
    };
    this.setPosition = function (V) {
      if (window._browser == "designer") return;
      alert("[VideoPlayer] setPosition(" + V + ")");
      /*LDW>
      if (!r) {
        j()
      }
      N = new SRect(V.left, V.top, V.width, V.height - c.getInfobarHeight());
      if (!u) {
        C();
        B({
          zIndex: g,
          displayRect: N
        })
      } else {
        H.setDisplayRect(N)
      }
      c.setPosition(V);
      c.show()
      */
      
      var videoplayer_elem = $("#sf-service-videoplayer");
      videoplayer_elem.css("top", V.top + "px");
      videoplayer_elem.css("left", V.left + "px");
      videoplayer_elem.css("width", V.width + "px");
      videoplayer_elem.css("height", V.height + "px");
    };
    this.setFullScreen = function (V) {
      if (window._browser == "designer") return;
      alert("[VideoPlayer] setFullScreen(" + V + ")");
      /*
      if (!r) {
        j()
      }
      if (!u) {
        C();
        B({
          zIndex: g
        })
      }
      if (!V && !N) {
        alert("[VideoPlayer] No mini mode display area.");
        return
      }
      L = V;
      if (L) {
        c.hide();
        E.show();
        E.showBars();
        this.focus();
        H.setDisplayRect(new SRect(0, 0, curWidget.width, curWidget.height))
      } else {
        E.hide();
        E.hideBars();
        c.show();
        if (I) {
          a.scene.removeKeyHandler(I);
          I = null
        } else {
          a.scene.returnFocus()
        }
        H.setDisplayRect(N)
      }
      if (M && M.is3D && iCCheck3DEffect.is3DEffectSupport()) {
        if (L) {
          a.key.unregisterKey(a.key.THREE_D);
          deviceapis._plugin("Screen", "Set3DEffectFunction", deviceapis._pluginDef.PLR_TRUE);
          a.service.setVolumeControl(false)
        } else {
          a.key.registerKey(a.key.THREE_D);
          deviceapis._plugin("Screen", "Set3DEffectFunction", deviceapis._pluginDef.PLR_FALSE);
          a.service.setVolumeControl(true)
        }
      } else {
        a.service.setVolumeControl(true)
      }
      */
      var video_elem = $("#sf-service-videoplayer #_pluginObjectPlayerContainer");
      var mini = $("#sf-service-videoplayer #sf-service-videoplayer-mini");
      var full = $("#sf-service-videoplayer #sf-service-videoplayer-full");
      if (V) {
        mini.hide();
        full.show();
        video_elem[0].className = "full";
        video_elem.show();

        this.bar_show();

        L = V;
        this.focus();
      }
      else {
        full.hide();
        mini.show();
        video_elem[0].className = "mini";
        
        if (I) {
          a.scene.removeKeyHandler(I);
          I = null;
        } else {
          a.scene.returnFocus();
        }

        L = V;
      }
    };
    this.focus = function () {
      if (window._browser == "designer") return;
      alert("[VideoPlayer] focus()");
      if (!r) {
        j()
      }
      if (!L) {
        alert("[VideoPlayer] This API works only under FullScreen.");
        return
      }
      if (a.scene._isSceneArchUsed()) {
        if (I) {
          a.scene.removeKeyHandler(I)
        }
        I = a.scene.pushKeyHandler(function () {
          q()
        }, {
          context: this
        })
      } else {
        $("#" + D).focus()
      }
    };
    this.setKeyHandler = function (V, W) {
      if (window._browser == "designer") return;
      alert("[VideoPlayer] setKeyHandler(" + V + "," + (W ? W : "") + ")");
      if (!r) {
        j()
      }
      if (typeof V == "object") {
        for (var X in V) {
          k[X] = V[X]
        }
      } else {
        k[V] = W
      }
    };
    this.setKeyHelp = function (V, W) {
      if (window._browser == "designer") return;
      alert("[VideoPlayer] setKeyHelp(" + V + "," + (W ? W : "") + ")");
      /*LDW>
      if (!r) {
        j()
      }
      if (typeof V == "object") {
        for (var X in V) {
          K[X] = V[X]
        }
      } else {
        K[V] = W
      }
      E.refresh("helpbar", w(K))
      */
    };
    this.getZIndex = function () {
      if (window._browser == "designer") return;
      /*LDW>
      if (!r) {
        j()
      }
      alert("[VideoPlayer] getZIndex() returns " + H.zIndex);
      return H.zIndex
      */
      return $("#sf-service-videoplayer").css("z-index");
    };
    this.setZIndex = function (V) {
      if (window._browser == "designer") return;
      alert("[VideoPlayer] setZIndex(" + V + ")");
      /*LDW>
      if (!r) {
        j()
      }
      H.setZIndex(V);
      c.setZIndex(V + 1);
      E.setZIndex(V + 1)
      */
      $("#sf-service-videoplayer").css("z-index", V);
    };
    this.Skip = {};
    this.Skip.start = function (V) {
      alert("[VideoPlayer][Skip] start(" + V + ")");
      /*LDW>
      if (!r) {
        j()
      }
      if (A == a.service.VideoPlayer.STATE_PLAYING) {
        if (!a.service.VideoPlayer.pause()) {
          alert("[VideoPlayer][Skip] Fail to pause. Skip.start() canceled.");
          return false
        }
      }
      if (A != a.service.VideoPlayer.STATE_PAUSED) {
        alert("[VideoPlayer][Skip] VideoPlayer state is not STATE_PAUSED. Skip.start() canceled.");
        return;
        false
      }
      z.start(V)
      */
    };
    this.Skip.stop = function () {
      alert("[VideoPlayer][Skip] stop()");
      /*LDW>
      if (!r) {
        j()
      }
      if (z.getState() == "NONE") {
        alert("[VideoPlayer][Skip] Skip is not in progress.. Skip.stop() canceled.");
        return
      }
      z.stop()
      */
    };
    this.Skip.cancel = function () {
      alert("[VideoPlayer][Skip] cancel()");
      /*LDW>
      if (!r) {
        j()
      }
      if (z.getState() == "NONE") {
        alert("[VideoPlayer][Skip] Skip is not in progress.. Skip.cancel() canceled.");
        return
      }
      z.cancel()
      */
    };
    this.Skip.isInProgress = function () {
      /*LDW>
      if (!r) {
        j()
      }
      var V = z.getState() != "NONE";
      alert("[VideoPlayer][Skip] isInProgress() returns " + V);
      return V
      */
    };
    var g = 30;
    var D = "sf-service-videoplayer-anchor";
    this.STATE_PLAYING = 1;
    this.STATE_STOPPED = 2;
    this.STATE_PAUSED = 3;
    this.STATE_BUFFERING = 4;
    this.STATE_SCANNING = 5;
    this.STATE_ERROR = 6;
    var m = this;
    var r = false;
    var u = false;
    var c = null;
    var E = null;
    var H = null;
    var z = new o();
    this.Subtitle = null;
    var n = {};
    var M = null;
    var N = null;
    var L = false;
    var A = m.STATE_STOPPED;
    var k = {};
    var K = {};
    var F = null;
    var Q = 0;
    var J = {};
    J[m.STATE_PLAYING] = "STATE_PLAYING";
    J[m.STATE_STOPPED] = "STATE_STOPPED";
    J[m.STATE_PAUSED] = "STATE_PAUSED";
    J[m.STATE_BUFFERING] = "STATE_BUFFERING";
    J[m.STATE_SCANNING] = "STATE_SCANNING";
    var I = null;
    function j() {
      $('<a href="javascript:void(0)" id="' + D + '"></a>').appendTo(a.service.VideoPlayer._elem);
      setTimeout(function () {
        $("#" + D).keydown(q)
      }, 0);
      /*LDW>
      c = new p();
      c.init({
        onprogressbarclicked: l
      });
      c.hideTime();
      c.setZIndex(g + 1);
      E = new P();
      E.init({
        onprogressbarclicked: l
      });
      E.setZIndex(g + 1);
      m.Subtitle = new U();
      */
      r = true;
    }
    function l(V) {
      alert("[VideoPlayer] onProgressBarClicked(" + V + ")");
      if (A != m.STATE_PLAYING && A != m.STATE_PAUSED) {
        alert("[VideoPlayer] State is not STATE_PLAYING or STATE_PAUSED. Skip click event.");
        return false
      }
      if (E.isShow()) {
        E.showBars()
      }
      var W = parseInt(H.duration * V);
      var X = parseInt((W - Q) / 1000, 10);
      if (X > 0) {
        H.jumpForward(X)
      } else {
        if (X < 0) {
          H.jumpBackward(-X)
        }
      }
      m.resume()
    }
    function C() {
      deviceapis.avplay.getAVPlay(function (V) {
        H = V;
        m.AVPlay = H
      });
      u = true
    }
    function B(V) {
      V.bufferingCallback = {
        onbufferingstart: d,
        onbufferingcomplete: h,
      };
      V.playCallback = {
        oncurrentplaytime: y,
        onstreamcompleted: G,
        onerror: x
      };
      H.init(V)
    }
    function O(W) {
      var V = A;
      A = W;
      c.refresh("state", A);
      E.refresh("state", A);
      if (V != W) {
        if (typeof n.onstatechange == "function") {
          n.onstatechange(A)
        }
      }
    }
    function w(Y) {
      var X = $.extend({}, Y);
      var V = {};
      V.TOOLS = a.lang.SID_TOOLS;
      V.RETURN = a.lang.SID_RETURN;
      for (var W in V) {
        if (X[W] === undefined) {
          X[W] = V[W]
        }
      }
      for (var W in X) {
        if (X[W] === null) {
          delete X[W]
        }
      }
      return X
    }
    function f(V) {
      alert("[VideoPlayer] setViewCleaner()");
      F = V
    }
    function t() {
      alert("[VideoPlayer] runViewCleaner()");
      if (typeof F == "function") {
        F();
        F = null
      }
    }
    function s(V) {
      alert("[VideoPlayer] turnVolume(" + V + ")");
      var W = deviceapis._plugin("Audio", "GetOutputDevice");
      if (W == deviceapis._pluginDef.PL_AUDIO_OUTPUT_DEVICE_EXTERNAL) {
        alert("[VideoPlayer] Receiver is external..");
        if (I) {
          a.scene.removeKeyHandler(I);
          I = null
        } else {
          a.scene.returnFocus()
        }
        E.showPopup({
          text: a.lang.SID_NOTAVAILABLE_POPUP,
          buttons: "OK",
          callback: function () {
            m.focus()
          }
        });
        return
      }
      if (V.toUpperCase() == "UP") {
        deviceapis._plugin("Audio", "SetVolumeWithKey", deviceapis._pluginDef.PL_AUDIO_VOLUME_KEY_UP)
      } else {
        deviceapis._plugin("Audio", "SetVolumeWithKey", deviceapis._pluginDef.PL_AUDIO_VOLUME_KEY_DOWN)
      }
      if (W == deviceapis._pluginDef.PL_AUDIO_OUTPUT_DEVICE_RECEIVER) {
        alert("[VideoPlayer] Receiver is connected. do nothing..");
        return
      }
      if (deviceapis.audiocontrol.getMute()) {
        E.showVolume(0)
      } else {
        E.showVolume(deviceapis.audiocontrol.getVolume())
      }
    }
    function S() {
      alert("[VideoPlayer] toggleMute()");
      var W = deviceapis._plugin("Audio", "GetOutputDevice");
      if (W == deviceapis._pluginDef.PL_AUDIO_OUTPUT_DEVICE_EXTERNAL) {
        alert("[VideoPlayer] Receiver is external..");
        if (I) {
          a.scene.removeKeyHandler(I);
          I = null
        } else {
          a.scene.returnFocus()
        }
        E.showPopup({
          text: a.lang.SID_NOTAVAILABLE_POPUP,
          buttons: "OK",
          callback: function () {
            m.focus()
          }
        });
        return
      }
      var V = deviceapis.audiocontrol.getMute();
      if (V) {
        deviceapis.audiocontrol.setMute(false);
        V = false
      } else {
        deviceapis.audiocontrol.setMute(true);
        V = true
      }
      if (W == deviceapis._pluginDef.PL_AUDIO_OUTPUT_DEVICE_RECEIVER) {
        alert("[VideoPlayer] Receiver is connected. do nothing..");
        return
      }
      if (V) {
        E.showVolume(0)
      } else {
        E.showVolume(deviceapis.audiocontrol.getVolume())
      }
    }
    function o() {
      var ad = this;
      var W = 300;
      var ac = null;
      var V = "NONE";
      var ab = 0;
      var Y = [10000, 30000, 60000, ];
      var ae = 0;
      var X = 0;
      function aa() {
        ac = setInterval(function () {
          X = Number(X) + Number(ae);
          if (X < 0) {
            X = 0;
            clearInterval(ac);
            ac = null
          } else {
            if (X > H.duration) {
              X = H.duration;
              clearInterval(ac);
              ac = null
            }
          }
          c.refresh("skiptime", X);
          E.refresh("skiptime", X)
        }, W)
      }
      function Z() {
        clearInterval(ac);
        ac = null
      }
      this.start = function (af) {
        alert("[Skip] start(" + af + ")");
        Z();
        if (V == "NONE") {
          X = Q
        }
        if (af > 0) {
          V = "FF"
        } else {
          V = "REW"
        }
        ae = af * 1000;
        aa()
      };
      this.stop = function () {
        alert("[Skip] stop()");
        Z();
        V = "NONE";
        var af = parseInt((X - Q) / 1000, 10);
        if (af > 0) {
          H.jumpForward(af)
        } else {
          if (af < 0) {
            H.jumpBackward(-af)
          }
        }
        a.service.VideoPlayer.resume();
        setTimeout(function () {
          c.refresh("skiptime", "hide");
          E.refresh("skiptime", "hide")
        }, 100);
        return X
      };
      this.pause = function () {
        alert("[Skip] pause()");
        Z();
        V = "PAUSE"
      };
      this.resume = function () {
        alert("[Skip] resume()");
        if (ae > 0) {
          V = "FF"
        } else {
          V = "REW"
        }
        aa()
      };
      this.cancel = function () {
        alert("[Skip] cancel()");
        Z();
        V = "NONE";
        X = 0;
        ab = 0;
        c.refresh("skiptime", "hide");
        E.refresh("skiptime", "hide");
        a.service.VideoPlayer.resume()
      };
      this.getState = function () {
        alert("[Skip] getState() returns " + V);
        return V
      };
      this.doREW = function () {
        alert("[Skip] doREW()");
        if (V == "PAUSE" || V == "NONE" || V == "FF") {
          ab = 0
        } else {
          ab = (ab < Y.length - 1) ? ab + 1 : 0
        }
        ae = -Y[ab];
        ad.start(parseInt(ae / 1000))
      };
      this.doFF = function () {
        alert("[Skip] doFF()");
        if (V == "PAUSE" || V == "NONE" || V == "REW") {
          ab = 0
        } else {
          ab = (ab < Y.length - 1) ? ab + 1 : 0
        }
        ae = Y[ab];
        ad.start(parseInt(ae / 1000))
      }
    }
    function U() {
      this.VPOS_TOP = 1;
      this.VPOS_BOTTOM = 2;
      var W = "$TEMP/videoplayer.smi";
      var V = null;
      this.show = function () {
        alert("[Subtitle] show()");
        c.Subtitle.show();
        E.Subtitle.show()
      };
      this.hide = function () {
        alert("[Subtitle] hide()");
        c.Subtitle.hide();
        E.Subtitle.hide()
      };
      this.setSyncTime = function (X) {
        alert("[Subtitle] setSyncTime(" + X + ")");
        H.setSubtitleSync(X)
      };
      this.setVerticalPosition = function (X, Y) {
        alert("[Subtitle] setVerticalPosition(" + X + "," + Y + ")");
        c.Subtitle.setVerticalPosition(X, Y);
        E.Subtitle.setVerticalPosition(X, Y)
      };
      this.setFontSize = function (X) {
        alert("[Subtitle] setFontSize(" + X + ")");
        c.Subtitle.setFontSize(X);
        E.Subtitle.setFontSize(X)
      };
      this.setFontColor = function (X) {
        alert("[Subtitle] setFontColor(" + X + ")");
        c.Subtitle.setFontColor(X);
        E.Subtitle.setFontColor(X)
      };
      this._downloadFile = function (X, Z) {
        alert("[Subtitle] _downloadFile(" + X + "," + Z + ")");
        V = Z;
        var Y = deviceapis._plugin("Download");
        if (deviceapis._plugin.getSEFAvailable()) {
          Y.OnEvent = window.sf.service.VideoPlayer.Subtitle._downloadCallback
        } else {
          Y.OnEvent = "sf.service.VideoPlayer.Subtitle._downloadCallback"
        }
        deviceapis._plugin(Y, "StartDownFile", X, W)
      };
      this._downloadCallback = function (X, aa, Y) {
        alert("[Subtitle] _downloadCallback(" + X + "," + aa + "," + Y + ")");
        var Z = aa.split("?");
        switch (Z[0]) {
        case "1000":
          if (typeof V == "function") {
            if (Z[1] == 1) {
              alert("[Subtitle] Download Success!");
              if (typeof V == "function") {
                V(W)
              }
            } else {
              alert("[Subtitle] Download Failed!");
              if (typeof V == "function") {
                V(false)
              }
            }
          }
          break;
        case "1001":
          break;
        case "1002":
          break;
        default:
          break
        }
      }
    }
    function d() {
      O(a.service.VideoPlayer.STATE_BUFFERING);
      c.showLoading();
      E.showLoading()
    }
    function h() {
      c.hideLoading();
      E.hideLoading()
    }
    function e() {
      Q = 0;
      c.refresh("curtime", new PlayTime(0));
      c.refresh("totaltime", H.duration);
      c.showTime();
      E.refresh("curtime", new PlayTime(0));
      E.refresh("totaltime", H.duration)
    }
    function y(V) {
      Q = V.millisecond;
      c.refresh("curtime", V);
      E.refresh("curtime", V);
      if (!false) {
        O(a.service.VideoPlayer.STATE_PLAYING)
      } else {
        O(a.service.VideoPlayer.STATE_SCANNING)
      }
    }
    function G() {
      m.stop();
      c.refresh("state", a.service.VideoPlayer.STATE_STOPPED);
      E.refresh("state", a.service.VideoPlayer.STATE_STOPPED);
      if (typeof n.onend == "function") {
        n.onend()
      }
    }
    function R(W, V) {
      c.Subtitle.setString(V);
      E.Subtitle.setString(V)
    }
    function x(V) {
      alert("[VideoPlayer] onError(" + V.code + ")");
      t();
      c.hideLoading();
      E.hideLoading();
      O(a.service.VideoPlayer.STATE_ERROR);
      var W = "";
      switch (Number(V.code)) {
      case V.AVPLAY_UNSUPPORTED_CONTAINER_ERR:
        W = a.lang.SID_PLAYER_UNSPPORT_ABBR_10;
        c.showNotSupport();
        E.showNotSupport();
        f(function () {
          c.hideNotSupport();
          E.hideNotSupport()
        });
        break;
      case V.AVPLAY_UNSUPPORTED_AUDIO_FORMAT_ERR:
        W = a.lang.SID_PLAYER_NOTSUPPORT_AUDIO;
        c.showNotSupport();
        E.showNotSupport();
        f(function () {
          c.hideNotSupport();
          E.hideNotSupport()
        });
        break;
      case V.AVPLAY_UNSUPPORTED_VIDEO_FORMAT_ERR:
        W = a.lang.SID_PLAYER_NOTSUPPORT_VIDEO;
        c.showNotSupport();
        E.showNotSupport();
        f(function () {
          c.hideNotSupport();
          E.hideNotSupport()
        });
        break;
      case V.AVPLAY_UNSUPPORTED_VIDEO_RESOLUTION_ERR:
        W = a.lang.SID_PLAYER_RENDERERROR;
        c.showNotSupport();
        E.showNotSupport();
        f(function () {
          c.hideNotSupport();
          E.hideNotSupport()
        });
        break;
      case V.AVPLAY_UNSUPPORTED_VIDEO_FRAMERATE_ERR:
      case V.AVPLAY_CURRUPTED_STREAM_ERR:
      case V.UNKNOWN_ERR:
        W = a.lang.SID_PLAYER_RENDERERROR;
        c.showNotSupport();
        E.showNotSupport();
        f(function () {
          c.hideNotSupport();
          E.hideNotSupport()
        });
        break;
      case V.NOT_FOUND_ERR:
      case V.NETWORK_ERR:
      case V.NETWORK_SLOW_ERR:
      case V.SECURITY_ERR:
        W = a.lang.SID_CLOSE_BY_SERVER_NETWORK_ERROR_MSG;
        c.showNetworkError();
        E.showNetworkError();
        f(function () {
          c.hideNetworkError();
          E.hideNetworkError()
        });
        break;
      default:
        W = "Unknown problem!";
        c.showNotSupport();
        E.showNotSupport();
        f(function () {
          c.hideNotSupport();
          E.hideNotSupport()
        });
        break
      }
      if (E.isShow()) {
        if (I) {
          a.scene.removeKeyHandler(I);
          I = null
        } else {
          a.scene.returnFocus()
        }
        E.showPopup({
          text: W,
          buttons: "OK",
          callback: function () {
            m.focus()
          }
        })
      }
      if (typeof n.onerror == "function") {
        n.onerror(V)
      }
    }
    function q() {
      var W = event.keyCode;
      alert("[VideoPlayer] handleKeydown(" + W + ")");
      switch (W) {
      case a.key.ENTER:
        if (V(W)) {
          break
        }
        /*LDW>
        if (m.Skip.isInProgress()) {
          z.stop();
          E.setBarHideTimer()
        } else {
          E.showBars();
          switch (A) {
          case a.service.VideoPlayer.STATE_PLAYING:
            m.pause();
            break;
          case a.service.VideoPlayer.STATE_STOPPED:
            break;
          case a.service.VideoPlayer.STATE_PAUSED:
            m.resume();
            break
          }
        }
        */
        break;
      case a.key.RETURN:
        a.key.preventDefault();
        /*LDW>
        if (m.Skip.isInProgress()) {
          z.cancel()
        } else {
        */
          V(W)
        //}
        break;
      case a.key.EXIT:
        V(W);
        /*LDW>
        a.service.VideoPlayer.stop();
        */
        break;
      case a.key.PLAY:
        if (V(W)) {
          break
        }
        /*LDW>
        if (m.Skip.isInProgress()) {
          z.stop();
          E.setBarHideTimer()
        } else {
          E.showBars();
          switch (A) {
          case a.service.VideoPlayer.STATE_PLAYING:
            break;
          case a.service.VideoPlayer.STATE_STOPPED:
            break;
          case a.service.VideoPlayer.STATE_PAUSED:
            m.resume();
            break
          }
        }
        */
        break;
      case a.key.STOP:
        if (V(W)) {
          break
        }
        /*LDW> m.stop(); */
        break;
      case a.key.PAUSE:
        if (V(W)) {
          break
        }
        /*LDW>
        if (m.Skip.isInProgress()) {
          m.pause()
        } else {
          E.showBars();
          switch (A) {
          case a.service.VideoPlayer.STATE_PLAYING:
            m.pause();
            break;
          case a.service.VideoPlayer.STATE_STOPPED:
            break;
          case a.service.VideoPlayer.STATE_PAUSED:
            break
          }
        }
        */
        break;
      case a.key.REW:
        if (V(W)) {
          break
        }
        /*LDW>
        if (A != a.service.VideoPlayer.STATE_STOPPED) {
          if (A == a.service.VideoPlayer.STATE_PLAYING) {
            if (!a.service.VideoPlayer.pause()) {
              alert("[VideoPlayer] Fail to pause. REW key skipped.");
              return false
            }
          }
          E.showBars();
          E.clearBarHideTimer();
          z.doREW()
        }
        */
        break;
      case a.key.FF:
        if (V(W)) {
          break
        }
        /*LDW>
        if (A != a.service.VideoPlayer.STATE_STOPPED) {
          if (A == a.service.VideoPlayer.STATE_PLAYING) {
            if (!a.service.VideoPlayer.pause()) {
              alert("[VideoPlayer] Fail to pause. FF key skipped.");
              return false
            }
          }
          E.showBars();
          E.clearBarHideTimer();
          z.doFF()
        }
        */
        break;
      case a.key.INFO:
        if (V(W)) {
          break
        }
        /*LDW>
        if (z.getState() == "NONE") {
          if (E.isShowBars()) {
            E.hideBars()
          } else {
            E.showBars()
          }
        }
        */
        break;
      case a.key.TOOLS:
        if (V(W)) {
          break
        }
        /*LDW>
        if (I) {
          a.scene.removeKeyHandler(I);
          I = null
        } else {
          a.scene.returnFocus()
        }
        a.service.AVSetting.show(function () {
          m.focus()
        });
        */
        break;
      case a.key.VOL_UP:
        if (V(W)) {
          break
        }
        /*LDW>
        s("up");
        E.showBars();
        */
        break;
      case a.key.VOL_DOWN:
        if (V(W)) {
          break
        }
        /*LDW>
        s("down");
        E.showBars();
        */
        break;
      case a.key.MUTE:
        if (V(W)) {
          break
        }
        /*LDW>
        S();
        E.showBars();
        */
        break;
      default:
        V(W);
        break
      }
      function V(X) {
        if (typeof k[X] == "function") {
          k[X]();
          return true
        }
        return false
      }
    }
    function p() {
      var W = 0;
      this.Subtitle = new X();
      $('<div id="sf-service-videoplayer-mini"></div>').html(['<div id="sf-service-videoplayer-mini-infobar">', '<div id="sf-service-videoplayer-mini-infobar-state"></div>', '<div id="sf-service-videoplayer-mini-infobar-speed"></div>', '<div id="sf-service-videoplayer-mini-infobar-time">', '<div id="sf-service-videoplayer-mini-infobar-time-0"></div>', '<div id="sf-service-videoplayer-mini-infobar-time-1">/</div>', '<div id="sf-service-videoplayer-mini-infobar-time-2"></div>', "</div>", '<div id="sf-service-videoplayer-mini-infobar-progress-mouse"></div>', '<div id="sf-service-videoplayer-mini-infobar-progress-bg">', '<div id="sf-service-videoplayer-mini-infobar-progress-bg-left"></div>', '<div id="sf-service-videoplayer-mini-infobar-progress-bg-right"></div>', '<div id="sf-service-videoplayer-mini-infobar-progress-bg-middle"></div>', "</div>", '<div id="sf-service-videoplayer-mini-infobar-progress-play">', '<div id="sf-service-videoplayer-mini-infobar-progress-play-left"></div>', '<div id="sf-service-videoplayer-mini-infobar-progress-play-right"></div>', '<div id="sf-service-videoplayer-mini-infobar-progress-play-middle"></div>', "</div>", '<div id="sf-service-videoplayer-mini-infobar-skip-pointer"></div>', "</div>", '<div id="sf-service-videoplayer-mini-loading"></div>', '<div id="sf-service-videoplayer-mini-neterr-icon"></div>', '<div id="sf-service-videoplayer-mini-neterr-text">' + a.lang.SID_ALERT_NETWORKERROR_MSG + "</div>", '<div id="sf-service-videoplayer-mini-notsup-icon"></div>', '<div id="sf-service-videoplayer-mini-notsup-text">' + a.lang.SID_NOT_SUPPORT_FORMAT + "</div>", '<div id="sf-service-videoplayer-mini-subtitle">', '<table cellpadding="0px" cellspacing="0px">', "<tr>", '<td id="sf-service-videoplayer-mini-subtitle-table-td">', "</td>", "</tr>", "</table>", "</div>", ].join("")).appendTo($("body"));
      var V = $("#sf-service-videoplayer-mini-infobar-progress-play");
      var ad = $("#sf-service-videoplayer-mini-infobar").height();
      var aa = V.width();
      var Y = 0;
      var ac = $("#sf-service-videoplayer-mini-infobar-skip-pointer");
      var ab = parseInt(V.css("left")) + aa - ac.width();
      ac.hide();
      var Z = parseInt(V.css("left")) + parseInt($("#sf-service-videoplayer-mini-infobar-time").css("right"));
      this.init = function (ae) {
        alert("[MiniView] init(" + ae + ")");
        this.hide();
        this.refresh("state", a.service.VideoPlayer.STATE_STOPPED);
        this.refresh("speed", "");
        this.refresh("totaltime", 0);
        this.refresh("curtime", new PlayTime(0));
        $("#sf-service-videoplayer-mini-infobar-progress-mouse").click(function (af) {
          alert("[MiniView] Progress bar clicked!");
          ae.onprogressbarclicked(af.offsetX / Y)
        });
        $("#sf-service-videoplayer-mini").css({
          visibility: "visible"
        })
      };
      this.show = function () {
        alert("[MiniView] show()");
        $("#sf-service-videoplayer-mini").show()
      };
      this.hide = function () {
        alert("[MiniView] hide()");
        $("#sf-service-videoplayer-mini").hide()
      };
      this.showLoading = function () {
        alert("[MiniView] showLoading()");
        $("#sf-service-videoplayer-mini-loading").sfLoading("show")
      };
      this.hideLoading = function () {
        alert("[MiniView] hideLoading()");
        $("#sf-service-videoplayer-mini-loading").sfLoading("hide")
      };
      this.showTime = function () {
        alert("[MiniView] showTime()");
        $("#sf-service-videoplayer-mini-infobar-time").show()
      };
      this.hideTime = function () {
        alert("[MiniView] hideTime()");
        $("#sf-service-videoplayer-mini-infobar-time").hide()
      };
      this.showNetworkError = function () {
        alert("[MiniView] showNetworkError()");
        $("#sf-service-videoplayer-mini-neterr-icon").show();
        $("#sf-service-videoplayer-mini-neterr-text").show()
      };
      this.hideNetworkError = function () {
        alert("[MiniView] hideNetworkError()");
        $("#sf-service-videoplayer-mini-neterr-icon").hide();
        $("#sf-service-videoplayer-mini-neterr-text").hide()
      };
      this.showNotSupport = function () {
        alert("[MiniView] showNotSupport()");
        $("#sf-service-videoplayer-mini-notsup-icon").show();
        $("#sf-service-videoplayer-mini-notsup-text").show()
      };
      this.hideNotSupport = function () {
        alert("[MiniView] hideNotSupport()");
        $("#sf-service-videoplayer-mini-notsup-icon").hide();
        $("#sf-service-videoplayer-mini-notsup-text").hide()
      };
      this.setPosition = function (ae) {
        alert("[MiniView] setPosition(" + ae + ")");
        $("#sf-service-videoplayer-mini").css({
          left: ae.left,
          top: ae.top,
          width: ae.width,
          height: ae.height
        });
        Y = ae.width - Z;
        $("#sf-service-videoplayer-mini-infobar-progress-bg").width(Y);
        $("#sf-service-videoplayer-mini-infobar-progress-mouse").width(Y);
        $("#sf-service-videoplayer-mini-subtitle").height(ae.height - this.getInfobarHeight())
      };
      this.getInfobarHeight = function () {
        alert("[MiniView] getInfobarHeight() returns " + ad);
        return ad
      };
      this.setZIndex = function (ae) {
        alert("[MiniView] setZIndex(" + ae + ")");
        $("#sf-service-videoplayer-mini").css("z-index", ae)
      };
      this.refresh = function (ah, aj) {
        switch (ah.toUpperCase()) {
        case "STATE":
          $("#sf-service-videoplayer-mini-infobar-state").attr("class", "sf-service-videoplayer-mini-infobar-state-" + T[aj]);
          break;
        case "SPEED":
          $("#sf-service-videoplayer-mini-infobar-speed").html(aj);
          break;
        case "CURTIME":
          $("#sf-service-videoplayer-mini-infobar-time-0").html(aj.timeString);
          if (W) {
            var ai = parseInt((Y - aa) * aj.millisecond / W) + aa;
            $("#sf-service-videoplayer-mini-infobar-progress-play").width(ai)
          }
          break;
        case "TOTALTIME":
          var ag = new PlayTime(aj);
          $("#sf-service-videoplayer-mini-infobar-time-2").html(ag.timeString);
          W = ag.millisecond;
          break;
        case "SKIPTIME":
          var af = $("#sf-service-videoplayer-mini-infobar-skip-pointer");
          if (aj == "hide") {
            af.hide()
          } else {
            var ae = ab + parseInt((Y - aa) * aj / W);
            af.css("left", ae);
            if (af.css("display") == "none") {
              af.show()
            }
          }
          break;
        default:
          break
        }
      };
      function X() {
        this.show = function () {
          alert("[MiniView][Subtitle] show()");
          $("#sf-service-videoplayer-mini-subtitle").show()
        };
        this.hide = function () {
          alert("[MiniView][Subtitle] hide()");
          $("#sf-service-videoplayer-mini-subtitle").hide()
        };
        this.clear = function () {
          alert("[MiniView][Subtitle] clear()");
          $("#sf-service-videoplayer-mini-subtitle-table-td").html("")
        };
        this.setVerticalPosition = function (ae, ag) {
          alert("[MiniView][Subtitle] setVerticalPosition(" + ae + "," + ag + ")");
          var af = $("#sf-service-videoplayer-mini-subtitle-table-td");
          if (ae == 1) {
            af.css({
              "vertical-align": "top",
              "padding-top": ag,
              "padding-bottom": 0
            })
          } else {
            if (ae == 2) {
              af.css({
                "vertical-align": "bottom",
                "padding-top": 0,
                "padding-bottom": ag
              })
            }
          }
        };
        this.setFontSize = function (ae) {
          alert("[MiniView][Subtitle] setFontSize(" + ae + ")");
          $("#sf-service-videoplayer-mini-subtitle-table-td").css({
            "font-size": ae
          })
        };
        this.setFontColor = function (ae) {
          alert("[MiniView][Subtitle] setFontColor(" + ae + ")");
          $("#sf-service-videoplayer-mini-subtitle-table-td").css({
            color: ae
          })
        };
        this.setString = function (ae) {
          alert("[MiniView][Subtitle] setString(" + ae + ")");
          $("#sf-service-videoplayer-mini-subtitle-table-td").html(ae)
        }
      }
    }
    function P() {
      var ag = this;
      var Y = 0;
      var X = null;
      var aa = null;
      var W = 5000;
      var ac = 1000;
      this.Subtitle = new Z();
      $('<div id="sf-service-videoplayer-full"></div>').html(['<div id="sf-service-videoplayer-full-infobar">', '<div id="sf-service-videoplayer-full-infobar-bg0"></div>', '<div id="sf-service-videoplayer-full-infobar-bg1"></div>', '<div id="sf-service-videoplayer-full-infobar-state"></div>', '<div id="sf-service-videoplayer-full-infobar-speed"></div>', '<div id="sf-service-videoplayer-full-infobar-time">', '<div id="sf-service-videoplayer-full-infobar-time-0"></div>', '<div id="sf-service-videoplayer-full-infobar-time-1">/</div>', '<div id="sf-service-videoplayer-full-infobar-time-2"></div>', "</div>", '<div id="sf-service-videoplayer-full-infobar-progress-mouse"></div>', '<div id="sf-service-videoplayer-full-infobar-progress-bg">', '<div id="sf-service-videoplayer-full-infobar-progress-bg-left"></div>', '<div id="sf-service-videoplayer-full-infobar-progress-bg-right"></div>', '<div id="sf-service-videoplayer-full-infobar-progress-bg-middle"></div>', "</div>", '<div id="sf-service-videoplayer-full-infobar-progress-play">', '<div id="sf-service-videoplayer-full-infobar-progress-play-left"></div>', '<div id="sf-service-videoplayer-full-infobar-progress-play-right"></div>', '<div id="sf-service-videoplayer-full-infobar-progress-play-middle"></div>', "</div>", '<div id="sf-service-videoplayer-full-infobar-skip-pointer"></div>', '<div id="sf-service-videoplayer-full-infobar-title"></div>', '<div id="sf-service-videoplayer-full-infobar-volume">', '<div id="sf-service-videoplayer-full-infobar-volume-icon"></div>', '<div id="sf-service-videoplayer-full-infobar-volume-text"></div>', "</div>", "</div>", '<div id="sf-service-videoplayer-full-helpbar"></div>', '<div id="sf-service-videoplayer-full-loading"></div>', '<div id="sf-service-videoplayer-full-popup"></div>', '<div id="sf-service-videoplayer-full-neterr-icon"></div>', '<div id="sf-service-videoplayer-full-neterr-text">' + a.lang.SID_ALERT_NETWORKERROR_MSG + "</div>", '<div id="sf-service-videoplayer-full-notsup-icon"></div>', '<div id="sf-service-videoplayer-full-notsup-text">' + a.lang.SID_NOT_SUPPORT_FORMAT + "</div>", '<div id="sf-service-videoplayer-full-mouse"></div>', '<div id="sf-service-videoplayer-full-subtitle">', '<table cellpadding="0px" cellspacing="0px">', "<tr>", '<td id="sf-service-videoplayer-full-subtitle-table-td">', "</td>", "</tr>", "</table>", "</div>", ].join("")).appendTo($("body"));
      $("#sf-service-videoplayer-full-helpbar").sfKeyHelp({
        TOOLS: a.lang.SID_TOOLS,
        RETURN: a.lang.SID_RETURN
      });
      var V = $("#sf-service-videoplayer-full-infobar-progress-play");
      var ad = V.width();
      var ab = $("#sf-service-videoplayer-full-infobar-progress-bg").width();
      var af = $("#sf-service-videoplayer-full-infobar-skip-pointer");
      var ae = parseInt(V.css("left")) + ad - af.width();
      af.hide();
      this.init = function (ah) {
        alert("[FullView] init(" + ah + ")");
        this.hide();
        this.refresh("state", a.service.VideoPlayer.STATE_STOPPED);
        this.refresh("speed", "");
        this.refresh("totaltime", 0);
        this.refresh("curtime", new PlayTime(0));
        this.refresh("title", "");
        $("#sf-service-videoplayer-full-infobar-progress-mouse").click(function (ai) {
          alert("[FullView] Progress bar clicked!");
          ah.onprogressbarclicked(ai.offsetX / ab)
        });
        $("#sf-service-videoplayer-full-mouse").click(function (ai) {
          alert("[FullView] Clicked!");
          ag.showBars()
        });
        $("#sf-service-videoplayer-full").css({
          visibility: "visible"
        })
      };
      this.show = function () {
        alert("[FullView] show()");
        $("#sf-service-videoplayer-full").show();
        ag.showBars()
      };
      this.hide = function () {
        alert("[FullView] hide()");
        $("#sf-service-videoplayer-full").hide()
      };
      this.isShow = function () {
        var ah = $("#sf-service-videoplayer-full").css("display") != "none";
        alert("[FullView] isShow() returns " + ah);
        return ah
      };
      this.showBars = function () {
        alert("[FullView] showBars()");
        $("#sf-service-videoplayer-full-infobar").show();
        $("#sf-service-videoplayer-full-helpbar").show();
        ag.setBarHideTimer()
      };
      this.hideBars = function () {
        alert("[FullView] hideBars()");
        $("#sf-service-videoplayer-full-infobar").hide();
        $("#sf-service-videoplayer-full-helpbar").hide();
        ag.clearBarHideTimer()
      };
      this.isShowBars = function () {
        if (X != null) {
          return true
        }
        return false
      };
      this.showPopup = function (ah) {
        alert("[FullView] showPopup(" + ah + ")");
        $("#sf-service-videoplayer-full-popup").sfPopup(ah).sfPopup("show")
      };
      this.showLoading = function () {
        alert("[FullView] showLoading()");
        $("#sf-service-videoplayer-full-loading").sfLoading("show")
      };
      this.hideLoading = function () {
        alert("[FullView] hideLoading()");
        $("#sf-service-videoplayer-full-loading").sfLoading("hide")
      };
      this.showNetworkError = function () {
        alert("[FullView] showNetworkError()");
        $("#sf-service-videoplayer-full-neterr-icon").show();
        $("#sf-service-videoplayer-full-neterr-text").show()
      };
      this.hideNetworkError = function () {
        alert("[FullView] hideNetworkError()");
        $("#sf-service-videoplayer-full-neterr-icon").hide();
        $("#sf-service-videoplayer-full-neterr-text").hide()
      };
      this.showNotSupport = function () {
        alert("[FullView] showNotSupport()");
        $("#sf-service-videoplayer-full-notsup-icon").show();
        $("#sf-service-videoplayer-full-notsup-text").show()
      };
      this.hideNotSupport = function () {
        alert("[FullView] hideNotSupport()");
        $("#sf-service-videoplayer-full-notsup-icon").hide();
        $("#sf-service-videoplayer-full-notsup-text").hide()
      };
      this.setBarHideTimer = function () {
        alert("[FullView] setBarHideTimer()");
        ag.clearBarHideTimer();
        X = setTimeout(function () {
          ag.hideBars();
          X = null
        }, W)
      };
      this.clearBarHideTimer = function () {
        alert("[FullView] clearBarHideTimer()");
        if (X) {
          clearTimeout(X);
          X = null
        }
      };
      this.showVolume = function (ah) {
        alert("[FullView] showVolume(" + ah + ")");
        if (ah == 0) {
          $("#sf-service-videoplayer-full-infobar-volume").addClass("sf-service-videoplayer-full-infobar-volume-icon-mute")
        } else {
          $("#sf-service-videoplayer-full-infobar-volume").removeClass("sf-service-videoplayer-full-infobar-volume-icon-mute");
          $("#sf-service-videoplayer-full-infobar-volume-text").html(ah)
        }
        $("#sf-service-videoplayer-full-infobar-volume").show();
        ag.setVolumeHideTimer()
      };
      this.hideVolume = function () {
        alert("[FullView] hideVolume()");
        $("#sf-service-videoplayer-full-infobar-volume").hide()
      };
      this.setVolumeHideTimer = function () {
        alert("[FullView] setVolumeHideTimer()");
        ag.clearVolumeHideTimer();
        aa = setTimeout(function () {
          ag.hideVolume();
          aa = null
        }, ac)
      };
      this.clearVolumeHideTimer = function () {
        alert("[FullView] clearVolumeHideTimer()");
        if (aa) {
          clearTimeout(aa);
          aa = null
        }
      };
      this.setZIndex = function (ah) {
        alert("[FullView] setZIndex(" + ah + ")");
        $("#sf-service-videoplayer-full").css("z-index", ah)
      };
      this.refresh = function (ak, am) {
        switch (ak.toUpperCase()) {
        case "STATE":
          $("#sf-service-videoplayer-full-infobar-state").attr("class", "sf-service-videoplayer-full-infobar-state-" + T[am]);
          break;
        case "SPEED":
          $("#sf-service-videoplayer-full-infobar-speed").html(am);
          break;
        case "CURTIME":
          $("#sf-service-videoplayer-full-infobar-time-0").html(am.timeString);
          if (Y) {
            var al = parseInt((ab - ad) * am.millisecond / Y) + ad;
            $("#sf-service-videoplayer-full-infobar-progress-play").width(al)
          }
          break;
        case "TOTALTIME":
          var aj = new PlayTime(am);
          $("#sf-service-videoplayer-full-infobar-time-2").html(aj.timeString);
          Y = aj.millisecond;
          break;
        case "SKIPTIME":
          var ai = $("#sf-service-videoplayer-full-infobar-skip-pointer");
          if (am == "hide") {
            ai.hide()
          } else {
            var ah = ae + parseInt((ab - ad) * am / Y);
            ai.css("left", ah);
            if (ai.css("display") == "none") {
              ai.show()
            }
          }
          break;
        case "TITLE":
          $("#sf-service-videoplayer-full-infobar-title").html(am);
          break;
        case "HELPBAR":
          $("#sf-service-videoplayer-full-helpbar").sfKeyHelp(am);
          break;
        default:
          break
        }
      };
      function Z() {
        this.show = function () {
          alert("[FullView][Subtitle] show()");
          $("#sf-service-videoplayer-full-subtitle").show()
        };
        this.hide = function () {
          alert("[FullView][Subtitle] hide()");
          $("#sf-service-videoplayer-full-subtitle").hide()
        };
        this.clear = function () {
          alert("[FullView][Subtitle] clear()");
          $("#sf-service-videoplayer-full-subtitle-table-td").html("")
        };
        this.setVerticalPosition = function (ah, aj) {
          alert("[FullView][Subtitle] setVerticalPosition(" + ah + "," + aj + ")");
          var ai = $("#sf-service-videoplayer-full-subtitle-table-td");
          if (ah == 1) {
            ai.css({
              "vertical-align": "top",
              "padding-top": aj,
              "padding-bottom": 0
            })
          } else {
            if (ah == 2) {
              ai.css({
                "vertical-align": "bottom",
                "padding-top": 0,
                "padding-bottom": aj
              })
            }
          }
        };
        this.setFontSize = function (ah) {
          alert("[FullView][Subtitle] setFontSize(" + ah + ")");
          $("#sf-service-videoplayer-full-subtitle-table-td").css({
            "font-size": ah
          })
        };
        this.setFontColor = function (ah) {
          alert("[FullView][Subtitle] setFontColor(" + ah + ")");
          $("#sf-service-videoplayer-full-subtitle-table-td").css({
            color: ah
          })
        };
        this.setString = function (ah) {
          alert("[FullView][Subtitle] setString(" + ah + ")");
          $("#sf-service-videoplayer-full-subtitle-table-td").html(ah)
        }
      }
    }
    var T = {};
    T[m.STATE_PLAYING] = "play";
    T[m.STATE_PAUSED] = "pause";
    T[m.STATE_STOPPED] = "stop";
    T[m.STATE_BUFFERING] = "play";
    T[m.STATE_SCANNING] = "play"
  }
})(sf);
var iCCheck3DEffect = new CCheck3DEffect();
function CCheck3DEffect() {
  var f = "";
  var b = "Check3DEffect";
  var a = "1.0";
  var c = null;
  var d = null;
  var g = false;
  this.is3DEffectSupport = function () {
    alert("Check3DEffectSupport:");
    alert("\t" + b + " fail to initialize : can not find plugin object!");
    return 0;
  };
}
(function (b) {
  b.service.ImageViewer = new a();
  b.service.ImageViewer.NOERROR = 0;
  b.service.ImageViewer.ERR_NETWORK = 1;
  b.service.ImageViewer.ERR_RENDER = 2;
  function a() {
    this.setPosition = function (r) {
      if (window._browser == "designer") return;
      alert("[ImageViewer] setPosition(" + r + ")");
      /*LDW>
      if (!m) {
        g()
      }
      if (!e) {
        h(new SRect(r.left, r.top, r.width, r.height))
      } else {
        k.setDisplayRect(new SRect(r.left, r.top, r.width, r.height))
      }
      q.setPosition(r)
      */
      
      if ($("#sf-service-imageviewer").length == 0) {
        var imageViewer_elem = '<div id="sf-service-imageviewer" style="left:'+r.left+'px;top:'+r.top+'px;width:'+r.width+'px;height:'+r.height+'px;"></div>';
        $("body").append(imageViewer_elem);
      }
      else {
        $("#sf-service-imageviewer").css({
            "left":r.left,
            "top":r.top,
            "width":r.width,
            "height":r.height
        });
      }
    };
    this.draw = function (t, r) {
      alert("[ImageViewer] draw(" + t.url + "," + t.width + "," + t.height + ")");
      /*LDW>
      if (!m) {
        g()
      }
      if (!e) {
        alert("[ImageViewer] Execute setPosition() first.");
        return
      }
      if (!d(t)) {
        alert("[ImageViewer] draw() : Invalid item..");
        return false
      }
      f();
      q.show();
      q.showLoading();
      k.prepare(function () {
        q.hideLoading();
        if (r) {
          k.draw(r.oncomplete, r.onerror)
        } else {
          k.draw(null, null)
        }
      }, s, t.url, {
        width: t.width,
        height: t.height
      });
      function s(u) {
        alert("[ImageViewer] onError(" + u + ")");
        q.hideLoading();
        switch (u.code) {
        case u.NOT_FOUND_ERR:
        case u.NETWORK_ERR:
        case u.NETWORK_SLOW_ERR:
        case u.SECURITY_ERR:
          j(q.hideNetworkError);
          q.showNetworkError();
          if (r && typeof r.onerror == "function") {
            r.onerror(b.service.ImageViewer.ERR_NETWORK)
          }
          break;
        case u.RENDER_ERR:
          j(q.hideNotSupport);
          q.showNotSupport();
          if (r && typeof r.onerror == "function") {
            r.onerror(b.service.ImageViewer.ERR_RENDER)
          }
          break;
        default:
          break
        }
      }
      */
      
      if (window._browser == "designer") {
        var elems = document.querySelectorAll("div[data-role='dtvImageViewer']");
        for (var i = 0; i < elems.length; i++) {
        	var elem = $(elems[i]);
        	var opt = {};
        	opt.url = elem.attr("data-url");
        	opt.width = "100%";
        	opt.height = "100%";
        	initImageViewerForDesigner(elem, opt);
        }
        return true;
      }


      if ($("body").find("#sf-service-imageviewer").length == 0) return;
      initImageViewerForDesigner($("#sf-service-imageviewer"), t);
      
      function initImageViewerForDesigner(elem, option) {      	
      	//if (elem.find("#sf-service-imageviewer").length != 0) return;
  		//if (elem.parent().css("display") == "none") return;

      	elem.html('<img src="' + option.url
        	+ '" width="' + option.width
        	+ '" height="' + option.height
        	+ '" style="min-width:30px;min-height:30px;" waper_focus="false"></img><div style="display:none;" waper_focus="false" data-role="temp"></div>');
      }
    };
    this.clear = function () {
      if (window._browser == "designer") return;
      alert("[ImageViewer] clear()");
      /*LDW>
      if (!m) {
        g()
      }
      if (!e) {
        alert("[ImageViewer] !ERROR! Do setPosition() first.");
        return
      }
      k.clear();
      f();
      q.hideLoading()
      */
      document.querySelector("#sf-service-imageviewer").innerHTML = "";
    };
    this.show = function () {
      if (window._browser == "designer") return;
      alert("[ImageViewer] show()");
      /*LDW>
      if (!m) {
        g()
      }
      if (!e) {
        alert("[ImageViewer] !ERROR! Do setPosition() first.");
        return
      }
      q.show();
      k.show()
      */
      $("#sf-service-imageviewer").show();
    };
    this.hide = function () {
      if (window._browser == "designer") return;
      alert("[ImageViewer] hide()");
      /*LDW>
      if (!m) {
        g()
      }
      if (!e) {
        alert("[ImageViewer] !ERROR! Do setPosition() first.");
        return
      }
      this.clear();
      q.hide();
      k.hide()
      */
      $("#sf-service-imageviewer").hide();
    };
    this.getZIndex = function () {
      if (window._browser == "designer") return;
      /*LDW>
      if (!m) {
        g()
      }
      alert("[ImageViewer] getZIndex() returns " + k.zIndex);
      return k.zIndex
      */
      return $("#sf-service-imageviewer").css("z-index");
    };
    this.setZIndex = function (r) {
      if (window._browser == "designer") return;
      alert("[ImageViewer] setZIndex(" + r + ")");
      /*
      if (!m) {
        g()
      }
      k.setZIndex(r);
      q.setZIndex(r + 1)
      */
      $("#sf-service-imageviewer").css("z-index", r);
    };
    var n = "sf-service-imageviewer-partial";
    var o = 30;
    var p = this;
    var m = false;
    var e = false;
    var k = null;
    var q = null;
    var l = null;
    function g() {
      alert("[ImageViewer] initialize()");
      q = new c();
      q.setZIndex(o + 1);
      m = true
    }
    function h(r) {
      alert("[ImageViewer] setImageViewInstance(" + r + ")");
      deviceapis.imageview.getImageView(function (s) {
        k = s;
        p.ImageView = s;
        var t = {
          zIndex: o,
          displayRect: new SRect(r.left, r.top, r.width, r.height)
        };
        k.init(t)
      });
      e = true
    }
    function d(r) {
      var s = false;
      if (r && r.url) {
        s = true
      }
      alert("[ImageViewer] isValidItem(" + r + ") returns " + s);
      return s
    }
    function j(r) {
      alert("[ImageViewer] setViewCleaner()");
      if (typeof l == "function") {
        l()
      }
      l = r
    }
    function f() {
      alert("[ImageViewer] runViewCleaner()");
      if (typeof l == "function") {
        l();
        l = null
      }
    }
    function c() {
      $('<div id="' + n + '"></div>').html(['<div id="sf-service-imageviewer-partial-neterr-icon"></div>', '<div id="sf-service-imageviewer-partial-neterr-text">' + b.lang.SID_ALERT_NETWORKERROR_MSG + "</div>", '<div id="sf-service-imageviewer-partial-notsup-icon"></div>', '<div id="sf-service-imageviewer-partial-notsup-text">' + b.lang.SID_NOT_SUPPORT_FORMAT + "</div>", '<div id="sf-service-imageviewer-partial-loading"></div>', ].join("")).appendTo($("body"));
      this.init = function () {
        alert("[ImageViewer][view] init()")
      };
      this.show = function () {
        alert("[ImageViewer][view] show()");
        $("#" + n).show()
      };
      this.hide = function () {
        alert("[ImageViewer][view] hide()");
        $("#" + n).hide();
        this.hideLoading()
      };
      this.setPosition = function (r) {
        alert("[ImageViewer][view] setPosition(" + r + ")");
        $("#" + n).css({
          left: r.left,
          top: r.top,
          width: r.width,
          height: r.height
        })
      };
      this.showNetworkError = function () {
        alert("[ImageViewer][view] showNetworkError()");
        $("#sf-service-imageviewer-partial-neterr-icon").show();
        $("#sf-service-imageviewer-partial-neterr-text").show()
      };
      this.hideNetworkError = function () {
        alert("[ImageViewer][view] hideNetworkError()");
        $("#sf-service-imageviewer-partial-neterr-icon").hide();
        $("#sf-service-imageviewer-partial-neterr-text").hide()
      };
      this.showNotSupport = function () {
        alert("[ImageViewer][view] showNotSupport()");
        $("#sf-service-imageviewer-partial-notsup-icon").show();
        $("#sf-service-imageviewer-partial-notsup-text").show()
      };
      this.hideNotSupport = function () {
        alert("[ImageViewer][view] hideNotSupport()");
        $("#sf-service-imageviewer-partial-notsup-icon").hide();
        $("#sf-service-imageviewer-partial-notsup-text").hide()
      };
      this.showLoading = function () {
        alert("[ImageViewer][view] showLoading()");
        $("#sf-service-imageviewer-partial-loading").sfLoading("show")
      };
      this.hideLoading = function () {
        alert("[ImageViewer][view] hideLoading()");
        $("#sf-service-imageviewer-partial-loading").sfLoading("hide")
      };
      this.setZIndex = function (r) {
        alert("[ImageViewer][view] setZIndex(" + r + ")");
        $("#" + n).css("z-index", r)
      }
    }
  }
})(sf);
(function (b) {
  b.service.ImageViewer.SlideShow = new a();
  function a() {
    this.init = function (am) {
      alert("[SlideShow] init()");
      if (am) {
        if (am.cyclic !== undefined) {
          P = am.cyclic
        }
        if (am.timegap !== undefined) {
          al = am.timegap
        }
        if (am.onlastitem !== undefined) {
          T = am.onlastitem
        }
        if (am.onerror !== undefined) {
          n = am.onerror
        }
        if (am.onimagechange !== undefined) {
          cbOnImageChange = am.onimagechange
        }
      }
      /*LDW>
      if (!A) {
        p()
      }
      */
      
      if (window._browser == "designer") {
        var elems = document.querySelectorAll("div[data-role='dtvSlideShow']");
        for (var i = 0; i < elems.length; i++) {
        	$(elems[i]).css("z-index", g);
        	initSlideShowForDesigner($(elems[i]));
        }
        return true;
      }

      initSlideShowForDesigner($("body"));
      
      setTimeout(function () {
        $("#" + S).keydown(x)
      }, 0);

      var mine = this;
      $("#sf-service-slideshow").bind("click", function(){
        mine.__bar_show();
      });
	  
      function initSlideShowForDesigner(elem) {
      	if (elem.find("#sf-service-slideshow").length != 0) return;
  		if (elem.parent().css("display") == "none") return;

		var slideshow_elem = '<div id="sf-service-slideshow" class="sf-service-slideshow" data-role="temp" style="display:none;position:fixed;background:black;left:0px;top:0px;z-index:41;" waper_focus="false">'
        	+ '<div id="sf-service-slideshow-images" style="width:100%; height:100%;" waper_focus="false"></div>'
        	+ '<div id="sf-service-slideshow-infobar" waper_focus="false"><div id="sf-service-slideshow-infobar-state" class="sf-service-slideshow-infobar-state-pause" waper_focus="false"></div><div id="sf-service-slideshow-infobar-speed" waper_focus="false">Normal</div>'
        	+ '<div id="sf-service-slideshow-infobar-filename" waper_focus="false"></div><div id="sf-service-slideshow-infobar-resolution" waper_focus="false"></div><div id="sf-service-slideshow-infobar-date" waper_focus="false"></div><div id="sf-service-slideshow-infobar-index" waper_focus="false">1 / 3</div></div>'
        	+ '<div id="sf-service-slideshow-helpbar" class="sf-ui-keyhelp sf-ui-keyhelp-black" style="display:block;" waper_focus="false"><table cellpadding="0px" cellspacing="0px" border="0px" valign="middle" style="width:100%;height:100%;" waper_focus="false"><tbody waper_focus="false"><tr waper_focus="false"><td class="sf-ui-keyhelp-margin-left" waper_focus="false"></td><td style="text-align:right;" waper_focus="false">'
        	+ '<table cellpadding="0px" cellspacing="0px" border="0px" style="table-layout:fixed;" align="right" waper_focus="false"><tbody waper_focus="false"><tr waper_focus="false">'
        	/*+ '<td class="sf-ui-keyhelp-icon sf-ui-keyhelp-icon-rewff sf-ui-keyhelp-icon-long" key="REWFF" waper_focus="false"></td><td class="sf-ui-keyhelp-margin-icon" key="REWFF" waper_focus="false"></td><td class="sf-ui-keyhelp-text" key="REWFF" waper_focus="false">Slow/Fast</td>'
        	+ '<td class="sf-ui-keyhelp-margin-items" waper_focus="false"></td><td class="sf-ui-keyhelp-icon sf-ui-keyhelp-icon-leftright" key="LEFTRIGHT" waper_focus="false"></td><td class="sf-ui-keyhelp-margin-icon" key="LEFTRIGHT" waper_focus="false"></td><td class="sf-ui-keyhelp-text" key="LEFTRIGHT" waper_focus="false">Prev./Next</td>'
        	+ '<td class="sf-ui-keyhelp-margin-items" waper_focus="false"></td><td class="sf-ui-keyhelp-icon sf-ui-keyhelp-icon-enter" key="ENTER" waper_focus="false"></td><td class="sf-ui-keyhelp-margin-icon" key="ENTER" waper_focus="false"></td><td class="sf-ui-keyhelp-text" key="ENTER" waper_focus="false">Stop Slideshow</td><td class="sf-ui-keyhelp-margin-items" waper_focus="false"></td>'*/
        	+ '<td class="sf-ui-keyhelp-icon sf-ui-keyhelp-icon-return" key="RETURN" waper_focus="false"></td><td class="sf-ui-keyhelp-margin-icon" key="RETURN" waper_focus="false"></td><td class="sf-ui-keyhelp-text" key="RETURN" waper_focus="false">Return</td></tr></tbody></table></td>'
        	+ '<td class="sf-ui-keyhelp-margin-right" waper_focus="false"></td></tr></tbody></table></div><a href="javascript:void(0)" id="' + S + '"></a></div>';

		elem.append(slideshow_elem);
		
		if (window._browser == "designer") {
	        if (elem.attr("data-visible") == "hide") elem.hide();
	        else elem.show();
        }
        
      }
    };
    //LDW>
    this.__slide_int = null;
    function __bar_hide() {
        $("#sf-service-slideshow #sf-service-slideshow-infobar").hide();
        $("#sf-service-slideshow #sf-service-slideshow-helpbar").hide();
    };
    this.__bar_show = function() {
        $("#sf-service-slideshow #sf-service-slideshow-infobar").show();
        $("#sf-service-slideshow #sf-service-slideshow-helpbar").show();
        setTimeout(__bar_hide, 3000);
    };
    this.start = function () {
      if (window._browser == "designer") return;
      alert("[SlideShow] start()");
      /*
      if (!A) {
        p()
      }
      if (M) {
        alert("[SlideShow] SlideShow is already started.");
        return false
      }
      b.service.ImageViewer.clear();
      ac();
      this.setSpeed(b.core.localData("_imageviewer_speed"));
      u("show");
      u("setSlideShow", true);
      d(O);
      N();
      t.showBars();
      t.show();
      M = true;
      this.focus()
      */
      $("#sf-service-slideshow #sf-service-slideshow-infobar-state")[0].className = "sf-service-slideshow-infobar-state-play";
      this.__bar_show();
      $("#sf-service-slideshow").show();
      
      var index = 0;
      var images_elem = document.querySelectorAll("#sf-service-slideshow #sf-service-slideshow-images div");
      if (!this.__slide_int && images_elem.length > 1) {
          this.__slide_int = setInterval(function(){
            var next = (index + 1) == images_elem.length ? 0 : (index + 1);
            images_elem[index].className = "slideleft out";
            images_elem[next].className = "slideleft in";
            setTimeout(function(){
                images_elem[index].className = "";
                images_elem[index].style.display = "none";
                images_elem[next].className = "";
                images_elem[next].style.display = "block";
                index = (index + 1) == images_elem.length ? 0 : next;
            }, 800);
            if (!P && next == (images_elem.length - 1)) {
                clearInterval(this.__slide_int);
                this.__slide_int = null;
            }
          }, al.normal);
      }
      M = true;
      this.focus();
    };
    this.stop = function () {
      if (window._browser == "designer") return;
      alert("[SlideShow] stop()");
      /*LDW>
      if (!A) {
        p()
      }
      if (!M) {
        alert("[SlideShow] SlideShow is not started.");
        return false
      }
      u("setSlideShow", false);
      u("clear");
      u("hide");
      B();
      t.hide("LOADING");
      t.hideBars();
      t.hide();
      ah();
      */
      M = false;
      //k = "stop";
      
      if (Z) {
        b.scene.removeKeyHandler(Z);
        Z = null
      } else {
        b.scene.returnFocus()
      }
      
      clearInterval(this.__slide_int);
      this.__slide_int = null;
      $("#sf-service-slideshow").hide();
    };
    this.pause = function () {
      if (window._browser == "designer") return;
      alert("[SlideShow] pause()");
      /*
      if (!M) {
        alert("[SlideShow] Slide show is not in progress. Skip.");
        return
      }
      ae()
      */
      this._elem.querySelector("#sf-service-slideshow-infobar-state").className = "sf-service-slideshow-infobar-state-pause";
      clearInterval(this.__slide_int);
      this.__slide_int = null;
    };
    this.resume = function () {
      if (window._browser == "designer") return;
      alert("[SlideShow] resume()");
      /*
      if (!M) {
        alert("[SlideShow] Slide show is not in progress. Skip.");
        return
      }
      N()
      */
    };
    this.focus = function () {
      if (window._browser == "designer") return;
      alert("[SlideShow] focus()");
      /*LDW>
      if (!A) {
        p()
      }
      */
      if (!M) {
        alert("[SlideShow] Slide show is not in progress. Skip.");
        return
      }
      if (b.scene._isSceneArchUsed()) {
        Z = b.scene.pushKeyHandler(function () {
          x()
        }, {
          context: this
        })
      } else {
        $("#" + S).focus()
      }
    };
    this.setKeyHandler = function (am, an) {
      if (window._browser == "designer") return;
      alert("[SlideShow] setKeyHandler(" + am + "," + typeof an + ")");
      /*LDW>
      if (!A) {
        p()
      }
      */
      if (typeof am == "object") {
        for (var ao in am) {
          r[ao] = am[ao]
        }
      } else {
        r[am] = an
      }
    };
    this.setKeyHelp = function (am, an) {
      if (window._browser == "designer") return;
      alert("[SlideShow] setKeyHelp(" + am + "," + (an ? an : "") + ")");
      /*LDW>
      if (!A) {
        p()
      }
      if (typeof am == "object") {
        for (var ao in am) {
          aa[ao] = am[ao]
        }
      } else {
        aa[am] = an
      }
      t.refresh("helpbar", C(aa))
      */
    };
    this.setItem = function (am) {
      if (window._browser == "designer") return;
      alert("[SlideShow] setItem(" + am + ")");
      /*LDW>
      if (!A) {
        p()
      }
      if (L(am)) {
        if (am.constructor != Array) {
          am = [am]
        }
        ag = am;
        if (M) {
          O = D = 0;
          c = true;
          Y = null;
          if (k == "play") {
            if (ag.length <= 1) {
              ae();
              return true
            }
            X();
            ak(D, R)
          }
        }
        return true
      } else {
        alert('[ImageViewer][SlideShow] setItem - Parameter should be the object that has "url" property, or its Array.');
        return false
      }
      */
      var slideshow_elem = $("#sf-service-slideshow #sf-service-slideshow-images");
      for (var i in am) {
        var imagewrap_elem = document.createElement("div");
        imagewrap_elem.style.position = "absolute";
        imagewrap_elem.style.display = (i == 0) ? "block" : "none";
        imagewrap_elem.style.width = "100%";
        imagewrap_elem.style.height = "100%";
        imagewrap_elem.setAttribute("align", "center");
        imagewrap_elem.setAttribute("waper_focus", "false");
        var image_elem = document.createElement("img");
        image_elem.setAttribute("src", am[i].url);
        image_elem.setAttribute("width", am[i].width);
        image_elem.setAttribute("height", am[i].height);
        imagewrap_elem.setAttribute("waper_focus", "false");
        image_elem.style.marginTop = (($("#sf-service-slideshow").height() - image_elem.height) / 2) + "px";
        imagewrap_elem.appendChild(image_elem);
        slideshow_elem.append(imagewrap_elem);
      }
    };
    this.addItem = function (am) {
      alert("[SlideShow] addItems(" + am + ")");
      /*LDW>
      if (!A) {
        p()
      }
      if (L(am)) {
        if (am.constructor != Array) {
          am = [am]
        }
        ag = ag.concat(am);
        return true
      } else {
        alert('[ImageViewer][SlideShow] addItems - Parameter should be the object that has "url" property, or its Array.');
        return false
      }
      */
    };
    this.getItemIdx = function () {
      alert("[SlideShow] getItemIdx() returns " + O);
      /*LDW>
      return O
      */
    };
    this.setItemIdx = function (am) {
      alert("[SlideShow] setItemIdx(" + am + ")");
      /*LDW>
      if (!A) {
        p()
      }
      if (am >= 0 && am <= ag.length - 1) {
        O = am;
        return true
      } else {
        alert("[ImageViewer][SlideShow] invalid index : " + am);
        return false
      }
      */
    };
    this.getSpeed = function (am) {
      alert("[SlideShow] getSpeed() returns " + ai);
      /*LDW>
      return ai
      */
    };
    this.setSpeed = function (am) {
      alert("[SlideShow] setSpeed(" + am + ")");
      /*LDW>
      if (am == null || (am != "fast" && am != "normal" && am != "slow")) {
        alert("[ImageViewer][SlideShow] Invalid value.. Use fast, normal or slow.");
        return false
      }
      ai = am;
      b.core.localData("_imageviewer_speed", ai);
      if (M) {
        t.refresh("infobar", E());
        if (k == "play") {
          X()
        }
      }
      return true
      */
    };
    this.getZIndex = function () {
      alert("[SlideShow] getZIndex()");
      /*LDW>
      if (!A) {
        p()
      }
      alert("[ImageViewer][SlideShow] getZIndex() returns " + J[0].zIndex);
      return J[0].zIndex
      */
      return $("#sf-service-slideshow").css("z-index");
    };
    this.setZIndex = function (am) {
      alert("[SlideShow] setZIndex(" + am + ")");
      /*LDW>
      if (!A) {
        p()
      }
      u("setZIndex", am);
      t.setZIndex(am + 1)
      */
      $("#sf-service-slideshow").css("z-index", am);
    };
    this.getState = function () {
      alert("[SlideShow] getState() returns " + k);
      /*LDW>
      return k
      */
    };
    this.getTransitionEffectList = function () {
      alert("[SlideShow] getTransitionEffectList()");
      /*LDW>
      if (!A) {
        p()
      }
      return J[0].getTransitionEffectList()
      */
    };
    this.setEffect = function (am) {
      alert("[SlideShow] setEffect(" + am + ")");
      /*LDW>
      R = am;
      if (af) {
        alert("[ImageViewer][SlideShow] Drawing is in progress. Not prepare next.");
        return
      }
      if (k == "play") {
        Y = null;
        X();
        D = K(O);
        ak(D, R)
      } else {
        if (k == "pause") {
          Y = null;
          D = K(O);
          ak(D, R)
        }
      }
      */
    };
    function x() {
      var am = event.keyCode;
      alert("[SlideShow] handleKeydown(" + am + ")");
      if (H && am != b.key.RETURN && am != b.key.EXIT) {
        alert("[SlideShow] key blocked. transition effect is going on.");
        return
      }
      if (typeof r[am] == "function") {
        alert("[SlideShow] Run user's key handler ! [" + am + "]");
        r[am]();
        if (am == b.key.RETURN) {
          b.key.preventDefault();
          return
        }
        if (am != b.key.EXIT) {
          return
        }
      }
      switch (am) {
      case b.key.LEFT:
      case b.key.RIGHT:
        /*LDW>
        if (ag && ag.length == 1) {
          return
        }
        if (k == "play") {
          ah();
          o.stop()
        }
        var an = (am == b.key.LEFT) ? m : K;
        D = an(O);
        d(D);
        t.refresh("infobar", E());
        t.showBars();
        */
        break;
      case b.key.UP:
      case b.key.DOWN:
        break;
      case b.key.ENTER:
        /*LDW>
        if (ag && ag.length == 1) {
          return
        }
        k == "play" ? ae() : N();
        t.refresh("helpbar", C(aa));
        t.showBars();
        */
        break;
      case b.key.RETURN:
        b.key.preventDefault();
        break;
      case b.key.EXIT:
        b.service.ImageViewer.SlideShow.stop();
        break;
      case b.key.REW:
        /*LDW>
        if (ag && ag.length == 1) {
          return
        }
        if (ai == "fast") {
          s.setSpeed("normal")
        } else {
          if (ai == "normal") {
            s.setSpeed("slow")
          }
        }
        t.showBars();
        if (k == "play") {
          X()
        }
        */
        break;
      case b.key.FF:
        /*LDW>
        if (ag && ag.length == 1) {
          return
        }
        if (ai == "slow") {
          s.setSpeed("normal")
        } else {
          if (ai == "normal") {
            s.setSpeed("fast")
          }
        }
        t.showBars();
        if (k == "play") {
          X()
        }
        */
        break;
      case b.key.INFO:
        /*LDW>
        t.toggleBars();
        */
        break;
      case b.key.PLAY:
        /*LDW>
        if (ag && ag.length == 1) {
          return
        }
        N();
        t.refresh("helpbar", C(aa));
        t.showBars();
        */
        break;
      case b.key.PAUSE:
        /*LDW>
        if (ag && ag.length == 1) {
          return
        }
        ae();
        t.refresh("helpbar", C(aa));
        t.showBars();
        */
        break;
      case b.key.TOOLS:
        break;
      case b.key.RED:
        break;
      case b.key.GREEN:
        break;
      case b.key.YELLOW:
        break;
      case b.key.BLUE:
        break
      }
    }
    var V = "sf-service-slideshow";
    var g = 40;
    var S = "sf-service-slideshow-anchor";
    var z = 3;
    var s = this;
    var A = false;
    var t = null;
    var o = null;
    var J = [];
    var ag = null;
    var O = 0;
    var D = 0;
    var n = null;
    var T = null;
    var Q = {
      slow: "",
      normal: "",
      fast: ""
    };
    var ai = "normal";
    var F = {
      play: "",
      pause: ""
    };
    var k = "stop";
    var P = true;
    var al = {
      slow: 10000,
      normal: 5000,
      fast: 3000
    };
    var R = deviceapis.imageview.EFFECT_RANDOM;
    var w = null;
    var Z = null;
    var r = {};
    var aa = {};
    var M = false;
    var af = false;
    var I = false;
    var G = false;
    var H = false;
    var q = null;
    var h = "none";
    var Y = null;
    var U = null;
    var W = null;
    var f = new ad(5);
    var c = false;
    function ab() {
      alert("[SlideShow] onRenderingComplete()");
      H = false;
      f.init();
      if (typeof cbOnImageChange == "function") {
        cbOnImageChange()
      }
      if (typeof T == "function") {
        var am = ag.length - O;
        if (am <= z) {
          T(am)
        }
      }
      W = o;
      if (k == "play") {
        if (ag.length <= 1 || (!P && O == ag.length - 1)) {
          ae();
          return
        }
        Y = null;
        X();
        D = K(O);
        ak(D, R)
      }
    }
    function X() {
      alert("[SlideShow] setShowTimer()");
      ah();
      h = "wait";
      q = setTimeout(function () {
        alert("[SlideShow] hShowTimer runs.");
        h = "finish";
        q = null;
        if (k != "play") {
          return
        }
        if (typeof Y == "function") {
          alert("[SlideShow] run fnProceed function.");
          Y();
          Y = null
        } else {
          alert("[SlideShow] set fnProceed function.");
          Y = j
        }
      }, (al[ai] || al.normal));
      alert("[SlideShow] Timer is set")
    }
    function ah() {
      alert("[SlideShow] clearShowTimer()");
      h = "none";
      if (q) {
        clearTimeout(q);
        q = null
      }
    }
    function d(ao) {
      alert("[SlideShow] drawImage(" + ao + ")");
      B();
      t.show("LOADING");
      O = ao;
      af = true;
      I = false;
      G = false;
      Y = null;
      o = y();
      o.prepare(function () {
        t.hide("LOADING");
        t.refresh("infobar", E());
        o.draw(function () {
          af = false;
          ab()
        }, an)
      }, function (aq) {
        t.hide("LOADING");
        af = false;
        an(aq)
      }, ag[ao].url, {
        width: ag[ao].width,
        height: ag[ao].height,
        effect: deviceapis.imageview.EFFECT_NONE
      });
      function an(aq) {
        alert("[SlideShow] drawImage() -> onError(" + aq + ")");
        switch (aq.code) {
        case aq.NOT_FOUND_ERR:
        case aq.NETWORK_ERR:
        case aq.NETWORK_SLOW_ERR:
        case aq.SECURITY_ERR:
          am();
          if (typeof n == "function") {
            n(b.service.ImageViewer.SlideShow.ERR_NETWORK)
          }
          break;
        case aq.RENDER_ERR:
          ap();
          if (typeof n == "function") {
            n(b.service.ImageViewer.SlideShow.ERR_RENDER)
          }
          break;
        default:
          break
        }
      }
      function am() {
        alert("[SlideShow] drawImage() -> onNetworkError()");
        o.clear();
        e(function () {
          t.hide("NETWORK_ERROR")
        });
        t.show("NETWORK_ERROR");
        t.refresh("helpbar", C(aa));
        if (k == "play") {
          if (ag.length <= 1 || (!P && O == ag.length - 1)) {
            ae()
          } else {
            Y = null;
            X();
            D = K(O);
            ak(D, deviceapis.imageview.EFFECT_NONE)
          }
        }
      }
      function ap() {
        alert("[SlideShow] drawImage() -> onRenderError()");
        t.hide("LOADING");
        o.clear();
        e(function () {
          t.hide("NOT_SUPPORT")
        });
        t.show("NOT_SUPPORT");
        t.refresh("infobar", E());
        if (k == "play") {
          if (ag.length <= 1 || (!P && O == ag.length - 1)) {
            ae()
          } else {
            Y = null;
            X();
            D = K(O);
            ak(D, deviceapis.imageview.EFFECT_NONE)
          }
        }
      }
    }
    function ak(am, ap) {
      alert("[SlideShow] prepare(" + am + "," + ap + ")");
      var ar = ag[am];
      I = true;
      G = false;
      o = y();
      o.prepare(function () {
        I = false;
        G = true;
        ao()
      }, function (au) {
        I = false;
        G = false;
        aq(au)
      }, ar.url, {
        width: ar.width,
        height: ar.height,
        effect: ap
      });
      function ao() {
        alert("[SlideShow] onDecodingComplete()");
        if (h == "finish" && k == "play") {
          alert("[SlideShow] run fnProceed function.");
          Y();
          Y = null
        } else {
          alert("[SlideShow] set fnProceed function.");
          Y = j
        }
      }
      function aq(au) {
        alert("[SlideShow] prepare() -> onError(" + au + ")");
        switch (au.code) {
        case au.NOT_FOUND_ERR:
        case au.NETWORK_ERR:
        case au.NETWORK_SLOW_ERR:
        case au.SECURITY_ERR:
          an();
          if (typeof n == "function") {
            n(b.service.ImageViewer.SlideShow.ERR_NETWORK)
          }
          break;
        case au.RENDER_ERR:
          at();
          if (typeof n == "function") {
            n(b.service.ImageViewer.SlideShow.ERR_RENDER)
          }
          break;
        default:
          break
        }
      }
      function an() {
        alert("[SlideShow] prepare() -> onNetworkError()");
        if (f.inc()) {
          o.clear();
          e(function () {
            t.hide("NETWORK_ERROR")
          });
          t.show("NETWORK_ERROR");
          O = D;
          t.refresh("helpbar", C(aa));
          ae()
        } else {
          if (k == "play") {
            if (ag.length <= 1 || (!P && O == ag.length - 1)) {
              ae();
              return
            }
            D = K(D);
            ak(D, R)
          }
        }
      }
      function at() {
        alert("[SlideShow] prepare() -> onRenderError()");
        if (k == "play") {
          if (Y) {
            alert("[SlideShow] show Not Support and prepare next.");
            au();
            Y = null
          } else {
            alert("[SlideShow] set fnProceed function. -> show Not Support)");
            Y = au
          }
        }
        function au() {
          o.clear();
          e(function () {
            t.hide("NOT_SUPPORT")
          });
          t.show("NOT_SUPPORT");
          O = D;
          t.refresh("infobar", E());
          if (ag.length <= 1 || (!P && O == ag.length - 1)) {
            ae();
            return
          }
          Y = null;
          X();
          D = K(O);
          ak(D, deviceapis.imageview.EFFECT_NONE)
        }
      }
    }
    function j() {
      alert("[SlideShow] showPreparedImage()");
      O = D;
      t.refresh("infobar", E());
      B();
      H = true;
      c = false;
      if (W) {
        W.stop()
      }
      o.draw(function () {
        G = false;
        ab()
      }, null)
    }
    function K(am) {
      var an = am + 1,
        ao = ag ? ag.length : 0;
      if (an > ao - 1) {
        an = 0
      }
      alert("[SlideShow] getNextItemIdx(" + am + ") returns " + an);
      return an
    }
    function m(am) {
      var an = --am,
        ao = ag ? ag.length : 0;
      if (an < 0) {
        an = ao - 1
      }
      alert("[SlideShow] getPrevItemIdx(" + am + ") returns " + an);
      return an
    }
    function N() {
      alert("[SlideShow] playShow()");
      k = "play";
      if (ag.length <= 1) {
        ae();
        return
      }
      if (!af) {
        X();
        if (t.bShowNetworkError || t.bShowNotSupport) {
          D = K(O);
          d(D)
        } else {
          if (!G && !I) {
            if (c) {
              D = O
            } else {
              D = K(O)
            }
            ak(D, R)
          }
        }
      }
      t.refresh("infobar", E());
      t.refresh("helpbar", C(aa));
      b.service.setScreenSaver(false)
    }
    function ae() {
      alert("[SlideShow] pauseShow()");
      k = "pause";
      ah();
      t.refresh("infobar", E());
      t.refresh("helpbar", C(aa));
      b.service.setScreenSaver(true)
    }
    function C(ap) {
      var ao = $.extend({}, ap);
      var am = {};
      am.REWFF = b.lang.SID_SLOW_FAST;
      am.LEFTRIGHT = b.lang.SID_PREV_NEXT;
      am.ENTER = k == "play" ? b.lang.SID_STOP_SLIDESHOW : b.lang.SID_START_SLIDESHOW;
      am.RETURN = b.lang.SID_RETURN;
      for (var an in am) {
        if (ao[an] === undefined) {
          ao[an] = am[an]
        }
      }
      for (var an in ao) {
        if (ao[an] === null) {
          delete ao[an]
        }
      }
      return ao
    }
    function E() {
      var am = {};
      am.STATE = k;
      am.SPEED = Q[ai];
      am.INDEX = (O + 1) + " / " + ag.length;
      var an = ag[O];
      am.FILENAME = an.filename || "";
      am.RESOLUTION = (o.imageWidth && o.imageHeight) ? o.imageWidth + " x " + o.imageHeight : "";
      am.DATE = an.date || "";
      return am
    }
    function y() {
      var am = null;
      if (W) {
        for (var an = 0; an < J.length; an++) {
          if (J[an].id != W.id) {
            am = J[an];
            break
          }
        }
      } else {
        am = J[0]
      }
      return am
    }
    function u(ao, am) {
      for (var an = 0; an < J.length; an++) {
        J[an][ao].call(J[an], (am === undefined ? null : am))
      }
    }
    function p() {
      alert("[SlideShow] initialize()");
      t = new aj();
      t.init();
      t.setZIndex(g + 1);
      t.hide();
      $('<a href="javascript:void(0)" id="' + S + '"></a>').appendTo($("body"));
      setTimeout(function () {
        $("#" + S).keydown(x)
      }, 0);
      var am = {
        zIndex: g,
        displayRect: new SRect(0, 0, curWidget.width, curWidget.height)
      };
      deviceapis.imageview.getImageView(function (an) {
        J.push(an);
        an.init(am)
      });
      deviceapis.imageview.getImageView(function (an) {
        J.push(an);
        an.init(am)
      });
      u("hide");
      l();
      A = true
    }
    function e(am) {
      alert("[SlideShow] setViewCleaner()");
      if (typeof U == "function") {
        U()
      }
      U = am
    }
    function B() {
      alert("[SlideShow] runViewCleaner()");
      if (typeof U == "function") {
        U();
        U = null
      }
    }
    function ac() {
      alert("[SlideShow] initEnvVars()");
      M = false;
      af = false;
      I = false;
      G = false;
      H = false;
      q = null;
      h = "none";
      Y = null;
      U = null
    }
    function l() {
      alert("[SlideShow] setTextResource()");
      w = {
        FADE1: b.lang.SID_FADE1,
        FADE2: b.lang.SID_FADE2,
        BLIND: b.lang.SID_BLIND,
        SPIRAL: b.lang.SID_SPIRAL,
        CHECKER: b.lang.SID_CHECKER,
        LINEAR: b.lang.SID_LINEAR,
        STAIRS: b.lang.SID_STAIRS,
        WIPE: b.lang.SID_WIPE,
        RANDOM: b.lang.SID_RANDOM,
        NONE: b.lang.SID_NONE
      };
      F = {
        play: b.lang.SID_PLAY,
        pause: b.lang.SID_PAUSE
      };
      Q = {
        slow: b.lang.SID_SLOW,
        normal: b.lang.SID_NORMAL,
        fast: b.lang.SID_FAST
      }
    }
    function L(ao) {
      var ap = false;
      if (ao.constructor != Array) {
        ao = [ao]
      }
      var am = ao.length;
      if (am > 0) {
        ap = true;
        for (var an = 0; an < am; an++) {
          if (typeof ao[an] != "object" || ao[an].url === undefined) {
            ap = false;
            alert("[SlideShow] !Invalid item! " + an + "th -> " + printProperties(ao[an]))
          }
        }
      } else {
        alert("[SlideShow] !Invalid item! item is not valid.");
        printProperties(ao)
      }
      alert("[SlideShow] isValidItem() returns " + ap);
      return ap
    }
    function ad(an) {
      var am = 0;
      this.inc = function () {
        var ao = false;
        if (++am >= an) {
          ao = true
        }
        alert("[SlideShow] ErrorCounter.inc() count -> " + am + ", MAX : " + an + ", returns " + ao);
        return ao
      };
      this.init = function () {
        am = 0;
        alert("[SlideShow] ErrorCounter.init() count -> " + am + ", MAX : " + an)
      };
      this.get = function () {
        alert("[SlideShow] ErrorCounter.get() returns " + am);
        return am
      }
    }
    function aj() {
      var an = this;
      var am = null;
      var ao = 5000;
      this.bShowNetworkError = false;
      $('<div id="' + V + '" class="sf-service-slideshow"></div>').html(['<div id="sf-service-slideshow-infobar">', '<div id="sf-service-slideshow-infobar-state"></div>', '<div id="sf-service-slideshow-infobar-speed"></div>', '<div id="sf-service-slideshow-infobar-filename"></div>', '<div id="sf-service-slideshow-infobar-resolution"></div>', '<div id="sf-service-slideshow-infobar-date"></div>', '<div id="sf-service-slideshow-infobar-index"></div>', "</div>", '<div id="sf-service-slideshow-helpbar"></div>', '<div id="sf-service-slideshow-mouse"></div>', '<div id="sf-service-slideshow-neterr">', '<div id="sf-service-slideshow-neterr-icon"></div>', '<div id="sf-service-slideshow-neterr-text-0">' + b.lang.SID_ALERT_NETWORKERROR_MSG + "</div>", '<div id="sf-service-slideshow-neterr-text-1"></div>', "</div>", '<div id="sf-service-slideshow-notsup">', '<div id="sf-service-slideshow-notsup-icon"></div>', '<div id="sf-service-slideshow-notsup-text">' + b.lang.SID_NOT_SUPPORT_FORMAT + "</div>", "</div>", '<div id="sf-service-slideshow-loading"></div>', '<div id="sf-service-slideshow-tool"></div>'].join("")).appendTo($("body"));
      $("#sf-service-slideshow-helpbar").sfKeyHelp({
        "return": b.lang.SID_RETURN
      });
      this.init = function () {
        alert("[SlideShow][view] init()");
        $("#sf-service-slideshow-mouse").click(function (ar) {
          alert("[SlideShow][view] Clicked!");
          an.showBars()
        })
      };
      this.show = function (ar) {
        alert("[SlideShow][view] show(" + (ar ? ar : "") + ")");
        if (typeof ar == "undefined") {
          $("#" + V).show();
          return
        }
        switch (ar.toUpperCase()) {
        case "INFOBAR":
          $("#sf-service-slideshow-infobar").show();
          break;
        case "HELPBAR":
          $("#sf-service-slideshow-helpbar").sfKeyHelp("show");
          break;
        case "LOADING":
          $("#sf-service-slideshow-loading").sfLoading("show");
          break;
        case "NETWORK_ERROR":
          $("#sf-service-slideshow-neterr").show();
          this.bShowNetworkError = true;
          break;
        case "NOT_SUPPORT":
          $("#sf-service-slideshow-notsup").show();
          this.bShowNotSupport = true;
          break;
        default:
          break
        }
      };
      this.hide = function (ar) {
        alert("[SlideShow][view] hide(" + (ar ? ar : "") + ")");
        if (typeof ar == "undefined") {
          $("#" + V).hide();
          return
        }
        switch (ar.toUpperCase()) {
        case "INFOBAR":
          $("#sf-service-slideshow-infobar").hide();
          break;
        case "HELPBAR":
          $("#sf-service-slideshow-helpbar").sfKeyHelp("hide");
          break;
        case "LOADING":
          $("#sf-service-slideshow-loading").sfLoading("hide");
          break;
        case "NETWORK_ERROR":
          $("#sf-service-slideshow-neterr").hide();
          this.bShowNetworkError = false;
          break;
        case "NOT_SUPPORT":
          $("#sf-service-slideshow-notsup").hide();
          this.bShowNotSupport = false;
          break;
        default:
          break
        }
      };
      this.showBars = function () {
        alert("[SlideShow][view] showBars()");
        this.show("infobar");
        this.show("helpbar");
        an.setHideTimer()
      };
      this.hideBars = function () {
        alert("[SlideShow][view] hideBars()");
        this.hide("infobar");
        this.hide("helpbar");
        an.clearHideTimer()
      };
      this.toggleBars = function () {
        alert("[SlideShow][view] toggleBars()");
        am ? this.hideBars() : this.showBars()
      };
      this.setHideTimer = function () {
        alert("[SlideShow][view] setHideTimer()");
        an.clearHideTimer();
        am = setTimeout(function () {
          an.hideBars();
          am = null
        }, ao)
      };
      this.clearHideTimer = function () {
        alert("[SlideShow][view] clearHideTimer()");
        if (am) {
          clearTimeout(am);
          am = null
        }
      };
      this.setZIndex = function (ar) {
        alert("[SlideShow][view] setZIndex(" + ar + ")");
        $("#" + V).css("z-index", ar)
      };
      this.refresh = function (ar, at) {
        alert("[SlideShow][view] refresh(" + (ar ? ar : "") + "," + (at ? at : "") + ")");
        switch (ar.toUpperCase()) {
        case "INFOBAR":
          $.each(at, function (au, aw) {
            switch (au.toUpperCase()) {
            case "STATE":
              var av = $("#sf-service-slideshow-infobar-state");
              switch (aw.toUpperCase()) {
              case "PLAY":
                av.removeClass(aq).addClass(ap);
                break;
              case "PAUSE":
                av.removeClass(ap).addClass(aq);
                break;
              default:
                break
              }
              break;
            case "SPEED":
              $("#sf-service-slideshow-infobar-speed").html(aw);
              break;
            case "FILENAME":
              $("#sf-service-slideshow-infobar-filename").html(aw);
              break;
            case "RESOLUTION":
              $("#sf-service-slideshow-infobar-resolution").html(aw);
              break;
            case "DATE":
              $("#sf-service-slideshow-infobar-date").html(aw);
              break;
            case "INDEX":
              $("#sf-service-slideshow-infobar-index").html(aw);
              break
            }
          });
          break;
        case "HELPBAR":
          $("#sf-service-slideshow-helpbar").sfKeyHelp(at);
          break;
        default:
          break
        }
      };
      var ap = "sf-service-slideshow-infobar-state-play";
      var aq = "sf-service-slideshow-infobar-state-pause"
    }
  }
})(sf);
(function (j) {
  var a = {
    PL_APPCOMMON_MESSAGE_XML_INPUT: 46,
    pluginAppCommon: null
  };
  j.service.SmartRemote = {
    init: function (s) {
    },
    destroy: function () {
    },
    parse: function (u) {
    },
    sendSourceItem: function (s, w) {
    },
    sendMenuItem: function (s) {
    },
    showPopup: function (s) {
    },
    hidePopup: function () {
    },
    showLoading: function (s) {
    },
    hideLoading: function () {
    },
    readFile: function (t) {
    },
    webControl: function (t) {
    }
  };
})(sf);
(function (m) {
  m.service.USB = {
    handleUSBEvent: function (Q) {
      I()
    },
    show: function (R) {
      $.each(R, function (T, U) {
        if (typeof g[T] == "function") {
          if (typeof U == "string") {
            U = U.toLowerCase()
          }
          g[T](U)
        }
      });
      
      //LDW>    	
      if (window._browser == "designer") {
      	var elems = document.querySelectorAll("div[data-role='dtvUSB']");
      	for (var i = 0; i < elems.length; i++) {
      		initUSBForDesigner($(elems[i]));
      	}
      	return true;
      }
      
      K = document.querySelectorAll("#sf-service-usb").length > 0 ? true : false;
      
      if (!K) {
        c()
      }
      var S = {
        zIndex: 100,
      };
      /*
      opts = $.extend(S, R);
      $("#sf-service-usb-bg-dim").css({
        "z-index": Number(opts.zIndex)
      });
      $("#sf-service-usb").css({
        "z-index": Number(opts.zIndex) + 10
      });
      */
      //LDW> F();
      var Q = deviceapis.application.getPopupOpacity();
      alert("Popup opacity: " + Q);
      if (Q > 0 && Q <= 1) {
        $("#sf-service-usb-bg-up-l-alpha").css({
          opacity: Q
        });
        $("#sf-service-usb-bg-up-c-alpha").css({
          opacity: Q
        });
        $("#sf-service-usb-bg-up-r-alpha").css({
          opacity: Q
        });
        $("#sf-service-usb-bg-mid-l-alpha").css({
          opacity: Q
        });
        $("#sf-service-usb-bg-mid-c-alpha").css({
          opacity: Q
        });
        $("#sf-service-usb-bg-mid-r-alpha").css({
          opacity: Q
        });
        $("#sf-service-usb-bg-bottom-l-alpha").css({
          opacity: Q
        });
        $("#sf-service-usb-bg-bottom-c-alpha").css({
          opacity: Q
        });
        $("#sf-service-usb-bg-bottom-r-alpha").css({
          opacity: Q
        })
      }
      nSize = 0;
      if (nSize <= 0) {
        view.selectedFile();
        view.initTextView();
        $(".sf-service-usb-focus").addClass("sf-service-usb-focus-position0");
        $("#sf-service-usb-item1-icon").attr("class", "sf-service-usb-item-icon-usbNone");
        $("#sf-service-usb-item1-icon").show();
        $("#sf-service-usb-item1-label").html("" + m.lang.SID_USB_IS_NOT_CONNECTED);
        $("#sf-service-usb-size").html("");
        $("#sf-service-usb-label").html("");
        $("#sf-service-usb-scroll").hide();
        $("#sf-service-usb-text-arrowUp").hide();
        $("#sf-service-usb-text-arrowDown").hide()
      } else {
        M(aFilepath);
        view.setTextView(n);
        H()
      }
      view.show();
    }
  };
  var K = false;
  var w = null;
  var b = null;
  var B = null;
  var l = null;
  var P = new Array("png", "jpg", "bmp", "gif");
  var D = new Array("txt", "gul");
  var J = new Array("avi", "wma", "mp4", "wmv");
  var N = new Array("mp3");
  var O = 1;
  var k = 0;
  var x = true;
  var r = 5;
  var q = 0;
  var h = 0;
  var f = 0;
  var a = 0;
  var o = false;
  var n = 1;
  var s = 1;
  var j = 0;
  var C = 0;
  var g = {
    callback: function (Q) {
      if (typeof Q == "function") {
        B = Q
      } else {
        alert("[AF usb] value must be a Function.")
      }
    },
    fileType: function (Q) {
      if (typeof Q == "string") {
        if (Q == "image") {
          b = "image"
        } else {
          if (Q == "text") {
            b = "text"
          } else {
            if (Q == "video") {
              b = "video"
            } else {
              if (Q == "music") {
                b = "music"
              } else {
                if (Q == "all") {
                  b = "all"
                } else {
                  alert("[AF usb] Not Supported type")
                }
              }
            }
          }
        }
      } else {
        if (typeof Q == "object") {
          b = "other";
          l = Q
        } else {
          alert("[AF usb] Not Supported string/Array type")
        }
      }
    }
  };
  function c() {
    mountPath = null;
    dirPath = null;
    defaultDir = null;
    aOnReturn = new Array();
    fs = new FileSystem();
    object = null;
    aObjectList = new Array();
    aUsbNum = new Array();
    aFilepath = new Array();
    view = new L();
    /*LDW>
    np = m.core.plugin("NNavi");
    if (np) {
      var Q = np.GetFirmware();
      if ("T-INFOLINK2011-9999" < Q) {
        o = true
      }
    }
    */
    $('<a href="javascript:void(0);" id="' + u + '"></a>').appendTo(view.elem);
    x = true
  }
  function F() {
    sp = m.core.plugin("Storage");
    sp.OnMessage = sfUsbEvent;
    sp.SubscribeEvent(O);
    sp.SubscribeEvent(k);
    nSize = sp.GetUSBListSize();
    var U = 0;
    alert("[AF usb] GetUSBListSize :" + nSize);
    for (var S = 0; S < nSize; S++) {
      var Q = sp.GetUSBDeviceID(S);
      var V = sp.GetUSBPartitionNum(Q);
      for (var R = 0; R < V; R++) {
        var T = R + 1;
        aUsbNum[U] = {};
        if (V >= 2) {
          aUsbNum[U].DeviceName = sp.GetUSBModelName(Q) + "&nbsp;&nbsp;(" + T + ")"
        } else {
          aUsbNum[U].DeviceName = sp.GetUSBModelName(Q)
        }
        aUsbNum[U].mountPath = sp.GetUSBMountPath(Q, R);
        alert("[AF USB] aUsbNum[" + U + "].mountPath : " + aUsbNum[U].mountPath);
        aUsbNum[U].availSize = sp.GetUSBAvailSize(Q, R);
        aUsbNum[U].totalSize = sp.GetUSBTotalSize(Q, R);
        U++
      }
    }
  }
  function I() {
    F();
    if (nSize <= 0) {
      q = nSize;
      for (var S = 1; S <= r; S++) {
        $("#sf-service-usb-item" + S + "-label").html("");
        $("#sf-service-usb-item" + S + "-icon").hide()
      }
      $("#sf-service-usb-item1-label").html("" + m.lang.SID_USB_IS_NOT_CONNECTED);
      $("#sf-service-usb-item1-icon").attr("class", "sf-service-usb-item-icon-usbNone");
      $("#sf-service-usb-item1-icon").show();
      $("#sf-service-usb-label").html("");
      $("#sf-service-usb-size").html("");
      $("#sf-service-usb-label").html("")
    } else {
      if (q != nSize) {
        if (nSize <= 0) {
          for (var S = 1; S <= r; S++) {
            $("#sf-service-usb-item" + S + "-label").html("");
            $("#sf-service-usb-item" + S + "-icon").hide()
          }
          $("#sf-service-usb-item1-label").html("" + m.lang.SID_USB_IS_NOT_CONNECTED);
          $("#sf-service-usb-item1-icon").attr("class", "sf-service-usb-item-icon-usbNone");
          $("#sf-service-usb-item1-icon").show();
          $("#sf-service-usb-label").html("");
          $("#sf-service-usb-size").html("");
          $("#sf-service-usb-label").html("")
        } else {
          for (var S = 1; S <= r; S++) {
            $("#sf-service-usb-item" + S + "-label").html("");
            $("#sf-service-usb-item" + S + "-icon").hide()
          }
          q = nSize;
          aUsbNum = new Array();
          F();
          H();
          view.setTextView(s);
          var Q = aUsbNum[n - 1].totalSize / 1048576;
          var T = aUsbNum[n - 1].availSize / 1048576;
          var R = Q - T;
          if (o) {
            $("#sf-service-usb-size").html("" + R.toFixed(2) + "GB / " + Q.toFixed(2) + "GB")
          } else {
            $("#sf-service-usb-size").html("")
          }
        }
      }
    }
  }
  function M(S) {
    z = 0;
    if (x == true) {
      C = Math.ceil(aUsbNum.length / r);
      if (C <= 1) {
        $("#sf-service-usb-scroll").hide();
        $("#sf-service-usb-text-arrowUp").hide();
        $("#sf-service-usb-text-arrowDown").hide()
      } else {
        $("#sf-service-usb-scroll").show();
        p(C)
      }
    } else {
      alert("[AF usb] Path:" + S);
      var R = S.join("/");
      object = fs.readDir(R);
      var Q = new Array();
      var T = 0;
      var X = 0;
      for (var U = 0; U < object.length; U++) {
        if (object[U].isDir) {
          var W = new A(object[U], 0);
          if (T > 0) {
            if (aObjectList[T - 1].fileInfo.name != W.fileInfo.name) {
              aObjectList[T] = W;
              alert("[AF USB] ObjectList[" + T + "] : " + aObjectList[T].fileInfo.name);
              T++
            }
          } else {
            aObjectList[T] = W;
            alert("[AF USB] aObjectList[" + T + "] : " + aObjectList[T].fileInfo.name);
            T++
          }
        }
      }
      X = T;
      for (var U = 0; U < object.length; U++) {
        if (!object[U].isDir) {
          var W = new A(object[U], 0);
          var V = 0;
          if (aObjectList[T - 1].fileInfo.name != W.fileInfo.name) {
            if (W.fileInfo.name != undefined) {
              var Y = W.fileInfo.name.match(/\.(\w+)$/i);
              if (Y != null) {
                Y = Y[1].toLowerCase()
              }
              if (b == "image") {
                V = $.inArray(Y, P)
              } else {
                if (b == "text") {
                  V = $.inArray(Y, D)
                } else {
                  if (b == "video") {
                    V = $.inArray(Y, J)
                  } else {
                    if (b == "music") {
                      V = $.inArray(Y, N)
                    } else {
                      if (b == "other") {
                        V = $.inArray(Y, l)
                      } else {
                        if (b == "all") {
                          V = 1
                        }
                      }
                    }
                  }
                }
              }
              if (V >= 0) {
                aObjectList[X] = W;
                alert("[AF USB] aObjectList[" + X + "] : " + aObjectList[X].fileInfo.name);
                X++
              }
            }
          }
        }
      }
      C = Math.ceil((aObjectList.length - 1) / r);
      if (C <= 1) {
        $("#sf-service-usb-scroll").hide();
        $("#sf-service-usb-text-arrowUp").hide();
        $("#sf-service-usb-text-arrowDown").hide()
      } else {
        $("#sf-service-usb-scroll").show();
        p(C)
      }
    }
  }
  function p(T) {
    h = parseFloat($("#sf-service-usb-scroll").css("height"), 10);
    var S = parseFloat($("#sf-service-usb-scroll-body-top").css("height"), 10);
    var Q = parseFloat($("#sf-service-usb-scroll-body-bottom").css("height"), 10);
    f = h / T;
    var R = f - (S + Q);
    if (R <= 14) {
      R = 14
    }
    $("#sf-service-usb-scroll-body-middle").css({
      height: R
    });
    a = (h - (S + Q + R)) / (T - 1)
  }
  function A(R, Q) {
    this.fileInfo = R;
    this.checkinfo = Q
  }
  function initUSBForDesigner(elem) {
  	elem.show();
  	if (elem.find("#sf-service-usb").length != 0) return;
  	if (elem.parent().css("display") == "none") return;
  	
    elem.html(['<div id="sf-service-usb-bg-dim"></div><div id="sf-service-usb" data-role="temp"><div id="sf-service-usb-bg"><div id="sf-service-usb-bg-up-l-alpha"></div><div id="sf-service-usb-bg-up-c-alpha"></div><div id="sf-service-usb-bg-up-r-alpha"></div><div id="sf-service-usb-bg-mid-l-alpha"></div><div id="sf-service-usb-bg-mid-c-alpha"></div><div id="sf-service-usb-bg-mid-r-alpha"></div><div id="sf-service-usb-bg-bottom-l-alpha"></div><div id="sf-service-usb-bg-bottom-c-alpha"></div><div id="sf-service-usb-bg-bottom-r-alpha"></div><div id="sf-service-usb-bg-up-l"></div><div id="sf-service-usb-bg-up-c"></div><div id="sf-service-usb-bg-up-r"></div><div id="sf-service-usb-bg-mid-l"></div><div id="sf-service-usb-bg-mid-c"></div><div id="sf-service-usb-bg-mid-r"></div><div id="sf-service-usb-bg-bottom-l"></div><div id="sf-service-usb-bg-bottom-c"></div><div id="sf-service-usb-bg-bottom-r"></div><div id="sf-service-usb-title">' + m.lang.SID_USB + '</div><div id="sf-service-usb-size"></div><div id="sf-service-usb-label"></div><div id="sf-service-usb-bg-line"></div><div class="sf-service-usb-okbutton-l"></div><div class="sf-service-usb-okbutton-c">' + m.lang.SID_OK + '</div><div class="sf-service-usb-okbutton-r"></div><div class="sf-service-usb-cancelbutton-l"></div><div class="sf-service-usb-cancelbutton-c">' + m.lang.SID_CANCEL + '</div><div class="sf-service-usb-cancelbutton-r"></div><div id="sf-service-usb-keyhelp"></div><div class="sf-service-usb-text"><div id="sf-service-usb-text-arrowUp"></div><div id="sf-service-usb-text-arrowDown"></div><div id="sf-service-usb-text-top-l"></div><div id="sf-service-usb-text-top-c"></div><div id="sf-service-usb-text-top-r"></div><div id="sf-service-usb-text-mid-l"></div><div id="sf-service-usb-text-mid-c"></div><div id="sf-service-usb-text-mid-r"></div><div id="sf-service-usb-text-bottom-l"></div><div id="sf-service-usb-text-bottom-c"></div><div id="sf-service-usb-text-bottom-r"></div><div class="sf-service-usb-focus"><div id="sf-service-usb-focus-l"></div><div id="sf-service-usb-focus-c"></div><div id="sf-service-usb-focus-r"></div></div><div id="sf-service-usb-item-label-length"></div><div id="sf-service-usb-item1"><div id="sf-service-usb-item1-checkbox"></div><div id="sf-service-usb-item1-icon"></div><div id="sf-service-usb-item1-label"></div></div><div id="sf-service-usb-item2"><div id="sf-service-usb-item2-checkbox"></div><div id="sf-service-usb-item2-icon"></div><div id="sf-service-usb-item2-label"></div></div><div id="sf-service-usb-item3"><div id="sf-service-usb-item3-checkbox"></div><div id="sf-service-usb-item3-icon"></div><div id="sf-service-usb-item3-label"></div></div><div id="sf-service-usb-item4"><div id="sf-service-usb-item4-checkbox"></div><div id="sf-service-usb-item4-icon"></div><div id="sf-service-usb-item4-label"></div></div><div id="sf-service-usb-item5"><div id="sf-service-usb-item5-checkbox"></div><div id="sf-service-usb-item5-icon"></div><div id="sf-service-usb-item5-label"></div></div><div id="sf-service-usb-scroll"><div id="sf-service-usb-scroll-bg"><div id="sf-service-usb-scroll-bg-top"></div><div id="sf-service-usb-scroll-bg-middle"></div><div id="sf-service-usb-scroll-bg-bottom"></div></div><div id="sf-service-usb-scroll-body"><div id="sf-service-usb-scroll-body-top"></div><div id="sf-service-usb-scroll-body-middle"></div><div id="sf-service-usb-scroll-body-bottom"></div></div></div></div></div></div>'].join(""));
    $("#"+elem.attr("id") + " #sf-service-usb-keyhelp").sfKeyHelp({
      iconset: "GRAY",
      move: m.lang.SID_MOVE,
      enter: m.lang.SID_SELECT,
      "return": m.lang.SID_RETURN
    });
    
    var elem_id = elem.attr("id");
    $("#"+elem_id + " #sf-service-usb-item" + (e + 1) + "-label").css({
        color: "#ffba19"
    });
    $("#"+elem_id + " .sf-service-usb-focus").addClass("sf-service-usb-focus-position0");
    $("#"+elem_id + " #sf-service-usb-item1-icon").attr("class", "sf-service-usb-item-icon-usbNone");
    $("#"+elem_id + " #sf-service-usb-item1-icon").show();
    $("#"+elem_id + " #sf-service-usb-item1-label").html("" + m.lang.SID_USB_IS_NOT_CONNECTED);
    $("#"+elem_id + " #sf-service-usb-size").html("");
    $("#"+elem_id + " #sf-service-usb-label").html("");
    $("#"+elem_id + " #sf-service-usb-scroll").hide();
    $("#"+elem_id + " #sf-service-usb-text-arrowUp").hide();
    $("#"+elem_id + " #sf-service-usb-text-arrowDown").hide()
	
    if (elem.attr("data-visible") == "hide") elem.hide();
    
    //compSetAttrUSB(elem);
  } 
  function L() {
    $('<div id="sf-service-usb"></div>').html(['<div id="sf-service-usb-bg-dim"></div><div id="sf-service-usb-bg"><div id="sf-service-usb-bg-up-l-alpha"></div><div id="sf-service-usb-bg-up-c-alpha"></div><div id="sf-service-usb-bg-up-r-alpha"></div><div id="sf-service-usb-bg-mid-l-alpha"></div><div id="sf-service-usb-bg-mid-c-alpha"></div><div id="sf-service-usb-bg-mid-r-alpha"></div><div id="sf-service-usb-bg-bottom-l-alpha"></div><div id="sf-service-usb-bg-bottom-c-alpha"></div><div id="sf-service-usb-bg-bottom-r-alpha"></div><div id="sf-service-usb-bg-up-l"></div><div id="sf-service-usb-bg-up-c"></div><div id="sf-service-usb-bg-up-r"></div><div id="sf-service-usb-bg-mid-l"></div><div id="sf-service-usb-bg-mid-c"></div><div id="sf-service-usb-bg-mid-r"></div><div id="sf-service-usb-bg-bottom-l"></div><div id="sf-service-usb-bg-bottom-c"></div><div id="sf-service-usb-bg-bottom-r"></div><div id="sf-service-usb-title">' + m.lang.SID_USB + '</div><div id="sf-service-usb-size"></div><div id="sf-service-usb-label"></div><div id="sf-service-usb-bg-line"></div><div class="sf-service-usb-okbutton-l"></div><div class="sf-service-usb-okbutton-c">' + m.lang.SID_OK + '</div><div class="sf-service-usb-okbutton-r"></div><div class="sf-service-usb-cancelbutton-l"></div><div class="sf-service-usb-cancelbutton-c">' + m.lang.SID_CANCEL + '</div><div class="sf-service-usb-cancelbutton-r"></div><div id="sf-service-usb-keyhelp"></div><div class="sf-service-usb-text"><div id="sf-service-usb-text-arrowUp"></div><div id="sf-service-usb-text-arrowDown"></div><div id="sf-service-usb-text-top-l"></div><div id="sf-service-usb-text-top-c"></div><div id="sf-service-usb-text-top-r"></div><div id="sf-service-usb-text-mid-l"></div><div id="sf-service-usb-text-mid-c"></div><div id="sf-service-usb-text-mid-r"></div><div id="sf-service-usb-text-bottom-l"></div><div id="sf-service-usb-text-bottom-c"></div><div id="sf-service-usb-text-bottom-r"></div><div class="sf-service-usb-focus"><div id="sf-service-usb-focus-l"></div><div id="sf-service-usb-focus-c"></div><div id="sf-service-usb-focus-r"></div></div><div id="sf-service-usb-item-label-length"></div><div id="sf-service-usb-item1"><div id="sf-service-usb-item1-checkbox"></div><div id="sf-service-usb-item1-icon"></div><div id="sf-service-usb-item1-label"></div></div><div id="sf-service-usb-item2"><div id="sf-service-usb-item2-checkbox"></div><div id="sf-service-usb-item2-icon"></div><div id="sf-service-usb-item2-label"></div></div><div id="sf-service-usb-item3"><div id="sf-service-usb-item3-checkbox"></div><div id="sf-service-usb-item3-icon"></div><div id="sf-service-usb-item3-label"></div></div><div id="sf-service-usb-item4"><div id="sf-service-usb-item4-checkbox"></div><div id="sf-service-usb-item4-icon"></div><div id="sf-service-usb-item4-label"></div></div><div id="sf-service-usb-item5"><div id="sf-service-usb-item5-checkbox"></div><div id="sf-service-usb-item5-icon"></div><div id="sf-service-usb-item5-label"></div></div><div id="sf-service-usb-scroll"><div id="sf-service-usb-scroll-bg"><div id="sf-service-usb-scroll-bg-top"></div><div id="sf-service-usb-scroll-bg-middle"></div><div id="sf-service-usb-scroll-bg-bottom"></div></div><div id="sf-service-usb-scroll-body"><div id="sf-service-usb-scroll-body-top"></div><div id="sf-service-usb-scroll-body-middle"></div><div id="sf-service-usb-scroll-body-bottom"></div></div></div></div></div>'].join("")).appendTo("body");
    //$('<div id="sf-service-usb-bg-dim"></div>').appendTo("body");
    $("#sf-service-usb-item1-checkbox").sfCheckBox();
    $("#sf-service-usb-item2-checkbox").sfCheckBox();
    $("#sf-service-usb-item3-checkbox").sfCheckBox();
    $("#sf-service-usb-item4-checkbox").sfCheckBox();
    $("#sf-service-usb-item5-checkbox").sfCheckBox();
    $("#sf-service-usb-keyhelp").sfKeyHelp({
      iconset: "GRAY",
      move: m.lang.SID_MOVE,
      enter: m.lang.SID_SELECT,
      "return": m.lang.SID_RETURN
    });
    /*LDW>
    $("#sf-service-usb").css({
      top: (window.outerHeight - $("#sf-service-usb").height()) / 2 + "px",
      left: (window.outerWidth - $("#sf-service-usb").width()) / 2 + "px"
    });
    */
    
    this.show = function () {
      var Q = m.scene._isSceneArchUsed();
      if (m.scene._isSceneArchUsed()) {
        w = m.scene.pushKeyHandler(function () {
          m.service.USB.handleKeydown()
        }, {
          context: "sf.service.USB"
        })
      } else {
        $("#" + u).focus()
      }
      $("#sf-service-usb-item" + (e + 1) + "-label").css({
        color: "#ffba19"
      });
      $(".sf-service-usb-focus").show();
      /*LDW> 
      $("#sf-service-usb").show();
      $("#sf-service-usb-bg-dim").show()
      */
      $("#sf-service-usb").show();
    };
    this.hide = function () {
      aFilepath = new Array();
      aUsbNum = new Array();
      x = true;
      j = 0;
      $(".sf-service-usb-focus").removeClass("sf-service-usb-focus-position" + e);
      $("#sf-service-usb-item" + (e + 1) + "-label").css({
        color: "#ffffff"
      });
      $("#sf-service-usb-size").html("");
      $("#sf-service-usb-label").html("");
      $(".sf-service-usb-okbutton-l").removeClass("sf-service-usb-button-focus-1");
      $(".sf-service-usb-okbutton-c").removeClass("sf-service-usb-button-focus-c");
      $(".sf-service-usb-okbutton-r").removeClass("sf-service-usb-button-focus-r");
      $(".sf-service-usb-cancelbutton-l").removeClass("sf-service-usb-button-focus-1");
      $(".sf-service-usb-cancelbutton-c").removeClass("sf-service-usb-button-focus-c");
      $(".sf-service-usb-cancelbutton-r").removeClass("sf-service-usb-button-focus-r");
      for (var Q = 0; Q < aObjectList.length; Q++) {
        aObjectList[Q].checkinfo = 0
      }
      /*LDW> 
      $("#sf-service-usb").hide();
      $("#sf-service-usb-bg-dim").hide()
      */
      $("#sf-service-usb").hide();
    };
    this.setTextView = function (W) {
      view.selectedFile();
      var Q = W + r;
      var S;
      if (x == true) {
        $("#sf-service-usb-label").html("");
        if (Q > aUsbNum.length) {
          Q = aUsbNum.length + 1
        }
        for (var U = (W - 1); U < Q - 1; U++) {
          S = (U % r) + 1;
          $("#sf-service-usb-item" + S + "-icon").attr("class", "sf-service-usb-item-icon-usb");
          $("#sf-service-usb-item" + S + "-icon").show();
          var R = aUsbNum[n - 1].totalSize / 1048576;
          var V = aUsbNum[n - 1].availSize / 1048576;
          var T = R - V;
          if (o) {
            $("#sf-service-usb-size").html("" + T.toFixed(2) + "GB / " + R.toFixed(2) + "GB")
          } else {
            $("#sf-service-usb-size").html("")
          }
          $("#sf-service-usb-label").html("" + aUsbNum[n - 1].DeviceName);
          $("#sf-service-usb-item" + S + "-label").html("" + aUsbNum[U].DeviceName)
        }
      } else {
        if (Q > aObjectList.length) {
          Q = aObjectList.length
        }
        for (var U = W; U < Q; U++) {
          S = U % r;
          if (S == 0) {
            S = r
          }
          if (aObjectList[U].fileInfo.isDir) {
            $("#sf-service-usb-item" + S + "-checkbox").sfCheckBox("hide");
            if (aObjectList[U].fileInfo.name == "..") {
              $("#sf-service-usb-item" + S + "-icon").attr("class", "sf-service-usb-item-icon-upFolder")
            } else {
              $("#sf-service-usb-item" + S + "-icon").attr("class", "sf-service-usb-item-icon-folder")
            }
            $("#sf-service-usb-item" + S + "-icon").show()
          } else {
            $("#sf-service-usb-item" + S + "-checkbox").sfCheckBox("show");
            if (aObjectList[U].checkinfo == 1) {
              $("#sf-service-usb-item" + S + "-checkbox").sfCheckBox("check")
            } else {
              $("#sf-service-usb-item" + S + "-checkbox").sfCheckBox("uncheck")
            }
            view.setIcon(S, aObjectList[U].fileInfo.name);
            $("#sf-service-usb-item" + S + "-icon").show()
          }
          if (aObjectList[U].fileInfo.name == "..") {
            $("#sf-service-usb-item" + S + "-label").html("" + m.lang.SID_UPPER_FOLDER)
          } else {
            $("#sf-service-usb-item" + S + "-label").html("" + aObjectList[U].fileInfo.name)
          }
          $("#sf-service-usb-item" + S + "-label").addClass("sf-service-usb-item-label-ellipsis")
        }
      }
      if (C == 1) {
        $("#sf-service-usb-text-arrowUp").hide();
        $("#sf-service-usb-text-arrowDown").hide()
      } else {
        if (E == 1 && C != 1) {
          $("#sf-service-usb-text-arrowUp").hide();
          $("#sf-service-usb-text-arrowDown").show()
        } else {
          if (E == C) {
            $("#sf-service-usb-text-arrowUp").show();
            $("#sf-service-usb-text-arrowDown").hide()
          } else {
            $("#sf-service-usb-text-arrowDown").show();
            $("#sf-service-usb-text-arrowUp").show()
          }
        }
      }
    };
    this.moveScroll = function (Q) {
      if (Q == "prev") {
        z = z - a;
        $("#sf-service-usb-scroll-body").css({
          top: z
        });
        if (z < 0) {
          $("#sf-service-usb-scroll-body").css({
            top: "0"
          })
        }
      } else {
        if (Q == "next") {
          z = z + a;
          $("#sf-service-usb-scroll-body").css({
            top: z
          });
          if (z >= h) {
            z = z - a
          }
        }
      }
    };
    this.setIcon = function (S, W) {
      var Q = W.match(/\.(\w+)$/i);
      var V = 0;
      var U = 0;
      var R = 0;
      var T = 0;
      if (Q != null) {
        Q = Q[1].toLowerCase();
        V = $.inArray(Q, P);
        U = $.inArray(Q, D);
        R = $.inArray(Q, J);
        T = $.inArray(Q, N);
        if (V >= 0) {
          $("#sf-service-usb-item" + S + "-icon").attr("class", "sf-service-usb-item-icon-image")
        } else {
          if (U >= 0) {
            $("#sf-service-usb-item" + S + "-icon").attr("class", "sf-service-usb-item-icon-text")
          } else {
            if (R >= 0) {
              $("#sf-service-usb-item" + S + "-icon").attr("class", "sf-service-usb-item-icon-video")
            } else {
              if (T >= 0) {
                $("#sf-service-usb-item" + S + "-icon").attr("class", "sf-service-usb-item-icon-music")
              } else {
                alert("[AF usb] NOT found!!");
                $("#sf-service-usb-item" + S + "-icon").attr("class", "sf-service-usb-item-icon-File")
              }
            }
          }
        }
      } else {
        $("#sf-service-usb-item" + S + "-icon").attr("class", "sf-service-usb-item-icon-File")
      }
    };
    this.selectedFile = function () {
      j = 0;
      $("#sf-service-usb-label").html("");
      for (var Q = 0; Q < aObjectList.length; Q++) {
        if (aObjectList[Q].checkinfo == 1) {
          j++
        }
      }
      if (j == 0) {
        $("#sf-service-usb-label").html(m.lang.SID_MIX_FILE_SELECTED.replace(/\<\<A\>\>/g, "0"));
        $("#sf-service-usb-keyhelp").sfKeyHelp({
          iconset: "GRAY",
          move: m.lang.SID_MOVE,
          enter: m.lang.SID_SELECT,
          "return": m.lang.SID_RETURN
        })
      } else {
        if (j != 0) {
          $("#sf-service-usb-keyhelp").sfKeyHelp({
            iconset: "GRAY",
            red: m.lang.SID_DESELECT_ALL,
            move: m.lang.SID_MOVE,
            enter: m.lang.SID_SELECT,
            "return": m.lang.SID_RETURN
          });
          if (j == 1) {
            $("#sf-service-usb-label").html(m.lang.SID_MIX_FILE_SELECTED.replace(/\<\<A\>\>/g, "1"))
          } else {
            $("#sf-service-usb-label").html(m.lang.SID_MIX_FILES_SELECTED_MSG.replace(/\<\<A\>\>/g, j))
          }
        }
      }
    };
    this.initTextView = function () {
      y = true;
      G = true;
      $("#sf-service-usb-scroll-body").css({
        top: "0"
      });
      $("#sf-service-usb-label").html("");
      for (var Q = 1; Q <= r; Q++) {
        $("#sf-service-usb-item" + Q + "-label").html("");
        $("#sf-service-usb-item" + Q + "-label").css({
          color: "#ffffff"
        });
        $("#sf-service-usb-item" + Q + "-checkbox").sfCheckBox("hide");
        $("#sf-service-usb-item" + Q + "-icon").hide();
        $(".sf-service-usb-focus").removeClass("sf-service-usb-focus-position" + (Q - 1))
      }
    };
    this.setCheckbox = function (Q) {
      if (aObjectList[n].checkinfo == 0) {
        $("#sf-service-usb-item" + (Q + 1) + "-checkbox").sfCheckBox("check");
        aObjectList[n].checkinfo = 1
      } else {
        if (aObjectList[n].checkinfo == 1) {
          $("#sf-service-usb-item" + (Q + 1) + "-checkbox").sfCheckBox("uncheck");
          aObjectList[n].checkinfo = 0
        }
      }
    }
  }
  var u = "sf-service-usb";
  var t = {};
  var e = 0;
  var y = true;
  var G = true;
  var E = 1;
  var z = 0;
  m.service.USB.handleKeydown = function () {
    var X = event.keyCode;
    alert("[AF ui] sfPopup keyctl(" + X + ")");
    switch (X) {
    case m.key.LEFT:
      if (y == true) {
        $(".sf-service-usb-focus").hide();
        $("#sf-service-usb-item" + (e + 1) + "-label").removeClass("sf-service-usb-item-label-marquee");
        $("#sf-service-usb-item" + (e + 1) + "-label").addClass("sf-service-usb-item-label-ellipsis");
        document.getElementById("sf-service-usb-item" + (e + 1) + "-label").scrollLeft = 0;
        $("#sf-service-usb-item" + (e + 1) + "-label").css({
          color: "#ffffff"
        });
        $(".sf-service-usb-okbutton-l").addClass("sf-service-usb-button-focus-1");
        $(".sf-service-usb-okbutton-c").addClass("sf-service-usb-button-focus-c");
        $(".sf-service-usb-okbutton-r").addClass("sf-service-usb-button-focus-r");
        y = false
      } else {
        if (y == false) {
          $(".sf-service-usb-okbutton-l").removeClass("sf-service-usb-button-focus-1");
          $(".sf-service-usb-okbutton-c").removeClass("sf-service-usb-button-focus-c");
          $(".sf-service-usb-okbutton-r").removeClass("sf-service-usb-button-focus-r");
          $(".sf-service-usb-cancelbutton-l").removeClass("sf-service-usb-button-focus-1");
          $(".sf-service-usb-cancelbutton-c").removeClass("sf-service-usb-button-focus-c");
          $(".sf-service-usb-cancelbutton-r").removeClass("sf-service-usb-button-focus-r");
          $(".sf-service-usb-focus").show();
          var V = document.getElementById("sf-service-usb-item-label-length");
          var Q = V.offsetWidth;
          var S = parseFloat($("#sf-service-usb-item" + (e + 1) + "-label").css("width"), 10);
          if (Q >= S) {
            $("#sf-service-usb-item" + (e + 1) + "-label").removeClass("sf-service-usb-item-label-ellipsis");
            $("#sf-service-usb-item" + (e + 1) + "-label").addClass("sf-service-usb-item-label-marquee")
          }
          $(".sf-service-usb-focus").addClass("sf-service-usb-focus-position" + e);
          $("#sf-service-usb-item" + (e + 1) + "-label").css({
            color: "#ffba19"
          });
          G = true;
          y = true
        }
      }
      break;
    case m.key.RIGHT:
      if (y == true) {
        $(".sf-service-usb-focus").hide();
        $("#sf-service-usb-item" + (e + 1) + "-label").removeClass("sf-service-usb-item-label-marquee");
        $("#sf-service-usb-item" + (e + 1) + "-label").addClass("sf-service-usb-item-label-ellipsis");
        document.getElementById("sf-service-usb-item" + (e + 1) + "-label").scrollLeft = 0;
        $("#sf-service-usb-item" + (e + 1) + "-label").css({
          color: "#ffffff"
        });
        $(".sf-service-usb-okbutton-l").addClass("sf-service-usb-button-focus-1");
        $(".sf-service-usb-okbutton-c").addClass("sf-service-usb-button-focus-c");
        $(".sf-service-usb-okbutton-r").addClass("sf-service-usb-button-focus-r");
        y = false
      } else {
        if (y == false) {
          $(".sf-service-usb-focus").show();
          var V = document.getElementById("sf-service-usb-item-label-length");
          var Q = V.offsetWidth;
          var S = parseFloat($("#sf-service-usb-item" + (e + 1) + "-label").css("width"), 10);
          if (Q >= S) {
            $("#sf-service-usb-item" + (e + 1) + "-label").removeClass("sf-service-usb-item-label-ellipsis");
            $("#sf-service-usb-item" + (e + 1) + "-label").addClass("sf-service-usb-item-label-marquee")
          }
          $(".sf-service-usb-focus").addClass("sf-service-usb-focus-position" + e);
          $("#sf-service-usb-item" + (e + 1) + "-label").css({
            color: "#ffba19"
          });
          $(".sf-service-usb-okbutton-l").removeClass("sf-service-usb-button-focus-1");
          $(".sf-service-usb-okbutton-c").removeClass("sf-service-usb-button-focus-c");
          $(".sf-service-usb-okbutton-r").removeClass("sf-service-usb-button-focus-r");
          $(".sf-service-usb-cancelbutton-l").removeClass("sf-service-usb-button-focus-1");
          $(".sf-service-usb-cancelbutton-c").removeClass("sf-service-usb-button-focus-c");
          $(".sf-service-usb-cancelbutton-r").removeClass("sf-service-usb-button-focus-r");
          G = true;
          y = true
        }
      }
      break;
    case m.key.UP:
      if (y == true) {
        $(".sf-service-usb-focus").removeClass("sf-service-usb-focus-position" + e);
        $("#sf-service-usb-item" + (e + 1) + "-label").removeClass("sf-service-usb-item-label-marquee");
        $("#sf-service-usb-item" + (e + 1) + "-label").addClass("sf-service-usb-item-label-ellipsis");
        document.getElementById("sf-service-usb-item" + (e + 1) + "-label").scrollLeft = 0;
        $("#sf-service-usb-item" + (e + 1) + "-label").css({
          color: "#ffffff"
        });
        n--;
        if (nSize <= 0) {
          n = 1;
          e = 0
        } else {
          if (x == true || nSize <= 0 == -1) {
            if (n < 1) {
              n = 1
            } else {
              e--
            }
            var R = aUsbNum[n - 1].totalSize / 1048576;
            var W = aUsbNum[n - 1].availSize / 1048576;
            var U = R - W;
            if (o) {
              $("#sf-service-usb-size").html("" + U.toFixed(2) + "GB / " + R.toFixed(2) + "GB")
            } else {
              $("#sf-service-usb-size").html("")
            }
            $("#sf-service-usb-label").html("" + aUsbNum[n - 1].DeviceName);
            $("#sf-service-usb-item-label-length").html("" + aUsbNum[n - 1].DeviceName)
          } else {
            if (n < 1) {
              n = 1
            } else {
              e--
            }
            $("#sf-service-usb-item-label-length").html("" + aObjectList[n].fileInfo.name)
          }
        }
        if (e < 0) {
          s = s - r;
          if (s < 1) {
            s = 1
          }
          if (E <= 1) {
            E = 1;
            e = 0
          } else {
            E--;
            view.initTextView();
            view.setTextView(s);
            e = 4
          }
          view.moveScroll("prev")
        }
        $(".sf-service-usb-focus").addClass("sf-service-usb-focus-position" + e);
        var V = document.getElementById("sf-service-usb-item-label-length");
        var Q = V.offsetWidth;
        var S = parseFloat($("#sf-service-usb-item" + (e + 1) + "-label").css("width"), 10);
        if (Q >= S) {
          $("#sf-service-usb-item" + (e + 1) + "-label").removeClass("sf-service-usb-item-label-ellipsis");
          $("#sf-service-usb-item" + (e + 1) + "-label").addClass("sf-service-usb-item-label-marquee")
        }
        $(".sf-service-usb-focus").addClass("sf-service-usb-focus-position" + e);
        $("#sf-service-usb-item" + (e + 1) + "-label").css({
          color: "#ffba19"
        })
      } else {
        if (y == false) {
          if (G == true) {
            $(".sf-service-usb-okbutton-l").removeClass("sf-service-usb-button-focus-1");
            $(".sf-service-usb-okbutton-c").removeClass("sf-service-usb-button-focus-c");
            $(".sf-service-usb-okbutton-r").removeClass("sf-service-usb-button-focus-r");
            $(".sf-service-usb-cancelbutton-l").addClass("sf-service-usb-button-focus-1");
            $(".sf-service-usb-cancelbutton-c").addClass("sf-service-usb-button-focus-c");
            $(".sf-service-usb-cancelbutton-r").addClass("sf-service-usb-button-focus-r");
            G = false
          } else {
            if (G == false) {
              $(".sf-service-usb-okbutton-l").addClass("sf-service-usb-button-focus-1");
              $(".sf-service-usb-okbutton-c").addClass("sf-service-usb-button-focus-c");
              $(".sf-service-usb-okbutton-r").addClass("sf-service-usb-button-focus-r");
              $(".sf-service-usb-cancelbutton-l").removeClass("sf-service-usb-button-focus-1");
              $(".sf-service-usb-cancelbutton-c").removeClass("sf-service-usb-button-focus-c");
              $(".sf-service-usb-cancelbutton-r").removeClass("sf-service-usb-button-focus-r");
              G = true
            }
          }
        }
      }
      break;
    case m.key.DOWN:
      if (y == true) {
        $(".sf-service-usb-focus").removeClass("sf-service-usb-focus-position" + e);
        $("#sf-service-usb-item" + (e + 1) + "-label").removeClass("sf-service-usb-item-label-marquee");
        $("#sf-service-usb-item" + (e + 1) + "-label").addClass("sf-service-usb-item-label-ellipsis");
        document.getElementById("sf-service-usb-item" + (e + 1) + "-label").scrollLeft = 0;
        $("#sf-service-usb-item" + (e + 1) + "-label").css({
          color: "#ffffff"
        });
        n++;
        if (nSize <= 0) {
          n = 1;
          e = 0
        } else {
          if (x == true) {
            if (n > aUsbNum.length) {
              n = aUsbNum.length
            } else {
              e++
            }
            var R = aUsbNum[n - 1].totalSize / 1048576;
            var W = aUsbNum[n - 1].availSize / 1048576;
            var U = R - W;
            if (o) {
              $("#sf-service-usb-size").html("" + U.toFixed(2) + "GB / " + R.toFixed(2) + "GB")
            } else {
              $("#sf-service-usb-size").html("")
            }
            $("#sf-service-usb-label").html("" + aUsbNum[n - 1].DeviceName);
            $("#sf-service-usb-item-label-length").html("" + aUsbNum[n - 1].DeviceName)
          } else {
            if (n > aObjectList.length - 1) {
              n = aObjectList.length - 1
            } else {
              e++
            }
            $("#sf-service-usb-item-label-length").html("" + aObjectList[n].fileInfo.name)
          }
        }
        if (e > 4) {
          E++;
          if (E > C) {
            E = C;
            e = 4
          } else {
            view.initTextView();
            e = 0;
            s = s + r;
            view.setTextView(s)
          }
          view.moveScroll("next")
        }
        $(".sf-service-usb-focus").addClass("sf-service-usb-focus-position" + e);
        var V = document.getElementById("sf-service-usb-item-label-length");
        var Q = V.offsetWidth;
        var S = parseFloat($("#sf-service-usb-item" + (e + 1) + "-label").css("width"), 10);
        if (Q >= S) {
          $("#sf-service-usb-item" + (e + 1) + "-label").removeClass("sf-service-usb-item-label-ellipsis");
          $("#sf-service-usb-item" + (e + 1) + "-label").addClass("sf-service-usb-item-label-marquee")
        }
        $("#sf-service-usb-item" + (e + 1) + "-label").css({
          color: "#ffba19"
        })
      } else {
        if (y == false) {
          if (G == true) {
            $(".sf-service-usb-okbutton-l").removeClass("sf-service-usb-button-focus-1");
            $(".sf-service-usb-okbutton-c").removeClass("sf-service-usb-button-focus-c");
            $(".sf-service-usb-okbutton-r").removeClass("sf-service-usb-button-focus-r");
            $(".sf-service-usb-cancelbutton-l").addClass("sf-service-usb-button-focus-1");
            $(".sf-service-usb-cancelbutton-c").addClass("sf-service-usb-button-focus-c");
            $(".sf-service-usb-cancelbutton-r").addClass("sf-service-usb-button-focus-r");
            G = false
          } else {
            if (G == false) {
              $(".sf-service-usb-okbutton-l").addClass("sf-service-usb-button-focus-1");
              $(".sf-service-usb-okbutton-c").addClass("sf-service-usb-button-focus-c");
              $(".sf-service-usb-okbutton-r").addClass("sf-service-usb-button-focus-r");
              $(".sf-service-usb-cancelbutton-l").removeClass("sf-service-usb-button-focus-1");
              $(".sf-service-usb-cancelbutton-c").removeClass("sf-service-usb-button-focus-c");
              $(".sf-service-usb-cancelbutton-r").removeClass("sf-service-usb-button-focus-r");
              G = true
            }
          }
        }
      }
      break;
    case m.key.ENTER:
      if (y == true) {
        if (x == true) {
          if (nSize <= 0) {
            alert("USB None")
          } else {
            alert("USB select");
            defaultDir = "$usb_DIR/" + aUsbNum[n - 1].mountPath;
            var R = aUsbNum[n - 1].totalSize / 1048576;
            var W = aUsbNum[n - 1].availSize / 1048576;
            var U = R - W;
            if (o) {
              $("#sf-service-usb-size").html("" + U.toFixed(2) + "GB / " + R.toFixed(2) + "GB")
            } else {
              $("#sf-service-usb-size").html("")
            }
            $("#sf-service-usb-label").html("" + aUsbNum[n - 1].DeviceName);
            aFilepath.push(defaultDir);
            x = false;
            H()
          }
        } else {
          if (n == 1) {
            if (aFilepath.join("") == defaultDir && aObjectList[n].fileInfo.isDir) {
              if (aObjectList[n].fileInfo.isDir) {
                if (aFilepath.join("") == defaultDir) {
                  aFilepath = new Array();
                  x = true
                } else {
                  aFilepath.push(aObjectList[n].fileInfo.name)
                }
                $(".sf-service-usb-focus").removeClass("sf-service-usb-focus-position" + e);
                $("#sf-service-usb-item" + (e + 1) + "-label").css({
                  color: "#ffffff"
                });
                H()
              }
            } else {
              if (aObjectList[n].fileInfo.isDir) {
                aFilepath.pop();
                $(".sf-service-usb-focus").removeClass("sf-service-usb-focus-position" + e);
                $("#sf-service-usb-item" + (e + 1) + "-label").css({
                  color: "#ffffff"
                });
                H()
              } else {
                view.setCheckbox(e);
                view.selectedFile()
              }
            }
          } else {
            if (aObjectList[n].fileInfo.isDir) {
              aFilepath.push(aObjectList[n].fileInfo.name);
              $(".sf-service-usb-focus").removeClass("sf-service-usb-focus-position" + e);
              $("#sf-service-usb-item" + (e + 1) + "-label").css({
                color: "#ffffff"
              });
              H()
            } else {
              view.setCheckbox(e);
              view.selectedFile()
            }
          }
        }
      } else {
        if (y == false) {
          if (G == true) {
            d();
            alert("[AF USB] OnReturn : " + aOnReturn);
            if (m.scene._isSceneArchUsed() && w) {
              m.scene.removeKeyHandler(w)
            } else {
              m.scene.returnFocus()
            }
            /*LDW>
            sp.UnsubscribeEvent(O);
            sp.UnsubscribeEvent(k);
            */
            view.hide();
            if (typeof(B) == "function") B(aOnReturn)
          } else {
            if (m.scene._isSceneArchUsed() && w) {
              m.scene.removeKeyHandler(w)
            } else {
              m.scene.returnFocus()
            }
            /*LDW>
            sp.UnsubscribeEvent(O);
            sp.UnsubscribeEvent(k);
            */
            view.hide();
            if (typeof(B) == "function") B(null)
          }
          aOnReturn = new Array()
        }
      }
      break;
    case m.key.RED:
      if (j != 0) {
        for (var T = 0; T < aObjectList.length; T++) {
          aObjectList[T].checkinfo = 0
        }
        for (var T = 1; T <= r; T++) {
          $("#sf-service-usb-item" + T + "-checkbox").sfCheckBox("uncheck")
        }
        j = 0;
        view.selectedFile()
      }
      break;
    case m.key.RETURN:
    case m.key.EXIT:
      if (m.scene._isSceneArchUsed() && w) {
        m.scene.removeKeyHandler(w)
      } else {
        m.scene.returnFocus()
      }
      m.key.preventDefault();
      /*LDW>
      sp.UnsubscribeEvent(O);
      sp.UnsubscribeEvent(k);
      */
      view.hide();
      if (typeof(B) == "function") B(null);
      break
    }
  };
  function d() {
    for (var Q = 0; Q < aObjectList.length; Q++) {
      if (aObjectList[Q].checkinfo == 1) {
        var R = aFilepath.join("/");
        aOnReturn.push(R + "/" + aObjectList[Q].fileInfo.name);
        alert("[AF usb]aOnReturn:" + aOnReturn)
      }
    }
  }
  function H() {
    view.initTextView();
    aObjectList = new Array();
    M(aFilepath);
    n = 1;
    j = 0;
    s = 1;
    E = 1;
    e = 0;
    for (var Q = 0; Q < aObjectList.length; Q++) {
      aObjectList[Q].checkinfo = 0
    }
    $(".sf-service-usb-focus").addClass("sf-service-usb-focus-position" + e);
    $(".sf-service-usb-focus").show();
    $("#sf-service-usb-item" + (e + 1) + "-label").css({
      color: "#ffba19"
    });
    $("#sf-service-usb-keyhelp").sfKeyHelp("show");
    view.setTextView(s)
  }
})(sf);
function sfUsbEvent(a) {
  alert("sfUsbEvent(" + a + ")");
  sf.service.USB.handleUSBEvent(a)
}
(function (ax) {
  ax.service.FileBrowser = {
    show: function (bO) {
        console.log("[service.FileBrowser] Only available in TV or Monitor.");
    }
  };
})(sf);
(function (u) {
  u.service.Uploader = {
    ERROR_APIOPENFAILED: 1,
    ERROR_SOCKET_CREATE: 2,
    ERROR_GET_SERVER_IP: 3,
    ERROR_CONNECT: 4,
    ERROR_SEND: 5,
    ERROR_RECIEVE_TIMEOUT: 6,
    ERROR_INTERNAL: 7,
    upload: function (aa) {
        console.log("[service.Uploader] Only available in TV or Monitor.");
    }
  };
})(sf);
(function (r) {
  r.service = r.service || {};
  r.service.AudioPlayer = {
    STATE_PLAYING: 1,
    STATE_STOPPED: 2,
    STATE_PAUSED: 3,
    STATE_BUFFERING: 4,
    STATE_SKIP: 5,
    REPEAT_NO: 0,
    REPEAT_ALL: 1,
    REPEAT_CURRENT: 2,
    SHUFFLE_DISABLE: 0,
    SHUFFLE_ENABLE: 1,
    ERROR_NOERROR: 0,
    ERROR_NOTSUPPORTED: 1,
    ERROR_NETWORK: 2,
    init: function (t) {
      alert("[sf.service.AudioPlayer] init()");
      //LDW> l.init(t)
      
       if (window._browser == "designer") {
        var elems = document.querySelectorAll("div[data-role='dtvAudioPlayer']");
        for (var i = 0; i < elems.length; i++) {
        	initAudioPlayerForDesigner($(elems[i]));
        }
        return true;
      }
      
      initAudioPlayerForDesigner($("body"));

      this.isPlay = false;
      
      this.audio = null;
      try {
        this.audio = new Audio();
      } catch (x) {
        alert("EXCEPTION(AudioPlayer) : "+x);
      }
      
      function initAudioPlayerForDesigner(elem) {
		if (elem.find("#sf-service-audioplayer").length != 0) return;
  		if (elem.parent().css("display") == "none") return;
  		
  		var audio_elem = '<div id="sf-service-audioplayer"><div id="sf-service-audioplayer-controller" data-role="temp" style="width:100%;" waper_focus="false"><div class="main" waper_focus="false">'
      		+ '<div class="stateicon stop" waper_focus="false"></div><div class="repeaticon no" waper_focus="false"></div><div class="shuffleicon disable" waper_focus="false"></div>'
      		/*+ '<div class="playbacktimes" waper_focus="false"><div class="totaltime" waper_focus="false">00:00</div><div waper_focus="false">/</div><div class="currenttime" waper_focus="false">00:00</div></div>'*/
      		+ '<div class="progressbar" waper_focus="false"><div class="left" waper_focus="false"></div><div class="right" waper_focus="false"></div><div class="center" waper_focus="false"></div>'
      		+ '<div class="body" style="width:0%;" waper_focus="false"><div class="left" waper_focus="false"></div><div class="right" waper_focus="false"></div><div class="center" waper_focus="false"></div></div></div></div>'
      		+ '<div class="titlebar" waper_focus="false"><div class="title sf-ui-common-ellipsis" waper_focus="false"></div></div></div></div>';
      		
      	elem.append(audio_elem);
      	
      	if (window._browser == "designer") {
	        if (elem.attr("data-visible") == "hide") elem.hide();
	        else elem.show();
        }
  	  };
    },
    setPlayList: function (t) {
      if (window._browser == "designer") return;
      alert("[sf.service.AudioPlayer] setPlayList()");
      alert("Playlist: " + t);
      /*LDW>
      if (t && t.length) {
        k = t;
        b = 0;
        return true
      } else {
        return false
      }
      */
      this.playList = t;
    },
    getPlayingItem: function () {
      if (window._browser == "designer") return;
      /*LDW>
      if (k && k.length > 0) {
        return new this.PlayingItemInfo({
          index: b,
          item: k[b]
        })
      } else {
        return null
      }
      */
    },
    play: function (t) {
      if (window._browser == "designer") return;
      alert("[sf.service.AudioPlayer] play(" + t + ")");
      /*LDW>
      if (t.length > 0) {
        this.setPlayList([t]);
        b = 0
      } else {
        b = t
      }
      return l.play(b)
      */
      if (!this.isPlay && this.audio != null) {
          this.isPlay = true;
          /*
          var audio_elem = document.createElement("audio");
          audio_elem.src = this.playList[t].URL;
          audio_elem.innerHTML = "<b>Your browser does not support the audio tag.</b>";
          audio_elem.setAttribute("autoplay", "autoplay");
          audio_elem.addEventListener("ended", function() {
            document.querySelector("#sf-service-audioplayer-controller .stateicon").className = "stateicon stop";
            this.isPlay = false;
          });
          */
          this.audio.src = this.playList[t].URL;
          this.audio.play();
          var mine = this;
          this.audio.addEventListener("ended", function() {
            $("#sf-service-audioplayer #sf-service-audioplayer-controller .stateicon")[0].className = "stateicon stop";
            mine.isPlay = false;
            mine.audio.currentTime = 0;
          });
          
          $("#sf-service-audioplayer #sf-service-audioplayer-controller .title").html(this.playList[t].title);
          $("#sf-service-audioplayer #sf-service-audioplayer-controller .stateicon")[0].className = "stateicon play";
      }
    },
    pause: function () {
      alert("[sf.service.AudioPlayer] pause()");
      //LDW> return l.pause()
    },
    resume: function () {
      alert("[sf.service.AudioPlayer] resume()");
      //LDW> return l.resume()
    },
    stop: function () {
      if (window._browser == "designer") return;
      alert("[sf.service.AudioPlayer] stop()");
      //LDW> return l.stop()
      $("#sf-service-audioplayer #sf-service-audioplayer-controller .stateicon")[0].className = "stateicon stop";
      
      if (this.audio != null && this.isPlay) {
          this.audio.pause();
          this.audio.currentTime = 0;
          this.isPlay = false;
      }
    },
    next: function () {
      alert("[sf.service.AudioPlayer] next()");
      //LDW> return l.nextItem()
    },
    prev: function () {
      alert("[sf.service.AudioPlayer] prev()");
      //LDW> return l.prevItem()
    },
    setControllerArea: function (t) {
      if (window._browser == "designer") return;
      alert("[sf.service.AudioPlayer] setControllerArea()");
      /*LDW> 
      c.controllerarea = t;
      return o.setControlArea(c.controllerarea)
      */
      
      var audioplayer_elem = $("#sf-service-audioplayer");
      audioplayer_elem.css("top", t.top + "px");
      audioplayer_elem.css("left", t.left + "px");
      audioplayer_elem.css("width", t.width + "px");
      audioplayer_elem.css("height", t.height + "px");
    },
    getControllerArea: function () {
      alert("[sf.service.AudioPlayer] getControllerArea()");
      //LDW> return c.controllerarea
    },
    showController: function () {
      if (window._browser == "designer") return;
      alert("[sf.service.AudioPlayer] showController()");
      //LDW> return o.showController()
      $("#sf-service-audioplayer").show();
    },
    hideController: function () {
      if (window._browser == "designer") return;
      alert("[sf.service.AudioPlayer] hideController()");
      //LDW> return o.hideController()
      $("#sf-service-audioplayer").hide();
    },
    setRepeatMode: function (t) {
      alert("[sf.service.AudioPlayer] setRepeatMode(" + t + ")");
      //LDW> return l.setRepeatMode(t)
    },
    getRepeatMode: function () {
      alert("[sf.service.AudioPlayer] getRepeatMode()");
      //LDW> return l.getRepeatMode()
    },
    setShuffleMode: function (t) {
      alert("[sf.service.AudioPlayer] setShuffleMode(" + t + ")");
      //LDW> return l.setShuffleMode(t)
    },
    getShuffleMode: function () {
      alert("[sf.service.AudioPlayer] getShuffleMode()");
      //LDW> return l.getShuffleMode()
    },
    getState: function () {
      alert("[sf.service.AudioPlayer] getState()");
      //LDW> return l.getState()
    },
    setZIndex: function (t) {
      alert("[sf.service.AudioPlayer] setZIndex(" + t + ")");
      //LDW> return o.setZIndex(t)
    },
    getZIndex: function () {
      alert("[sf.service.AudioPlayer] getZIndex()");
      //LDW> return o.getZIndex()
    },
    getDuration: function () {
      alert("[sf.service.AudioPlayer] getDuration()");
      //LDW> return l.getDuration()
    },
    getCurrentTime: function () {
      alert("[sf.service.AudioPlayer] getCurrentTime()");
      //LDW> return l.getCurrentTime()
    },
    jumpTo: function (t) {
      alert("[sf.service.AudioPlayer] jumpTo(" + t + ")");
      //LDW> return l.jumpTo(t)
    },
    Skip: {
      start: function (t) {
        alert("[sf.AudioPlayer.Seek] start(" + t + ")");
        //LDW> return l.startSkip(t)
      },
      stop: function () {
        alert("[sf.AudioPlayer.Skip] stop()");
        //LDW> return l.stopSkip()
      },
      cancel: function () {
        alert("[sf.AudioPlayer.Skip] stop()");
        //LDW> return l.cancelSkip()
      },
      isInProgress: function () {
        //LDW> return l.isSkiping()
      }
    },
    PlayItem: function (u) {
      /*LDW>
      var t = {
        URL: "",
        title: ""
      };
      u = $.extend(t, u);
      this.className = "PlayItem";
      this.URL = u.URL;
      this.title = u.title;
      this.toString = function () {
        return "[object " + this.className + "] " + (this.title ? this.title + ", " : "") + this.URL
      }
      */
    },
    PlayingItemInfo: function (u) {
      /*LDW>
      var t = {
        index: "",
        item: null
      };
      u = $.extend(t, u);
      this.className = "PlayingItemInfo";
      this.index = u.index;
      this.item = u.item;
      this.toString = function () {
        return "[object " + this.className + "] index: " + this.index + ", item:" + (this.item)
      }
      */
    },
  };
  var q = "sf-service-audioplayer";
  var e = q + "-controller";
  var n = "";
  n += '<div id="' + e + '">';
  n += '<div class="main">';
  n += '<div class="stateicon"></div>';
  n += '<div class="repeaticon"></div>';
  n += '<div class="shuffleicon"></div>';
  n += '<div class="playbacktimes"><div class="totaltime"></div><div>/</div><div class="currenttime"></div></div>';
  n += '<div class="progressbar">';
  n += '<div class="left"></div><div class="right"></div><div class="center"></div>';
  n += '<div class="body">';
  n += '<div class="left"></div><div class="right"></div><div class="center"></div>';
  n += "</div>";
  n += "</div>";
  n += '<div class="skippointer"><div class="image"></div></div>';
  n += "</div>";
  n += '<div class="titlebar"><div class="title sf-ui-common-ellipsis"></div></div>';
  n += "</div>";
  var a = null;
  var d = null;
  var o = {
    zindex: 15,
    init: function () {
      alert("[AudioPlayer.View] init()");
      this.zindex = h;
      if (!document.getElementById(e)) {
        $("body").append(n);
        alert("Append controller...");
        a = document.getElementById(e) || null
      }
      this.setZIndex()
    },
    showController: function () {
      $(a).show()
    },
    hideController: function () {
      $(a).hide()
    },
    setControlArea: function (t) {
      alert("[AudioPlayer.View] setControlArea()");
      $(a).css({
        left: t.left + "px",
        top: t.top + "px",
        width: t.width + "px",
        height: t.height + "px"
      });
      var w = parseInt($(a).find(".titlebar .title").css("margin-left"), 10);
      var u = parseInt($(a).find(".titlebar .title").css("margin-left"), 10);
      $(a).find(".titlebar .title").width($(a).find(".titlebar").width() - (w + u))
    },
    setRepeatMode: function (u) {
      alert("[AudioPlayer.View] setRepeatMode(" + u + ")");
      var t = {};
      t[r.service.AudioPlayer.REPEAT_NO] = "repeaticon no";
      t[r.service.AudioPlayer.REPEAT_ALL] = "repeaticon all";
      t[r.service.AudioPlayer.REPEAT_CURRENT] = "repeaticon current";
      if (t[u]) {
        $(a).find(".repeaticon").attr("className", t[u])
      }
    },
    setShuffleMode: function (u) {
      alert("[AudioPlayer.View] setShuffleMode(" + u + ")");
      var t = {};
      t[r.service.AudioPlayer.SHUFFLE_ENABLE] = "shuffleicon";
      t[r.service.AudioPlayer.SHUFFLE_DISABLE] = "shuffleicon disable";
      if (t[u]) {
        $(a).find(".shuffleicon").attr("className", t[u])
      }
    },
    setCurrentTime: function (t) {
      alert("[AudioPlayer.View] setCurrentTime(" + t + ")");
      $(a).find(".currenttime").html(j(t))
    },
    setDuration: function (t) {
      alert("[AudioPlayer.View] setDuration(" + t + ")");
      $(a).find(".totaltime").html(j(t))
    },
    setProgressBar: function (t) {
      alert("[AudioPlayer.View] setProgressBar(" + t + ")");
      $(a).find(".progressbar .body").css("width", (t * 100).toFixed(2) + "%")
    },
    setState: function (u) {
      alert("[AudioPlayer.View] setState(" + u + ")");
      var t = {};
      t[r.service.AudioPlayer.STATE_BUFFERING] = "stateicon pause";
      t[r.service.AudioPlayer.STATE_PAUSED] = "stateicon pause";
      t[r.service.AudioPlayer.STATE_PLAYING] = "stateicon play";
      t[r.service.AudioPlayer.STATE_SKIP] = "stateicon pause";
      t[r.service.AudioPlayer.STATE_STOPPED] = "stateicon stop";
      if (t[u]) {
        $(a).find(".stateicon").attr("className", t[u])
      }
    },
    setTitle: function (t) {
      alert("[AudioPlayer.View] setTitle(" + t + ")");
      $(a).find(".title").html(t)
    },
    setZIndex: function (t) {
      alert("[AudioPlayer.View] setZIndex(" + t + ")");
      this.zindex = t;
      $(a).css("z-index", this.zindex)
    },
    getZIndex: function () {
      alert("[AudioPlayer.View] getZIndex()");
      alert("\treturns " + this.zindex);
      return this.zindex
    },
    showPointer: function (u) {
      alert("[AudioPlayer.View] showPointer(" + u + ")");
      var w = $(a).find(".progressbar").width();
      var t = parseInt($(a).find(".progressbar").css("margin-left"), 10);
      $(a).find(".skippointer").show().css("left", parseInt(t + w * u, 10) + "px");
      alert("set left : " + parseInt(w * u, 10) + "px")
    },
    hidePointer: function () {
      alert("[AudioPlayer.View] hidePointer()");
      $(a).find(".skippointer").hide()
    }
  };
  var h = 15;
  var k = null;
  var b = 0;
  var m = null;
  var g = {
    onstatechanged: null,
    onerror: null,
    onstarted: null,
    onended: null,
    onrepeatmodechanged: null,
    onshufflemodechanged: null,
    controllerarea: {
      left: 0,
      top: 300,
      width: 500,
      height: 50,
    },
    shufflemode: r.service.AudioPlayer.SHUFFLE_DISABLE,
    repeatmode: r.service.AudioPlayer.REPEAT_NO
  };
  var c = {};
  var s = r.service.AudioPlayer.STATE_STOPPED;
  var l = {
    init: function (u) {
      alert("[AudioPlayer.Ctrl] init()");
      c = $.extend(g, u);
      var t = this;
      deviceapis.avplay.getAVPlay(function (w) {
        m = w;
        t.AVPlay = m;
        var y = new SRect(0, 0, 0, 0);
        var x = {};
        x.displayRect = y;
        x.zIndex = h;
        x.bufferingCallback = {
          onbufferingstart: function () {
            t.AVPlayCallback.onBufferingStart()
          },
          onbufferingcomplete: function () {
            t.AVPlayCallback.onBufferingComplete()
          }
        };
        x.playCallback = {
          oncurrentplaytime: function (z) {
            t.AVPlayCallback.onCurrentPlayTime(z)
          },
          onstreamcompleted: function () {
            t.AVPlayCallback.onStreamCompleted()
          },
          onerror: function (z) {
            t.AVPlayCallback.onError(z)
          }
        };
        m.init(x)
      });
      o.init();
      o.setState(r.service.AudioPlayer.STATE_STOPPED);
      o.setDuration(0);
      o.setCurrentTime(0);
      o.setProgressBar(0);
      o.setTitle("");
      o.setRepeatMode(c.repeatmode);
      o.setShuffleMode(c.shufflemode)
    },
    play: function (t, y) {
      alert("[AudioPlayer.Ctrl] play(" + t + ", " + y + ")");
      if (!k || k.length <= 0) {
        alert("There's no playlist");
        return
      }
      var w = k[t];
      if (t < 0 || t > k.length || !w) {
        alert("There's no item specified");
        return
      }
      b = t;
      alert("Play: " + w);
      if (this.getState() == r.service.AudioPlayer.STATE_PLAYING) {
        this.stop()
      }
      if (w.title) {
        o.setTitle(w.title)
      }
      o.setProgressBar(0);
      o.setCurrentTime(0);
      o.setDuration(0);
      if (c.oncurrenttimeupdated && c.oncurrenttimeupdated instanceof Function) {
        try {
          c.oncurrenttimeupdated(this.curTime, this.duration)
        } catch (x) {
          alert("EXCEPTION(AudioPlayer oncurrenttimeupdated): " + x)
        }
      }
      var u = this;
      m.open(w.URL, {});
      m.play(function () {
        l.AVPlayCallback.onStreamInfoReady()
      }, function (z) {
        alert("[AudioPlayer] " + z);
        l.stop()
      }, y || 0);
      r.service.setVolumeControl(true);
      if (c.onstarted && c.onstarted instanceof Function) {
        try {
          c.onstarted(new r.service.AudioPlayer.PlayingItemInfo({
            index: t,
            item: w
          }))
        } catch (x) {
          alert("Exception(AudioPlayer onstarted): " + x)
        }
      }
    },
    stop: function () {
      alert("[AudioPlayer.Ctrl] stop()");
      var t = m.stop();
      if (t) {
        l.setState(r.service.AudioPlayer.STATE_STOPPED);
        r.service.setVolumeControl(false);
        o.setDuration(0);
        o.setCurrentTime(0);
        o.setProgressBar(0);
        o.setTitle("");
        o.setRepeatMode(c.repeatmode);
        o.setShuffleMode(c.shufflemode);
        if (c.oncurrenttimeupdated && c.oncurrenttimeupdated instanceof Function) {
          try {
            c.oncurrenttimeupdated(this.curTime, this.duration)
          } catch (u) {
            alert("EXCEPTION(AudioPlayer oncurrenttimeupdated): " + u)
          }
        }
        return true
      } else {
        alert("[AudioPlayer] Fail to Pause.");
        return false
      }
    },
    pause: function () {
      alert("[AudioPlayer.Ctrl] pause()");
      var t = m.pause();
      if (t) {
        l.setState(r.service.AudioPlayer.STATE_PAUSED);
        return true
      } else {
        alert("[AudioPlayer] Fail to Pause.");
        return false
      }
    },
    resume: function () {
      alert("[AudioPlayer.Ctrl] pause()");
      var t = m.resume();
      if (t) {
        l.setState(r.service.AudioPlayer.STATE_PLAYING);
        return true
      } else {
        alert("[AudioPlayer] Fail to Resume.");
        return false
      }
    },
    getDuration: function () {
      alert("[AudioPlayer.Ctrl] getDuration()");
      alert("\treturns " + this.duration);
      return parseInt(this.duration, 10)
    },
    getCurrentTime: function () {
      alert("[AudioPlayer.Ctrl] getCurrentTime()");
      alert("\treturns " + this.curTime);
      return parseInt(this.curTime, 10)
    },
    jumpTo: function (t) {
      alert("[AudioPlayer.Ctrl] jumpTo(" + t + ")");
      var u = parseInt((parseInt(t, 10) - this.getCurrentTime()) / 1000, 10);
      if (u > 0) {
        m.jumpForward(u)
      } else {
        if (u < 0) {
          m.jumpBackward(-u)
        }
      }
      return
    },
    setState: function (u) {
      alert("[AudioPlayer.Ctrl] setState(" + u + ")");
      var t = (s != u);
      s = u;
      o.setState(u);
      if (t && c.onstatechanged && c.onstatechanged instanceof Function) {
        try {
          c.onstatechanged(s)
        } catch (w) {
          alert("Exception(AudioPlayer onstatechanged): " + w)
        }
      }
    },
    setRepeatMode: function (u) {
      alert("[AudioPlayer.Ctrl] setRepeatMode(" + u + ")");
      c.repeatmode = u;
      o.setRepeatMode(c.repeatmode);
      if (c.onrepeatmodechanged && c.onrepeatmodechanged instanceof Function) {
        try {
          c.onrepeatmodechanged(c.repeatmode)
        } catch (t) {
          alert("EXCEPTION(AudioPlayer onrepeatmodechanged): " + t)
        }
      }
    },
    getRepeatMode: function () {
      alert("[AudioPlayer.Ctrl] getRepeatMode()");
      return c.repeatmode
    },
    setShuffleMode: function (t) {
      alert("[AudioPlayer.Ctrl] setShuffleMode(" + t + ")");
      c.shufflemode = t;
      o.setShuffleMode(c.shufflemode);
      if (c.onshufflemodechanged && c.onshufflemodechanged instanceof Function) {
        try {
          c.onshufflemodechanged(c.shufflemode)
        } catch (u) {
          alert("EXCEPTION(AudioPlayer onshufflemodechanged): " + u)
        }
      }
    },
    getShuffleMode: function () {
      alert("[AudioPlayer.Ctrl] getShuffleMode()");
      return c.shufflemode
    },
    getState: function () {
      alert("[AudioPlayer.Ctrl] getState()");
      alert("\treturns " + s);
      return s
    },
    nextItem: function () {
      alert("[AudioPlayer.Ctrl] nextItem()");
      if (k && k.length > 0) {
        if (c.shufflemode == r.service.AudioPlayer.SHUFFLE_ENABLE) {
          b = p(0, k.length - 1, b);
          this.play(b)
        } else {
          if (c.repeatmode == r.service.AudioPlayer.REPEAT_CURRENT) {
            this.play(b)
          } else {
            if (c.repeatmode == r.service.AudioPlayer.REPEAT_ALL) {
              b = (b + 1) % k.length;
              this.play(b)
            } else {
              if (c.repeatmode == r.service.AudioPlayer.REPEAT_NO) {
                b++;
                if (b >= k.length) {
                  b = k.length - 1;
                  this.stop()
                } else {
                  this.play(b)
                }
              }
            }
          }
        }
      }
    },
    prevItem: function () {
      alert("[AudioPlayer.Ctrl] prevItem()");
      if (k && k.length > 0) {
        if (c.shufflemode == r.service.AudioPlayer.SHUFFLE_ENABLE) {
          b = p(0, k.length - 1, b);
          this.play(b)
        } else {
          if (c.repeatmode == r.service.AudioPlayer.REPEAT_CURRENT) {
            this.play(b)
          } else {
            if (c.repeatmode == r.service.AudioPlayer.REPEAT_ALL) {
              b = (b - 1 + k.length) % k.length;
              this.play(b)
            } else {
              if (c.repeatmode == r.service.AudioPlayer.REPEAT_NO) {
                b--;
                if (b < 0) {
                  b = 0;
                  this.stop()
                } else {
                  this.play(b)
                }
              }
            }
          }
        }
      }
    },
    duration: 0,
    curTime: 0,
    AVPlayCallback: {
      onStreamInfoReady: function () {
        alert("[AudioPlayer] AVPlayCallback.onStreamInfoReady();");
        l.duration = m.duration;
        o.setDuration(l.duration);
        l.setState(r.service.AudioPlayer.STATE_PLAYING)
      },
      onBufferingStart: function () {
        alert("[AudioPlayer] AVPlayCallback.onBufferingStart();");
        l.setState(r.service.AudioPlayer.STATE_BUFFERING)
      },
      onBufferingComplete: function () {
        alert("[AudioPlayer] AVPlayCallback.onBufferingComplete();");
        l.setState(r.service.AudioPlayer.STATE_PLAYING)
      },
      onCurrentPlayTime: function (t) {
        alert("[AudioPlayer] AVPlayCallback.onCurrentPlayTime(" + t + ");");
        l.curTime = t.millisecond;
        o.setCurrentTime(l.curTime);
        o.setProgressBar(l.curTime / l.duration);
        if (c.oncurrenttimeupdated && c.oncurrenttimeupdated instanceof Function) {
          try {
            c.oncurrenttimeupdated(l.curTime, l.duration)
          } catch (u) {
            alert("EXCEPTION(AudioPlayer oncurrenttimeupdated): " + u)
          }
        }
      },
      onStreamCompleted: function () {
        alert("[AudioPlayer] AVPlayCallback.onStreamCompleted();");
        setTimeout(function () {
          l.nextItem()
        }, 2000);
        l.setState(r.service.AudioPlayer.STATE_STOPPED)
      },
      onError: function (t) {
        alert("[AudioPlayer] AVPlayCallback.onError(" + t + ");");
        l.stop();
        l.setState(r.service.AudioPlayer.STATE_STOPPED);
        if (c.onerror && c.onerror instanceof Function) {
          try {
            c.onerror(t)
          } catch (u) {
            alert("EXCEPTION(AudioPlayer onerror): " + u)
          }
        }
        l.nextItem()
      }
    },
    nSkipStart: 0,
    nSkipOffset: 0,
    nSkipInterval: 0,
    itvSkip: null,
    startSkip: function (u) {
      alert("[AudioPlayer.Ctrl] startSkip(" + u + ")");
      alert("Duration: " + this.getDuration());
      if (this.getDuration() <= 0) {
        return
      }
      this.nSkipStart = parseInt(this.getCurrentTime(), 10);
      this.nSkipInterval = parseInt(u * 1000, 10);
      if (this.itvSkip) {
        clearInterval(this.itvSkip);
        this.itvSkip = null
      }
      var t = this;
      this.pause();
      this.itvSkip = setInterval(function () {
        t.moveSkipNext()
      }, 300);
      o.showPointer((this.nSkipStart + this.nSkipOffset) / this.getDuration());
      l.setState(r.service.AudioPlayer.STATE_SKIP)
    },
    moveSkipNext: function () {
      alert("[AudioPlayer.Ctrl] moveSkipNext()");
      if (this.getDuration() <= 0) {
        return
      }
      alert("Current Offset: " + this.nSkipOffset + ", Interval: " + this.nSkipInterval);
      this.nSkipOffset += parseInt(this.nSkipInterval, 10);
      alert("Current Time: " + (this.nSkipStart + this.nSkipOffset));
      if (this.nSkipStart + this.nSkipOffset > this.getDuration()) {
        this.nSkipOffset = this.getDuration() - this.nSkipStart
      } else {
        if (this.nSkipStart + this.nSkipOffset < 0) {
          this.nSkipOffset = -this.nSkipStart
        }
      }
      alert("applied Offset: " + this.nSkipOffset);
      o.showPointer((this.nSkipStart + this.nSkipOffset) / this.getDuration())
    },
    stopSkip: function () {
      alert("[AudioPlayer.Ctrl] stopSkip()");
      o.hidePointer();
      if (this.itvSkip) {
        clearInterval(this.itvSkip);
        this.itvSkip = null
      }
      this.jumpTo(parseInt(this.nSkipStart + this.nSkipOffset, 10));
      this.resume();
      this.nSkipOffset = 0
    },
    cancelSkip: function () {
      alert("[AudioPlayer.Ctrl] cancelSkip()");
      this.nSkipOffset = 0;
      o.hidePointer();
      if (this.itvSkip) {
        clearInterval(this.itvSkip);
        this.itvSkip = null
      }
      this.resume()
    },
    isSkiping: function () {
      alert("[AudioPlayer.Ctrl] isSkiping()");
      return this.itvSkip ? true : false
    }
  };
  function p(u, t, x) {
    var w = x;
    while (w == x) {
      w = parseInt(Math.random() * (t + 1), 10) + u
    }
    alert("getRandomDec(" + u + ", " + t + ", " + x + ") returns " + w);
    return w
  }
  function j(w, u) {
    var t = [];
    var y = parseInt(w / 1000, 10);
    if (y >= 3600) {
      t[t.length] = parseInt(y / 3600, 10);
      y -= t[t.length - 1] * 3600
    }
    t[t.length] = parseInt(y / 60, 10);
    y -= t[t.length - 1] * 60;
    t[t.length] = parseInt(y, 10);
    for (var x = 0; x < t.length; x++) {
      if (t[x] < 10) {
        t[x] = "0" + t[x]
      }
    }
    return t.join(":")
  }
  function f(D, z, w, E) {
    D = parseInt(D, 10);
    z = parseInt(z, 10);
    w = parseInt(w, 10);
    E = parseInt(E, 10);
    var C = z / E;
    var t = D / w;
    var A = C < t ? C : t;
    var u = Math.round(w * A, 10);
    var y = Math.round(E * A, 10);
    var x = parseInt((D - u) / 2, 10);
    var B = parseInt((z - y) / 2, 10);
    if (Math.abs(u - D) < 2 || u > D) {
      u = D;
      x = 0
    }
    if (Math.abs(y - z) < 2 || y > z) {
      y = z;
      B = 0
    }
    return {
      left: x,
      top: B,
      width: u,
      height: y
    }
  }
})(sf);
(function (e) {
  var a = false,
    d = /xyz/.test(function () {
      xyz
    }) ? /\b_super\b/ : /.*/,
    c, f = [null, "__setter", "_extend", "eventNamespace", "widgetName", "baseCssClass", "callbacks", "options", "templates", "view", null].join("|");
  c = function () {};
  c.extend = function (l, h) {
    var k = this.prototype,
      m, g;
    if (!h) {
      h = l;
      l = "_createWidget"
    }
    a = true;
    m = new this();
    for (g in m) {
      if (e.isPlainObject(m[g])) {
        m[g] = e.extend(true, {}, m[g])
      }
    }
    a = false;
    for (g in h) {
      if (e.isFunction(h[g]) && e.isFunction(k[g]) && d.test(h[g])) {
        m[g] = (function (n, o) {
          return function () {
            var p = this._super,
              q;
            this._super = k[n];
            q = o.apply(this, arguments);
            this._super = p;
            return q
          }
        }(g, h[g]))
      } else {
        if (e.isPlainObject(h[g])) {
          m[g] = e.extend(true, {}, m[g], h[g])
        } else {
          m[g] = h[g]
        }
      }
    }
    function j() {
      if (!a && this[l] && typeof this[l] === "function") {
        this[l].apply(this, arguments)
      }
    }
    j.prototype = m;
    j.constructor = this;
    j.extend = arguments.callee;
    return j
  };
  sf.ui = {
    addSelector: function (g) {
      if ( !! g) {
        e.expr[":"][g] = function (h) {
          return !!e.data(h, g)
        }
      }
    },
    bridge: function (g, h) {
      e.fn[g] = function (l) {
        var j = typeof l === "string",
          k = Array.prototype.slice.call(arguments, 1),
          m = this;
        if (!j && k.length) {
          l = e.extend.apply(null, [true, l].concat(k))
        }
        if (j && l.charAt(0) === "_") {
          return m
        }
        if (j) {
          this.each(function () {
            var n = e.data(this, g) || e.data(this, g, new h({}, this)),
              o = e.isFunction(n[l]) ? n[l].apply(n, k) : n;
            if (o !== n) {
              m = o;
              return false
            }
          })
        } else {
          this.each(function () {
            var n = e.data(this, g);
            if (n) {
              n.element = e(this);
              n.option(l || {})._init()
            } else {
              e.data(this, g, new h(l || {}, this))
            }
          })
        }
        return m
      }
    },
    widgetFactory: function (h, g) {
      if (!g) {
        g = h;
        h = sf.ui.Widget
      }
      if (!g.widgetName) {
        e.error("[sf.ui.widgetFactory] widgetName is required")
      }
      g.eventNamespace = (g.eventNamespace || g.widgetName).toLowerCase();
      return h.extend(g)
    },
    Widget: c.extend({
      baseCssClass: "",
      eventNamespace: "widget",
      widgetName: "Widget",
      __setter: function (j, h, l) {
        var g;
        if (h !== null) {
          if (typeof h === "string") {
            j.call(this, h, l)
          } else {
            for (g in h) {
              if (h.hasOwnProperty(g)) {
                j.call(this, g, h[g])
              }
            }
          }
        }
      },
      _addCallback: function (g, h) {
        this.callbacks[g] = (this.callbacks[g] || []).concat(h)
      },
      _create: function () {
        alert("[sf.ui.Widget] _create()");
        this.widget().addClass(this.baseCssClass).addClass(this.options.themeCssClass)
      },
      _createWidget: function (k, j) {
        alert("[sf.ui.Widget] _createWidget()");
        var h = e.extend({}, k);
        e.data(j, this.widgetName, this);
        this.element = e(j);
        if (h.baseCssClass) {
          this.baseCssClass = h.baseCssClass;
          delete h.baseCssClass
        }
        if (h.overrides) {
          this.extend(h.overrides);
          delete h.overrides
        }
        this.templates = e.extend(true, {}, this.templates, h.templates);
        delete h.templates;
        this.callbacks = e.extend(true, {}, this.callbacks);
        if (h.callbacks) {
          this.addCallback(h.callbacks);
          delete h.callbacks
        }
        this.initialState = {};
        this.view = {};
        this.options = e.extend(true, {}, this.options, h);
        var g = this;
        this.element.bind("destroy." + this.eventNamespace, function () {
          g.destroy()
        });
        this._create();
        this._trigger("create");
        this._init()
      },
      _destroy: function () {},
      _extend: function (g, h) {
        if (f.indexOf("|" + g + "|") === -1) {
          this[g] = h
        }
      },
      _init: function () {},
      _setOption: function (g, h) {
        this.options[g] = h
      },
      _setTemplate: function (g, h) {
        this.templates[g] = h
      },
      _trigger: function (o, h, k) {
        var p = (o + "." + this.eventNamespace).toLowerCase(),
          n, l, j, g, m = false;
        if (!h) {
          h = e.Event(p)
        } else {
          h = e.Event(h);
          h.type = p
        }
        k = (k == undefined) ? null : k;
        if (h.originalEvent) {
          for (l = e.event.props.length, g; l;) {
            l -= 1;
            g = e.event.props[l];
            h[g] = h.originalEvent[g]
          }
        }
        n = this.callbacks[o];
        if (n) {
          for (l = 0, j = n.length; l < j; l += 1) {
            if (e.isFunction(n[l])) {
              m = m || n[l].call(this.element[0], h, k) === false
            }
          }
        }
        this.element.trigger(h, k);
        return !(m || h.isDefaultPrevented())
      },
      addCallback: function (g, h) {
        alert("[sf.ui.Widget] addCallback(" + g + ", " + h + ")");
        this.__setter(this._addCallback, g, h);
        return this
      },
      destroy: function () {
        alert("[sf.ui.Widget] destroy()");
        this._destroy();
        this.element.unbind("." + this.eventNamespace).removeData(this.widgetName);
        this.widget().unbind("." + this.eventNamespace).removeClass((this.baseCssClass || "") + " " + (this.options.themeCssClass || ""));
        this.removeAllCallbacks();
        return this
      },
      extend: function (g, h) {
        alert("[sf.ui.Widget] extend(" + g + ", " + h + ")");
        this.__setter(this._extend, g, h);
        return this
      },
      hide: function () {
        alert("[sf.ui.Widget] hide()");
        if (this._trigger("beforehide") !== false) {
          this.widget().hide();
          this._trigger("hide")
        }
        return this
      },
      option: function (g, h) {
        alert("[sf.ui.Widget] option(" + g + ", " + h + ")");
        if (arguments.length === 0) {
          alert("    > get all options");
          return e.extend({}, this.options)
        }
        if (typeof g === "string") {
          if (h === undefined) {
            alert("    > get '" + g + "'");
            return this.options[g]
          }
        }
        alert("    > set '" + g + "'");
        this.__setter(this._setOption, g, h);
        return this
      },
      removeAllCallbacks: function () {
        alert("[sf.ui.Widget] removeAllCallbacks()");
        this.callbacks = {};
        return this
      },
      removeCallback: function (g, h) {
        alert("[sf.ui.Widget] removeCallback(" + g + ", " + h + ")");
        var j = this.callbacks[g];
        if (j) {
          if (h) {
            this.callbacks[g] = e.grep(j, function (k) {
              return (k !== h)
            })
          } else {
            delete this.callbacks[g]
          }
        }
        return this
      },
      show: function () {
        alert("[sf.ui.Widget] show()");
        if (this._trigger("beforeshow") !== false) {
          this.widget().show();
          this._trigger("show")
        }
        return this
      },
      widget: function () {
        alert("[sf.ui.Widget] widget()");
        return this.element
      },
      _beginLayoutSetting: function () {
        alert("[sf.ui.Popup] _beginLayoutSetting()");
        var g = this.widget();
        if (this._bLayoutSetting) {
          alert("\tAlready on setting");
          return
        }
        this._styleVisibility = g.css("visibility");
        this._styleDisplay = g.css("display");
        this._bLayoutSetting = true;
        g.css({
          visibility: "hidden",
          display: "block"
        })
      },
      _endLayoutSetting: function () {
        alert("[sf.ui.Popup] _endLayoutSetting()");
        if (!this._bLayoutSetting) {
          alert("\tNot on setting");
          return
        }
        var g = this.widget();
        g.css({
          visibility: this._styleVisibility || "",
          display: this._styleDisplay || ""
        });
        this._styleVisibility = null;
        this._styleDisplay = null;
        this._bLayoutSetting = false
      },
    })
  };
  sf.ui.widget = function (j, n, h) {
    var o, l = e,
      g, m, k;
    if (!j) {
      e.error("[sf.ui.widget] Plugin name is empty")
    }
    if (!h) {
      h = n;
      n = sf.ui.Widget
    }
    o = j.split(".");
    if (o.length < 2) {
      e.error("[sf.ui.widget] Plugin name without namespace")
    }
    k = o.join("-").toLowerCase();
    g = o.join("");
    e.expr[":"][g] = function (p) {
      return !!e.data(p, g)
    };
    m = o.pop();
    e.each(o, function (p, q) {
      l = l[q] = l[q] || {}
    });
    l[m] = n.extend(e.extend(true, {
      widgetName: g,
      eventNamespace: g.toLowerCase(),
      baseCssClass: k
    }, h));
    sf.ui.bridge(g, l[m])
  };
  var b = null;
  e.fn.marquee = function (g) {
    if (b === null) {
      b = (sf.env.getBrowser().indexOf("maple") >= 0) ? true : false
    }
    this.each(function () {
      if (g === true || g === undefined) {
        e(this).css("white-space", "nowrap");
        alert("bMaple: " + b + ", bForce: " + g + ", this.scrollWidth: " + this.scrollWidth + ", $(this).width(): " + e(this).width());
        if (b === true || g === true || this.scrollWidth > e(this).width()) {
          alert("marquee");
          e(this).addClass("sf-ui-marquee")
        } else {
          alert("remove marquee");
          e(this).removeClass("sf-ui-marquee");
          this.scrollLeft = 0
        }
      } else {
        if (g === false) {
          alert("remove marquee");
          e(this).removeClass("sf-ui-marquee");
          this.scrollLeft = 0
        }
      }
    });
    return this
  };
  sf.ui.width = parseInt(curWidget.width, 10);
  sf.ui.height = parseInt(curWidget.height, 10);
  sf.ui.grid = sf.ui.height / 9;
  sf.ui.images = sf.core._afPath.images;
  sf.ui.init = function () {
    alert("[SF UI] init()");
    this.images = sf.core._afPath.images
  }
})(jQuery);
alert("[AF UI] ui.js included");
(function (b) {
  var a = "sfButton";
  sf.ui.Button = sf.ui.widgetFactory({
    widgetName: a,
    eventNamespace: "sfbutton",
    baseCssClass: "sf-ui-button",
    options: {
      text: [""],
      leftCssClass: "sf-ui-button-l",
      centerCssClass: "sf-ui-button-c",
      rightCssClass: "sf-ui-button-r",
      widgetFocusCssClass: "sf-ui-button-focus",
      index: 0
    },
    templates: {
      left: '<div class="${leftCssClass}" waper_focus="false"></div>',
      center: '<div class="${centerCssClass} sf-ui-common-ellipsis" waper_focus="false">${label}</div>',
      right: '<div class="${rightCssClass}" waper_focus="false"></div>'
    },
    buttonNum: 0,
    _init: function () {
      alert("[sf.Button] _init()");
      var g = this.options,
        d = this.view,
        e = this.templates,
        f = [];
      this.widget().css("visibility", "hidden");
      if (!g.text) {
        this._destroy()
      }
      if (typeof g.text === "string") {
        g.text = [g.text]
      }
      this.buttonNum = g.text.length;
      b.each(g.text, function (h, j) {
        f.push({
          centerCssClass: g.centerCssClass,
          label: j
        })
      });
      this._clearHtml();
      d.buttons = b.tmpl(e.center, f);
      d.leftSide = b.tmpl(e.left, {
        leftCssClass: g.leftCssClass || ""
      });
      d.rightSide = b.tmpl(e.right, {
        rightCssClass: g.rightCssClass || ""
      });
      this.blur();
      this._makeButtons();
      this._adjustButtonSpacing();
      this.widget().css("visibility", "visible");
      var c = this;
      this.widget().find("." + this.options.leftCssClass).bind("click", function () {
        alert("Button clicked: 0");
        c._trigger("clicked", null, 0)
      });
      this.widget().find("." + this.options.centerCssClass).each(function (h, j) {
        b(this).bind("click", (function (l) {
          var k = l;
          return function () {
            alert("Button clicked: " + k);
            c._trigger("clicked", null, k)
          }
        })(h))
      });
      this.widget().find("." + this.options.rightCssClass).bind("click", function () {
        alert("Button clicked: " + c.buttonNum - 1);
        c._trigger("clicked", null, c.buttonNum - 1)
      });
      
      //LDW>
      compSetAttrButton(this.widget());
    },
    _makeButtons: function () {
      alert("[sf.ui.Button] _makeButtons()");
      var d = this.view,
        c = this.widget();
      b.each([d.leftSide, $('<div class="sf-ui-button-wrapper">').append(d.buttons), d.rightSide], function (e, f) {
        f.appendTo(c)
      });
      
      //LDW>
      var g = this.options;
      if (g.text.length > 1) {
          var width = Math.floor(10000 / g.text.length);
          for (var i = 0; i < g.text.length; i++) {
            d.buttons[i].style.width = (width / 100) + "%";
            if(i == (g.text.length - 1)) {
                d.buttons[i].style.position = "absolute";
                d.buttons[i].style.right = "0px";
            }
          }
      }
    },
    _adjustButtonSpacing: function () {
      alert("[sf.ui.Button] _adjustButtonSpacing()");
      var e = this.view,
        c = this.widget(),
        f = 0,
        d = this;
      b.each([e.leftSide, e.rightSide], function (g, h) {
        if (h) {
          f += parseInt(h.width(), 10)
        }
      });
      if (this.buttonNum === 0) {
        throw "no buttons found"
      }
      //LDW> e.buttons.width((c.width() - f) / d.buttonNum)
    },
    _clearHtml: function () {
      alert("[sf.ui.Button] _clearHtml()");
      var c = this.view;
      //LDW>
      this.widget()[0].innerHTML = "";
      /*
      b.each(c, function (d, e) {
        if (e) {
          e.remove()
        }
      })
      */
    },
    _setOption: function (d, e) {
      alert("[sf.ui.Button] _setOption(" + d + ", " + e + ")");
      var f = this.options,
        c = this.view;
      switch (d) {
      case "text":
        f.text = ((typeof e) == "string") ? [e] : e;
        b.each(f.text, function (g) {
          c.buttons.eq(g).html(f.text[g])
        });
        break;
      case "leftCssClass":
      case "centerCssClass":
      case "rightCssClass":
        if (e) {
          b.each(c, function (h, g) {
            if (g.hasClass(f[d])) {
              g.removeClass(f[d]).addClass(e)
            }
            f[d] = e
          })
        }
        break
      }
    },
    _destroy: function () {
      alert("[sf.ui.adjustButtonSpacing] _destroy()");
      var c = this.widget(),
        d = this.options;
      c.removeClass(d.widgetFocusCssClass);
      this._clearHtml()
    },
    focus: function (e) {
      alert("[sf.ui.Button] focus(" + e + ")");
      var c = this.widget(),
        d = this.view,
        f = this.options;
      c.addClass(f.widgetFocusCssClass);
      if (typeof e == "number" && e >= 0 && e < this.buttonNum) {
        f.index = e
      } else {
        alert("index out of bound. button num : " + this.buttonNum)
      }
      b.each(d, function (g, h) {
        h.removeClass("focus")
      });
      d.buttons.eq(f.index).addClass("focus");
      if (f.index === 0) {
        d.leftSide.addClass("focus")
      }
      if (f.index === this.buttonNum - 1) {
        d.rightSide.addClass("focus")
      }
      return this
    },
    blur: function () {
      alert("[sf.ui.Button] blur()");
      var d = this.options,
        c = this.widget();
      c.removeClass(d.widgetFocusCssClass);
      return this
    },
    getIndex: function () {
      alert("[sf.ui.Button] getIndex()");
      return this.options.index
    }
  });
  sf.ui.bridge(a, sf.ui.Button);
  sf.ui.addSelector(a)
}(jQuery));
(function (b, c) {
  var a = "sfCheckBox";
  sf.ui.CheckBox = sf.ui.widgetFactory({
    widgetName: a,
    eventNamespace: "sfcheckbox",
    templates: {
      item: b.template(null, "<div waper_focus='false'></div>")
    },
    baseCssClass: "sf-ui-checkbox",
    options: {
      icon: "sf-ui-checkbox",
      checkClass: "sf-ui-checkbox-checked",
      uncheckClass: "sf-ui-checkbox-unchecked",
      focusClass: "sf-ui-checkbox-focused"
    },
    _create: function () {
      alert("[sf.CheckBox] _create()");
      b.tmpl(this.templates.item).appendTo(this.widget());
      this.widget().children().first().addClass(this.options.icon + " " + this.options.uncheckClass);
      
      //LDW>
      compSetAttrCheckbox(this.widget());
    },
    focus: function () {
      alert("[sf.CheckBox] focus()");
      this.widget().addClass(this.options.focusClass);
      return this
    },
    blur: function () {
      alert("[sf.CheckBox] blur()");
      this.widget().removeClass(this.options.focusClass || "");
      return this
    },
    check: function () {
      alert("[sf.CheckBox] check()");
      this.widget().children().first().removeClass(this.options.uncheckClass || "").addClass(this.options.checkClass);
      return this
    },
    uncheck: function () {
      alert("[sf.CheckBox] uncheck()");
      this.widget().children().first().removeClass(this.options.checkClass || "").addClass(this.options.uncheckClass);
      return this
    },
    getChecked: function () {
      alert("[sf.CheckBox] getChecked()");
      return this.widget().children().first().hasClass(this.options.checkClass)
    }
  });
  sf.ui.bridge(a, sf.ui.CheckBox);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfImage";
  sf.ui.Image = sf.ui.widgetFactory({
    widgetName: a,
    baseCssClass: "",
    options: {
      src: ""
    },
    _create: function () {
      alert("[sf.sfImage] _create() ");
      this._super();
      this.initialState.src = this.element.attr("src");
      this._updateSrc();
      
      //LDW>
      compSetAttrImage(this.widget());
    },
    _destroy: function () {
      alert("[sf.sfImage] _destroy()");
      this.element.attr("src", this.initialState.src)
    },
    _setOption: function (c, d) {
      alert("[sf.sfImage] _setOption(" + c + ", " + d + ")");
      switch (c) {
      case "src":
        this.options.src = d;
        this._updateSrc();
        break
      }
      return this
    },
    _updateSrc: function () {
      if (typeof (this.options.src) === "string") {
        this.element.attr("src", this.options.src)
      }
    }
  });
  sf.ui.bridge(a, sf.ui.Image);
  sf.ui.addSelector(a)
}(jQuery));
(function (d) {
  var c = "sfKeyHelp";
  var a = {
    item: d.template("sfKeyHelpTpl_item", '{{if margin}}<td class="sf-ui-keyhelp-margin-items" waper_focus="false"></td>{{/if}}<td class="sf-ui-keyhelp-icon ${iconclass}" key="${key}" waper_focus="false"></td><td class="sf-ui-keyhelp-margin-icon" key="${key}" waper_focus="false"></td><td class="sf-ui-keyhelp-text" key="${key}" waper_focus="false">${label}</td>'),
    main: d.template(null, '<table cellpadding="0px" cellspacing="0px" border="0px" valign="middle" style="width:100%;height:100%;" waper_focus="false"><tbody waper_focus="false"><tr waper_focus="false"><td class="sf-ui-keyhelp-margin-left" waper_focus="false"></td>{{if userItem}}<td style="text-align:left;" waper_focus="false"><table cellpadding="0px" cellspacing="0px" border="0px" valign="middle" align="left" class="sf-ui-keyhelp-userid" waper_focus="false"><tr waper_focus="false">{{tmpl(userItem) "sfKeyHelpTpl_item"}}</tr></table><td style="width:10px;" waper_focus="false"></td></td>{{/if}}<td style="text-align:right;" waper_focus="false"><table cellpadding="0px" cellspacing="0px" border="0px" style="table-layout:fixed;" align="right" waper_focus="false"><tbody waper_focus="false"><tr waper_focus="false">{{tmpl(items) "sfKeyHelpTpl_item"}}</tr></tbody></table></td><td class="sf-ui-keyhelp-margin-right" waper_focus="false"></td></tr></tbody></table>'),
    notification: d.template(null, '<div class="notification" waper_focus="false"><div class="bg" waper_focus="false"><div class="left" waper_focus="false"></div><div class="right" waper_focus="false"></div></div><div class="icons" waper_focus="false"></div><div class="text sf-ui-common-ellipsis" waper_focus="false"></div></div>')
  };
  var b = {
    RED: sf.key.RED,
    GREEN: sf.key.GREEN,
    YELLOW: sf.key.YELLOW,
    BLUE: sf.key.BLUE,
    INFO: sf.key.INFO,
    TOOLS: sf.key.TOOLS,
    PLAY: sf.key.PLAY,
    STOP: sf.key.STOP,
    PAUSE: sf.key.PAUSE,
    ENTER: sf.key.ENTER,
    RETURN: sf.key.RETURN,
    REW: sf.key.REW,
    FF: sf.key.FF
  };
  sf.ui.KeyHelp = sf.ui.widgetFactory({
    widgetName: c,
    baseCssClass: "sf-ui-keyhelp",
    options: {
      theme: "black"
    },
    themeClasses: {
      WHITE: "sf-ui-keyhelp-white",
      TRANSPARENT: "sf-ui-keyhelp-transparent",
      BLACK: "sf-ui-keyhelp-black"
    },
    themeCssClass: null,
    iconSet: {
      USER: "sf-ui-keyhelp-icon-user",
      USERSSO: "sf-ui-keyhelp-icon-usersso",
      USERDISABLED: "sf-ui-keyhelp-icon-userdisabled",
      USERNOICON: "sf-ui-keyhelp-icon-noicon",
      NUMBER: "sf-ui-keyhelp-icon-number sf-ui-keyhelp-icon-long",
      IME: "sf-ui-keyhelp-icon-ime",
      TOOLS: "sf-ui-keyhelp-icon-tools",
      INFO: "sf-ui-keyhelp-icon-info",
      ENTER: "sf-ui-keyhelp-icon-enter",
      RETURN: "sf-ui-keyhelp-icon-return",
      UPDOWN: "sf-ui-keyhelp-icon-updown",
      LEFTRIGHT: "sf-ui-keyhelp-icon-leftright",
      MOVE: "sf-ui-keyhelp-icon-move",
      REW: "sf-ui-keyhelp-icon-rew",
      REWFF: "sf-ui-keyhelp-icon-rewff sf-ui-keyhelp-icon-long",
      FF: "sf-ui-keyhelp-icon-ff",
      PLAY: "sf-ui-keyhelp-icon-play",
      PAUSE: "sf-ui-keyhelp-icon-pause",
      STOP: "sf-ui-keyhelp-icon-stop",
      RED: "sf-ui-keyhelp-icon-red",
      GREEN: "sf-ui-keyhelp-icon-green",
      YELLOW: "sf-ui-keyhelp-icon-yellow",
      BLUE: "sf-ui-keyhelp-icon-blue"
    },
    _create: function () {
      alert("[sf.ui.KeyHelp] _create() ");
      this._super()
    },
    _init: function () {
      alert("[sf.ui.KeyHelp] _init() ");
      var h = this.options,
        f = this.widget();
      this._super();
      try {
        if (h.theme) {
          h.theme = h.theme.toUpperCase();
          f.removeClass(this.themeCssClass);
          this.themeCssClass = this.themeClasses[h.theme];
          f.addClass(this.themeCssClass)
        }
        this._redraw()
      } catch (g) {
        alert("[sf.KeyHelp] _init() Exception:" + g);
        this.destroy()
      }
    },
    _destroy: function () {
      alert("[sf.ui.KeyHelp] _destroy() ");
      var g = this.initialState,
        f = this.widget(),
        h = this.data;
      f.empty().removeClass(this.themeCssClass)
    },
    _redraw: function () {
      alert("[sf.ui.KeyHelp] _redraw() ");
      var k = {
        items: []
      };
      var f = this.widget(),
        l = this.options,
        g = this.view;
      for (var h in l) {
        var j = h.toUpperCase();
        alert(h + " = " + l[h]);
        if (this.iconSet[j]) {
          if (!k.userItem && (j == "USER" || j == "USERSSO" || j == "USERDISABLED" || j == "USERNOICON")) {
            k.userItem = {
              margin: false,
              iconclass: this.iconSet[j],
              label: l[h],
              key: j
            }
          } else {
            k.items.push({
              margin: k.items.length > 0,
              iconclass: this.iconSet[j],
              label: l[h],
              key: j
            })
          }
          delete l[h]
        }
      }
      if (g.help) {
        g.help.remove();
        g.help = null
      }
      g.help = d.tmpl(a.main, k);
      f.prepend(g.help);
      for (var h in b) {
        h = h.toUpperCase();
        this.widget().find('td[key="' + h + '"]').each(function () {
          d(this).bind("click", (function (m) {
            return function () {
              alert("KeyHelp item pressed: " + m + "(" + b[m] + ")");
              e(b[m])
            }
          })(h)).css("cursor", "pointer")
        })
      }
    },
    showNotice: function (p) {
      alert("[sf.ui.KeyHelp] showNotice()");
      var k = this.widget(),
        f = this.options,
        l = this.view;
      if (!p.icons) {
        p.icons = []
      }
      if (!p.text) {
        p.text = ""
      }
      if (!p.timeout && p.timeout !== 0) {
        p.timeout = 5000
      }
      var j = 0;
      if (p.icons && p.icons.length) {
        for (var g = 0; g < p.icons.length; g++) {
          if (p.icons[g].toUpperCase() == "MOUSE" && !sf.env.getMouseEventAvailable()) {
            alert("Mouse is not available now!!! Mouse icon removed...");
            p.icons[g] = null;
            j++
          } else {
            if (p.icons[g].toUpperCase() == "GESTURE" && !sf.env.getGestureRecogAvailable()) {
              alert("Gesture is not available now!!! Gesture icon removed...");
              p.icons[g] = null;
              j++
            } else {
              if (p.icons[g].toUpperCase() == "VOICE" && !sf.env.getVoiceRecogAvailable()) {
                alert("Voice is not available now!!! Voice icon removed...");
                p.icons[g] = null;
                j++
              }
            }
          }
        }
        if (p.icons.length == j) {
          alert("All icons disabled. Ignore this operation.");
          return false
        }
      }
      alert(k.find(".notification").get(0));
      if (!k.find(".notification").get(0)) {
        d.tmpl(a.notification, null).appendTo(k);
        l.notification = k.find(".notification")
      }
      l.notification.show().css("opacity", "0.0");
      l.notification.find(".icons").empty();
      for (var g = 0; g < p.icons.length; g++) {
        alert("Icon : " + p.icons[g]);
        if (p.icons[g] && typeof p.icons[g] == "string") {
          l.notification.find(".icons").append('<div class="' + p.icons[g] + '"></div>')
        }
      }
      var n = 0;
      l.notification.find(".icons div").each(function () {
        n += d(this).outerWidth(true)
      });
      alert("Icons Width : " + n);
      l.notification.find(".icons").width(n);
      n = l.notification.find(".icons").outerWidth(true);
      alert("Text : " + p.text);
      var h = l.notification.find(".bg .left").outerWidth(true);
      l.notification.find(".text").html(p.text).css({
        left: n + "px",
        width: (h - n) + "px"
      });
      var m = this;
      if (this.hideTimeout) {
        clearTimeout(this.hideTimeout);
        this.hideTimeout = null
      }
      l.notification.stop(true).animate({
        opacity: "1"
      }, {
        duration: 300,
        complete: function () {
          alert("Noti show complete!!!");
          if (p.timeout > 0) {
            alert("Sets noti hide timeout: " + p.timeout);
            m.hideTimeout = setTimeout(function () {
              m.hideTimeout = null;
              l.notification.stop(true).animate({
                opacity: 0
              }, {
                duration: 300,
                complete: function () {
                  alert("Noti hide complete!!!")
                }
              })
            }, p.timeout)
          }
        }
      });
      alert("[sf.ui.KeyHelp] showNotice() END");
      return true
    },
    hideNotice: function () {
      alert("[sf.ui.KeyHelp] hideNotice()");
      var f = this.widget();
      if (f.find(".notification").get(0)) {
        f.find(".notification").hide()
      }
      alert("[sf.ui.KeyHelp] hideNotice() END")
    }
  });
  function e(f) {
    if (document.createEvent) {
      alert("using document.createEvent");
      var g = document.createEvent("Events");
      g.initEvent("keydown", true, true);
      g.keyCode = f;
      document.activeElement.dispatchEvent(g)
    } else {
      if (document.createEventObject) {
        alert("using document.createEvent");
        var g = document.createEventObject();
        g.keyCode = f;
        document.activeElement.fireEvent("onkeydown", g)
      }
    }
  }
  sf.ui.bridge(c, sf.ui.KeyHelp);
  sf.ui.addSelector(c)
}(jQuery));
(function (b) {
  var a = "sfLabel";
  sf.ui.Label = sf.ui.widgetFactory({
    widgetName: a,
    baseCssClass: "sf-ui-label sf-ui-common-ellipsis",
    options: {
      text: ""
    },
    _create: function () {
      alert("[sf.Label] _create()");
      this.initialState.content = this.widget().html();
      this._super()
    },
    _init: function () {
      alert("[sf.Label] _init()");
      this._super();
      this._setText(this.options.text);
      
      //LDW>
      compSetAttrLabel(this.widget());
    },
    _setOption: function (c, d) {
      alert("[sf.Label] _setOption(" + c + ", " + d + ")");
      if (c === "text") {
        this.options.text = d;
        this._setText(this.options.text)
      }
    },
    _destroy: function () {
      alert("[sf.Label] _destroy()");
      this._setText(this.initialState.content)
    },
    _setText: function (c) {
      alert("[sf.Label] _setText()");
      this.widget().html(c)
    }
  });
  sf.ui.bridge(a, sf.ui.Label);
  sf.ui.addSelector(a)
}(jQuery));
(function (d) {
  var b = "sfList",
    c = {
      BLUR: 1,
      FOCUS: 2,
      SELECT: 3
    };
  var a;
  sf.ui.List = sf.ui.widgetFactory({
    baseCssClass: "sf-ui-list",
    eventNamespace: "sflist",
    options: {
      data: [],
      index: 0,
      itemsPerPage: 9999,
      focusOffset: {
        x: 0,
        y: -10
      }
    },
    templates: {
      item: '<div class="sf-ui-list-item" waper_focus="false"><div class="left" waper_focus="false"></div><div class="center sf-ui-common-ellipsis" waper_focus="false"></div><div class="right" waper_focus="false"></div></div>',
      focus: '<div class="sf-ui-list-focus" waper_focus="false"><div class="left" waper_focus="false"></div><div class="center" waper_focus="false"></div><div class="right" waper_focus="false"></div></div>'
    },
    widgetName: b,
    _destroy: function () {
      this.view.items.remove()
    },
    _init: function () {
      alert("[sf.ui.List] _init()");
      var e = this.options;
      this._super();
      this._addItemWrappers();
      this._setItems(e.index);
      this.focus(e.index);
      this._blur();
      
      //LDW>
      compSetAttrList(this.widget());
    },
    _addItemWrappers: function () {
      alert("[sf.ui.List] _addItemWrappers()");
      var g = this.options,
        l = this.widget(),
        n = this.view;
      var k = l.css("visibility");
      l.css("visibility", "hidden");
      l.empty();
      var f = l.width();
      alert("List Width : " + f);
      d.tmpl(this.templates.focus, {}).appendTo(l);
      /*LDW>
      var h = l.find(".sf-ui-list-focus .left").width();
      var m = l.find(".sf-ui-list-focus .right").width();
      l.find(".sf-ui-list-focus .center").width(f - h - m);
      */
      n.focus = l.find(".sf-ui-list-focus");
      n.focus.width("100%");
      l.append('<div class="sf-ui-list-itemarea" waper_focus="false"></div>');
      for (var j = 0; j < Math.min(g.itemsPerPage, g.data.length); j++) {
        d.tmpl(this.templates.item, {
          item: ""
        }).appendTo(l.find(".sf-ui-list-itemarea"))
      }
      n.items = l.find(".sf-ui-list-item");
      /*LDW>
      n.items.each(function (o, p) {
        h = d(p).find(".left").width();
        m = d(p).find(".right").width();
        d(p).find(".center").width(f - h - m)
      });
      */
      var e = l.find(".sf-ui-list-focus .center").eq(0).outerHeight(true);
      this.itemHeight = l.find(".sf-ui-list-item .center").eq(0).outerHeight(true);
      this.focusYOffset = parseInt((this.itemHeight - e) / 2, 10);
      l.css("visibility", k || "")
    },
    _setItems: function (k) {
      alert("[sf.ui.List] _setItems(" + k + ")");
      var j = this.options,
        g = this.view,
        h = this.templates,
        e = this._getPage(k) * j.itemsPerPage;
      var f = this;
      g.items.each(function (l, m) {
        if (e + l < j.data.length) {
          d(m).find(".center").html(j.data[e + l]);
          d(m).click((function (o) {
            var n = o;
            return function () {
              f.move(n);
              f._trigger("itemselected", null, n)
            }
          })(e + l))
        } else {
          d(m).find(".center").html("")
        }
      })
    },
    _focus: function (k) {
      alert("[sf.ui.List] _focus(" + k + ")");
      var j = this.view,
        g = this.widget();
      if (k == undefined) {
        k = this.options.index
      }
      if (k > this.options.data.length - 1) {
        alert("itemindex out of range. item count : " + this.options.data.length);
        return
      }
      var f = this._getPage(k) * this.options.itemsPerPage;
      var h = k - f;
      var e = (h * this.itemHeight) + this.focusYOffset;
      j.focus.css("display", "block");
      if (k != this.options.index) {
        j.items.removeClass("focused").removeClass("selected");
        j.focus.stop(true).animate({
          top: e + "px"
        }, {
          duration: 100,
          complete: function () {
            alert("[sf.ui.List] moving focus complete!");
            j.items.eq(h).addClass("focused")
          }
        })
      } else {
        j.focus.css({
          top: e + "px"
        });
        j.items.eq(h).addClass("focused").removeClass("selected")
      }
      j.items.each(function (l) {
        if (h == l) {
          d(this).find(".center").marquee().removeClass("sf-ui-common-ellipsis")
        } else {
          d(this).find(".center").addClass("sf-ui-common-ellipsis").marquee(false)
        }
      });
      this.options.index = k
    },
    _blur: function () {
      alert("[sf.ui.List] _blur()");
      var e = this.view;
      e.focus.css({
        display: "none"
      });
      this.widget().find(".focused").addClass("selected");
      e.items.find(".center").addClass("sf-ui-common-ellipsis").marquee(false);
      e.items.removeClass("focused")
    },
    _getPage: function (e) {
      alert("[sf.ui.List] _getPage(" + e + ")");
      return Math.floor(e / this.options.itemsPerPage)
    },
    _setOption: function (e, f) {
      var g = this.options;
      switch (e) {
      case "data":
        g.data = [].concat(f);
        this._init();
        break;
      case "index":
        //LDW> this.move(f);
        g.index = f;
        this._init();
        break;
      case "itemsPerPage":
        f = parseInt(f, 10);
        if (f > 0) {
          /*LDW>
          g.itemsPerPage = f;
          this._addItemWrappers();
          this._setItems(f);
          this._focus(f);
          if (!this._getFocused()) {
            this._blur()
          }
          */
          g.itemsPerPage = f;
          this._init();
        }
        break
      }
    },
    _getFocused: function () {
      return this.view.focus.css("display") == "block"
    },
    blur: function () {
      alert("[sf.ui.List] blur()");
      this._blur();
      return this
    },
    clear: function () {
      alert("[sf.ui.List] clear()");
      this.blur();
      this._setOption("data", []);
      return this
    },
    focus: function () {
      alert("[sf.ui.List] focus()");
      this._focus();
      return this
    },
    getIndex: function () {
      alert("[sf.ui.List] getIndex()");
      var e = this.option("index");
      alert("\tindex: " + e);
      return e
    },
    getSelectedItem: function () {
      alert("[sf.ui.List] getSelectedItem()");
      var e = this.options;
      return e.items[e.index]
    },
    move: function (e) {
      alert("[sf.ui.List] move(" + e + ")");
      var f = this.options;
      e = parseInt(e, 10);
      if (!isNaN(e) && e >= 0 && e < f.data.length) {
        if (this._getPage(f.index) != this._getPage(e)) {
          this._setItems(e)
        }
        this._focus(e)
      }
      return this
    },
    next: function () {
      alert("[sf.ui.List] next()");
      this.move((this.options.index + 1) % this.options.data.length);
      return this
    },
    prev: function () {
      alert("[sf.ui.List] prev()");
      this.move((this.options.index - 1 + this.options.data.length) % this.options.data.length);
      return this
    }
  });
  sf.ui.bridge(b, sf.ui.List);
  sf.ui.addSelector(b)
}(jQuery));
(function (b) {
  var a = "sfLoading";
  sf.ui.Loading = sf.ui.widgetFactory({
    widgetName: a,
    eventNamespace: "sfloading",
    baseCssClass: "sf-ui-loading",
    options: {
      animatedCssClass: "sf-ui-loading-circle",
      stepIntervalTime: 100,
      stepTotal: 18
    },
    templates: {
      animation: '<div class="${animatedCssClass}" waper_focus="false"></div>'
    },
    stepIndex: 0,
    interval: false,
    _create: function () {
      alert("[sf.Loading] _create()");
      this._super();
      this.view.animatedElement = b.tmpl(this.templates.animation, {
        animatedCssClass: this.options.animatedCssClass
      });
      this.widget().html(this.view.animatedElement);
      
      //LDW>
      compSetAttrLoading(this.widget());
    },
    _destroy: function () {
      alert("[sf.Loading] _destroy()");
      this.view.animatedElement.remove()
    },
    _animate: function () {
      alert("[sf.Loading] _animate()");
      var c = this;
      this.interval = setInterval(function () {
        c.animationStep()
      }, this.options.stepIntervalTime)
    },
    animationStep: function () {
      alert("[sf.Loading] animationStep()");
      var d = this.stepIndex,
        c = (d + 1) % this.options.stepTotal;
      this.view.animatedElement.removeClass(this.options.animatedCssClass + "-" + d.toString()).addClass(this.options.animatedCssClass + "-" + c.toString());
      this.stepIndex = c
    },
    show: function () {
      alert("[sf.Loading] _show()");
      this.widget().show();
      if (this.interval) {
        return this
      }
      //LDW>
      if (window._browser != "designer") this._animate();
      return this
    },
    hide: function () {
      alert("[sf.Loading] _hide()");
      this.widget().hide();
      clearInterval(this.interval);
      this.interval = null;
      return this
    }
  });
  sf.ui.bridge(a, sf.ui.Loading);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfScroll";
  sf.ui.Scroll = sf.ui.widgetFactory({
    baseCssClass: "sf-ui-scroll",
    eventNamespace: "sfscroll",
    options: {
      pages: 0,
      currentPage: 0
    },
    pageHeight: 0,
    scrollSize: 0,
    templates: {
      bg: '<div class="sf-ui-scroll-bg" waper_focus="false"><div class="sf-ui-scroll-bg-top" waper_focus="false"></div><div class="sf-ui-scroll-bg-middle" waper_focus="false"></div><div class="sf-ui-scroll-bg-bottom" waper_focus="false"></div></div>',
      body: '<div class="sf-ui-scroll-body" waper_focus="false"><div class="sf-ui-scroll-body-top" waper_focus="false"></div><div class="sf-ui-scroll-body-middle" waper_focus="false"></div><div class="sf-ui-scroll-body-bottom" waper_focus="false"></div></div>'
    },
    totalHeight: 0,
    widgetName: a,
    _create: function () {
      alert("[sf.Scroll] _create()");
      var f = this.options,
        e = this.templates,
        d = this.view,
        c = this.widget();
      this._super();
      this.totalHeight = c.height();
      b.each(["bg", "body"], function (h, g) {
        d[g] = b.tmpl(e[g])
      });
      c.append(d.bg, d.body);
      alert("SCROLL HTML : " + c.html());
      this._updateScroll();
      
      //LDW>
      compSetAttrScroll(this.widget());
    },
    _destroy: function () {
      var c = this.view;
      b.each(["bg", "body"], function (e, d) {
        c[d].remove()
      })
    },
    _move: function (c) {
      var e = this.options,
        d = e.currentPage;
      if (c >= 0 && c < e.pages) {
        e.currentPage = c;
        this._updateScrollPosition();
        this._trigger("move", null, {
          previousPage: d,
          currentPage: c
        })
      }
      return this
    },
    _setOption: function (c, d) {
      alert("[sf.Scroll] _setOption(" + c + ", " + d + ")");
      var e = this.options;
      switch (c) {
      case "pages":
        if (d <= 0) return;
        e.pages = d;
        if (e.currentPage > e.pages - 1) {
          e.currentPage = e.pages - 1
        }
        this._updateScroll();
        break;
      case "currentPage":
        this.move(d);
        break
      }
    },
    _updateScroll: function () {
      alert("[sf.Scroll] _updateScroll()");
      this._updateScrollSettings();
      this._updateScrollPosition()
    },
    _updateScrollSettings: function () {
      alert("[sf.Scroll] _updateScrollSettings()");
      var g = 30;
      var j = this.options,
        f = this.view;
      this._beforeLayoutSetting();
      /*LDW>
      var d = f.bg.find(".sf-ui-scroll-bg-top").height();
      var e = f.bg.find(".sf-ui-scroll-bg-bottom").height();
      alert("BG Top Height: " + d);
      alert("BG Bottom Height: " + e);
      f.bg.find(".sf-ui-scroll-bg-middle").css("height", this.totalHeight - (d + e));
      this.scrollSize = Math.round(this.totalHeight / j.pages);
      if (this.scrollSize < g) {
        this.scrollSize = g
      }
      this.pageHeight = this.totalHeight - this.scrollSize;
      if (j.pages > 1) {
        this.pageHeight /= j.pages - 1
      }
      if (true) {
        var h = f.body.find(".sf-ui-scroll-body-top").height();
        var c = f.body.find(".sf-ui-scroll-body-bottom").height();
        alert("Body Top Height: " + h);
        alert("Body Bottom Height: " + c);
        alert("Set middle of body size to : " + (this.scrollSize - (h + c)));
        f.body.find(".sf-ui-scroll-body-middle").height(this.scrollSize - (h + c))
      }
      */
      this.scrollSize = 100 / j.pages;
      this.pageHeight = 100 / j.pages;
      f.body.height(this.scrollSize + "%");
      
      this._afterLayoutSetting()
    },
    _beforeLayoutSetting: function () {
      alert("[sf.ui.Scroll] _beforeLayoutSetting()");
      var c = this.widget();
      if (this._bLayoutSetting) {
        alert("\tAlready on setting");
        return
      }
      this._styleVisibility = c.css("visibility");
      this._styleDisplay = c.css("display");
      this._bLayoutSetting = true;
      c.css({
        visibility: "hidden",
        display: "block"
      })
    },
    _afterLayoutSetting: function () {
      alert("[sf.ui.Scroll] _afterLayoutSetting()");
      if (!this._bLayoutSetting) {
        alert("\tNot on setting");
        return
      }
      var c = this.widget();
      c.css({
        visibility: this._styleVisibility || "",
        display: this._styleDisplay || ""
      });
      this._styleVisibility = null;
      this._styleDisplay = null;
      this._bLayoutSetting = false
    },
    _updateScrollPosition: function () {
      alert("[sf.Scroll] _updateScrollPosition()");
      var c = this.view,
        e = this.options,
        d;
      d = Math.ceil(this.pageHeight * e.currentPage);
      c.body.css("top", d + "%");
      alert("Move Top to : " + d + "%")
    },
    move: function (c) {
      alert("[sf.Scroll] move(" + c + ")");
      this._move(c);
      return this
    },
    next: function () {
      alert("[sf.Scroll] next()");
      this._move(this.options.currentPage + 1);
      return this
    },
    prev: function () {
      alert("[sf.Scroll] prev()");
      this._move(this.options.currentPage - 1);
      return this
    }
  });
  sf.ui.bridge(a, sf.ui.Scroll);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfHScroll";
  sf.ui.HScroll = sf.ui.widgetFactory({
    baseCssClass: "sf-ui-hscroll",
    eventNamespace: "sfHScroll",
    options: {
      pages: 0,
      currentPage: 0
    },
    pageWidth: 0,
    scrollSize: 0,
    templates: {
      bg: '<div class="sf-ui-hscroll-bg" waper_focus="false"><div class="sf-ui-hscroll-bg-left" waper_focus="false"></div><div class="sf-ui-hscroll-bg-center" waper_focus="false"></div><div class="sf-ui-hscroll-bg-right" waper_focus="false"></div></div>',
      body: '<div class="sf-ui-hscroll-body" waper_focus="false"><div class="sf-ui-hscroll-body-left" waper_focus="false"></div><div class="sf-ui-hscroll-body-center" waper_focus="false"></div><div class="sf-ui-hscroll-body-right" waper_focus="false"></div></div>'
    },
    totalWidth: 0,
    widgetName: a,
    _create: function () {
      alert("[sf.HScroll] _create()");
      var f = this.options,
        e = this.templates,
        d = this.view,
        c = this.widget();
      this._super();
      this.totalWidth = c.width();
      alert("totalWidth = " + this.totalWidth);
      b.each(["bg", "body"], function (h, g) {
        d[g] = b.tmpl(e[g])
      });
      c.append(d.bg, d.body);
      this._updateScroll();
      alert("SCROLL HTML : " + c.html());
      
      //LDW>
      compSetAttrHScroll(this.widget());
    },
    _destroy: function () {
      var c = this.view;
      b.each(["bg", "body"], function (e, d) {
        c[d].remove()
      })
    },
    _move: function (c) {
      var e = this.options,
        d = e.currentPage;
      if (c >= 0 && c < e.pages) {
        e.currentPage = c;
        this._updateScrollPosition();
        this._trigger("move", null, {
          previousPage: d,
          currentPage: c
        })
      }
      return this
    },
    _setOption: function (c, d) {
      alert("[sf.HScroll] _setOption(" + c + ", " + d + ")");
      var e = this.options;
      switch (c) {
      case "pages":
        e.pages = d;
        if (d <= 0) return;
        if (e.currentPage > e.pages - 1) {
          e.currentPage = e.pages - 1
        }
        this._updateScroll();
        break;
      case "currentPage":
        this.move(d);
        break
      }
    },
    _updateScroll: function () {
      alert("[sf.HScroll] _updateScroll()");
      this._updateScrollSettings();
      this._updateScrollPosition()
    },
    _updateScrollSettings: function () {
      alert("[sf.HScroll] _updateScrollSettings()");
      var h = 30;
      var j = this.options,
        f = this.view;
      this._beforeLayoutSetting();
      /*LDW>
      var c = f.bg.find(".sf-ui-hscroll-bg-left").width();
      var e = f.bg.find(".sf-ui-hscroll-bg-right").width();
      f.bg.find(".sf-ui-hscroll-bg-center").css("width", this.totalWidth - (c + e));
      this.scrollSize = Math.round(this.totalWidth / j.pages);
      if (this.scrollSize < h) {
        this.scrollSize = h
      }
      this.pageWidth = this.totalWidth - this.scrollSize;
      if (j.pages > 1) {
        this.pageWidth /= j.pages - 1
      }
      if (true) {
        var d = f.body.find(".sf-ui-hscroll-body-left").width();
        var g = f.body.find(".sf-ui-hscroll-body-right").width();
        alert("Set middle of body size to : " + (this.scrollSize - (d + g)));
        f.body.find(".sf-ui-hscroll-body-center").width(this.scrollSize - (d + g))
      }
      */
      this.scrollSize = 100 / j.pages;
      this.pageWidth = 100 / j.pages;
      f.body.width(this.scrollSize + "%");
      
      this._afterLayoutSetting()
    },
    _beforeLayoutSetting: function () {
      alert("[sf.ui.HScroll] _beforeLayoutSetting()");
      var c = this.widget();
      if (this._bLayoutSetting) {
        alert("\tAlready on setting");
        return
      }
      this._styleVisibility = c.css("visibility");
      this._styleDisplay = c.css("display");
      this._bLayoutSetting = true;
      c.css({
        visibility: "hidden",
        display: "block"
      })
    },
    _afterLayoutSetting: function () {
      alert("[sf.ui.HScroll] _afterLayoutSetting()");
      if (!this._bLayoutSetting) {
        alert("\tNot on setting");
        return
      }
      var c = this.widget();
      c.css({
        visibility: this._styleVisibility || "",
        display: this._styleDisplay || ""
      });
      this._styleVisibility = null;
      this._styleDisplay = null;
      this._bLayoutSetting = false
    },
    _updateScrollPosition: function () {
      alert("[sf.HScroll] _updateScrollPosition()");
      var c = this.view,
        e = this.options,
        d;
      d = Math.ceil(this.pageWidth * e.currentPage);
      c.body.css("left", d + "%");
      alert("Move Left to : " + d + "%")
    },
    move: function (c) {
      alert("[sf.HScroll] move(" + c + ")");
      this._move(c);
      return this
    },
    next: function () {
      alert("[sf.HScroll] next()");
      this._move(this.options.currentPage + 1);
      return this
    },
    prev: function () {
      alert("[sf.HScroll] prev()");
      this._move(this.options.currentPage - 1);
      return this
    }
  });
  sf.ui.bridge(a, sf.ui.HScroll);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfPopup";
  var d = 0;
  sf.ui.Popup = sf.ui.widgetFactory({
    widgetName: a,
    eventNamespace: "sfpopup",
    baseCssClass: "sf-ui-popup",
    options: {
      text: "",
      buttons: null,
      focus: 0,
      defaultFocus: 0,
      //LDW> timeout: null,
      timeout: 0,
      callback: null,
      title: "",
      keyhelp: null,
      dim: true,
      actionpopup: false,
      onkeydown: null
    },
    templates: {
      popupTpl: '<div class="dim" waper_focus="false"></div><div class="bg alpha" waper_focus="false"><div class="top" waper_focus="false"><div class="left" waper_focus="false"></div><div class="center" waper_focus="false"></div><div class="right" waper_focus="false"></div></div><div class="mid" waper_focus="false"><div class="left" waper_focus="false"></div><div class="center" waper_focus="false"></div><div class="right" waper_focus="false"></div></div><div class="bottom" waper_focus="false"><div class="left" waper_focus="false"></div><div class="center" waper_focus="false"></div><div class="right" waper_focus="false"></div></div></div><div class="bg" waper_focus="false"><div class="top" waper_focus="false"><div class="left" waper_focus="false"></div><div class="center" waper_focus="false"></div><div class="right" waper_focus="false"></div></div><div class="mid" waper_focus="false"><div class="left" waper_focus="false"></div><div class="center" waper_focus="false"></div><div class="right" waper_focus="false"></div></div><div class="bottom" waper_focus="false"><div class="left" waper_focus="false"></div><div class="center" waper_focus="false"></div><div class="right" waper_focus="false"></div></div></div><div class="title" waper_focus="false"></div><div class="text" waper_focus="false"></div><div class="buttons" waper_focus="false"></div><div class="keyhelp" waper_focus="false"></div><a href="javascript:void(0);" onkeydown="$(\'#${id}\').sfPopup(\'key\');" waper_focus="false"></a>',
      buttonItem: '<div class="sf-ui-button" waper_focus="false"><div class="sf-ui-button-l" waper_focus="false"></div><div class="sf-ui-button-c" waper_focus="false">${buttontext}</div><div class="sf-ui-button-r" waper_focus="false"></div></div>'
    },
    timer: null,
    timeOutSecs: [5, 10, 30],
    popupWidth: 0,
    popupHeight: 0,
    _init: function () {
      alert("[sf.Popup] _init()");
      var h = this.options,
        f = this.view,
        e = this.widget();
      this._beginLayoutSetting();
      e.empty().append(b.tmpl(this.templates.popupTpl, {
        id: e.attr("id")
      }));
      f.text = e.find(".text");
      if (typeof h.title == "string" && h.title != "") {
        e.addClass("title");
        e.find(".title").html(h.title).show();
        alert("Title Exist")
      } else {
        e.removeClass("title");
        e.find(".title").html("").hide();
        h.title = null
      }
      if (h.keyhelp) {
        e.addClass("keyhelp");
        e.find(".keyhelp").show();
        alert("KeyHelp Exist")
      } else {
        e.removeClass("keyhelp");
        e.find(".keyhelp").hide();
        h.keyhelp = null
      }
      if (h.actionpopup) {
        h.actionpopup = true;
        e.addClass("actionpopup")
      } else {
        h.actionpopup = false;
        e.removeClass("actionpopup")
      }
      if (h.onkeydown && h.onkeydown instanceof Function) {} else {
        h.onkeydown = null
      }
      if (h.buttons) {
        if (typeof h.buttons == "string") {
          h.buttons = [h.buttons]
        }
        alert("popup with " + h.buttons.length + " buttons")
      } else {
        h.buttons = [];
        alert("popup with no button")
      }
      this._createButtons();
      this._setPopupLayout();
      this._centerPopup();
      alert("timeout: " + h.timeout);
      if (!h.timeout && h.timeout != 0) {
        h.timeout = (this.timeOutSecs.length - 1 >= h.buttons.length) ? (this.timeOutSecs[h.buttons.length] * 1000) : (this.timeOutSecs[this.timeOutSecs.length - 1] * 1000);
        alert("timeout : " + h.timeout)
      }
      var g = this;
      e.find("a").bind("keydown", function () {
        g.key(event.keyCode)
      }, false);
      if (h.dim) {
        e.find(".dim").show()
      } else {
        e.find(".dim").hide()
      }
      this._endLayoutSetting();
      e.hide();
      alert("[sf.Popup] _init() END");
      
      //LDW>
      compSetAttrPopup(this.widget());
    },
    _createButtons: function () {
      alert("[sf.Popup] _createButtons()");
      var l = this.options,
        g = this.view,
        f = this.widget();
      var e = f.find(".buttons");
      if (!e) {
        return
      }
      e.empty();
      g.buttons = null;
      if (l.buttons) {
        g.buttons = [];
        alert(l.buttons.length + " buttons");
        for (var j = 0; j < l.buttons.length; j++) {
          var h = b.tmpl(this.templates.buttonItem, {
            buttontext: l.buttons[j]
          });
          e.append(h);
          g.buttons.push(h);
          var k = this;
          h.bind("click", (function (m) {
            return function () {
              k._handleButtonSelect(m)
            }
          })(j))
        }
      }
    },
    _setPopupLayout: function () {
      alert("[sf.Popup] _setPopupLayout()");
      var u = this.options,
        r = this.view,
        q = this.widget();
      this.popupWidth = q.width() || 500;
      alert("this.popupWidth: " + this.popupWidth);
      if (u.title) {
        var m = parseInt(q.find(".title").css("left"), 10);
        //LDW> q.find(".title").width(this.popupWidth - (m * 2))
        q.find(".title").width(this.popupWidth - (m * 2)).html(u.title);
      }
      if (u.keyhelp) {
        var n = parseInt(q.find(".keyhelp").css("left"), 10);
        q.find(".keyhelp").width(this.popupWidth - (n * 2));
        q.find(".keyhelp").sfKeyHelp(u.keyhelp)
      }
      var k = parseInt(100 / 720 * curWidget.height, 10);
      if (r.buttons && r.buttons.length > 0) {
        q.find(".sf-ui-button").each(function (o) {
          alert(b(this).width());
          if (b(this).width() < k) {
            //LDW> b(this).width(k)
            b(this).width("130px");
          }
        })
      }
      var z = q.find(".buttons").width();
      var B = q.find(".mid .left").width();
      var f = q.find(".mid .right").width();
      alert("Center width from popup width : " + (this.popupWidth - (B + f)));
      alert("Center width from button width : " + z);
      var p = Math.max(this.popupWidth - (B + f), z);
      alert("bg center width : " + p);
      //LDW> q.find(".bg .center").width(p);
      this.popupWidth = p + (B + f);
      alert("update popupWidth : " + this.popupWidth);
      q.css("width", this.popupWidth + "px");
      q.find(".text").css("padding-top", "0px");
      var l = parseInt(r.text.css("left"), 10);
      var h = this.popupWidth - (2 * l);
      alert("text width: " + h);
      r.text.width(h).html(u.text);
      alert("Scroll Width : " + r.text.get(0).scrollWidth);
      if (parseInt(r.text.get(0).scrollWidth, 10) > h) {
        alert("TEXT OVERFLOW");
        r.text.html(c(u.text))
      }
      alert("Text : " + u.text);
      var s = q.find(".text").height();
      alert("textheight: " + s);
      var g = parseInt(r.text.css("top"), 10);
      var x = q.find(".bg .top").height();
      var A = q.find(".bg .bottom").height();
      alert("textTop : " + g);
      alert("bgTopHeight : " + x);
      alert("bgBottomHeight : " + A);
      if (r.buttons && r.buttons.length > 0) {
        q.find(".buttons").css({
          left: parseInt((this.popupWidth - z) / 2, 10) + "px"
        }).show();
        var e = q.find(".buttons").outerHeight(true);
        this.popupHeight = g + s + e
      } else {
        q.find(".buttons").hide();
        this.popupHeight = g + s + g;
        if (this.popupHeight < (x + A)) {
          var t = parseInt(((x + A) - this.popupHeight) / 2, 10);
          q.find(".text").css("padding-top", t + "px")
        }
      }
      if (this.popupHeight < (x + A)) {
        this.popupHeight = (x + A)
      }
      var y = Math.max(this.popupHeight - (x + A), 0);
      alert("middle height : " + y);
      q.find(".bg .mid").height(y);
      q.find(".bg .mid div").height(y);
      q.height(this.popupHeight);
      var j = sf.env.getPopupOpacity();
      alert("Popup opacity: " + j);
      if (j > 0 && j <= 1) {
        alert("Apply popup opacity");
        q.find(".bg.alpha").css("opacity", j)
      }
    },
    _centerPopup: function () {
      alert("[sf.Popup] _centerPopup()");
      var e = this.widget();
      e.css("left", ($(document).width() - this.popupWidth) / 2);
      e.css("top", ($(document).height() - this.popupHeight) / 2)
    },
    _focus: function (h) {
      alert("[sf.Popup] _focus(" + h + ")");
      var g = this.options,
        e = this.view;
      for (var f = 0; f < e.buttons.length; f++) {
        if (f == h) {
          e.buttons[f].addClass("sf-ui-button-focus").find("div").addClass("focus")
        } else {
          e.buttons[f].removeClass("sf-ui-button-focus").find("div").removeClass("focus")
        }
      }
      g.focus = h;
      alert("[sf.Popup] _focus() END")
    },
    _setTimer: function () {
      alert("[sf.Popup] _setTimer()");
      var e = this,
        g = e.options,
        f = g.timeout;
      this._clearTimer();
      if (f && f > 0) {
        this.timer = setTimeout(function () {
          e.hide(true)
        }, f)
      }
      alert("\ttimeout: " + f)
    },
    _clearTimer: function () {
      alert("[sf.Popup] _clearTimer()");
      if (this.timer) {
        clearTimeout(this.timer);
        this.timer = null
      }
    },
    _setOption: function (f, g) {
      alert("[sf.Popup] _setOption(" + f + ", " + g + ")");
      var h = this.options,
        e = this.widget();
      this._beginLayoutSetting();
      switch (f) {
      case "text":
        if (g) {
          h.text = g;
          this._setPopupLayout();
          this._centerPopup()
        }
        break;
      case "callback":
        if (g) {
          h.callback = g
        }
        break;
      case "timeout":
        if (b.isPlainObject(g)) {
          h.timeout = g
        } else {
          alert("[AF ui] sfPopup could not set timeOut. Bad value.")
        }
        break;
      case "focus":
        if (g >= 0 && g < h.buttons.length) {
          this._focus(g)
        }
        break;
      case "buttons":
        if (typeof g == "string") {
          h.buttons = [g]
        } else {
          if (!g.length) {
            h.buttons = null
          } else {
            h.buttons = g
          }
        }
        this._createButtons();
        this._setPopupLayout();
        this._centerPopup();
        break;
      case "defaultFocus":
        this.options.defaultFocus = g;
        break;
      case "title":
        this.options.title = g;
        //LDW>
        this._setPopupLayout();
        break;
      case "keyhelp":
        this.options.keyhelp = g;
        break;
      case "dim":
        if (g === true || g === false) {
          this.options.dim = g
        }
        break;
      case "actionpopup":
        if (g === true || g === false) {
          this.options.actionpopup = g
        }
        break;
      case "onkeydown":
        if (g instanceof Function) {
          this.options.onkeydown = g
        }
        break
      }
      this._endLayoutSetting()
    },
    _destroy: function () {
      var e = this.widget();
      e.empty()
    },
    show: function () {
      alert("[sf.Popup] show()");
      var e = this.widget(),
        f = this.view,
        g = this.options;
      g.focus = g.defaultFocus;
      e.show();
      this._setTimer();
      this.handlerId = null;
      if (sf.scene._isSceneArchUsed()) {
        this.handlerId = sf.scene.pushKeyHandler(function () {
          this.key()
        }, {
          context: this
        })
      } else {
        e.find("a").focus()
      }
      this._focus(g.focus);
      alert("[sf.Popup] show() END");
      return this
    },
    hide: function (h) {
      alert("[sf.Popup] hide(" + (h || "") + ")");
      var f = this.widget(),
        g = this.view,
        k = this.options;
      f.hide();
      this._clearTimer();
      if (this.handlerId) {
        sf.scene.removeKeyHandler(this.handlerId);
        this.handlerId = null
      }
      if (typeof k.callback === "function") {
        try {
          k.callback(h ? -1 : (k.buttons && k.buttons.length ? k.focus : -1))
        } catch (j) {
          alert("EXCEPTION(Popup callback): " + j)
        }
      }
      alert("[sf.Popup] hide() END")
    },
    key: function (g) {
      alert("[sf.Popup] key(" + (g || "") + ")");
      g = g || event.keyCode;
      alert("[AF ui] sfPopup keyctl(" + g + ")");
      var h = this.options,
        f = this.view,
        e = this.widget();
      this._setTimer();
      if (h.onkeydown && h.onkeydown instanceof Function && g != sf.key.RETURN && g != sf.key.EXIT) {
        if (!h.onkeydown.call(this, g)) {
          return
        }
      }
      switch (g) {
      case (sf.key.LEFT):
        if (!h.buttons || h.buttons.length <= 1) {
          return
        }
        this._focus((h.focus - 1 + h.buttons.length) % h.buttons.length);
        break;
      case (sf.key.RIGHT):
        if (!h.buttons || h.buttons.length <= 1) {
          return
        }
        this._focus((h.focus + 1) % h.buttons.length);
        break;
      case (sf.key.ENTER):
        this._handleButtonSelect();
        break;
      case (sf.key.RETURN):
      case (sf.key.EXIT):
        sf.key.preventDefault();
        this.hide(true);
        break
      }
    },
    _handleButtonSelect: function (g) {
      alert("[sf.Popup] _handleButtonSelect(" + (g >= 0 || "") + ")");
      var h = this.options,
        f = this.view,
        e = this.widget();
      if (typeof g == "number" && g >= 0 && g < h.buttons.length) {
        h.focus = g
      }
      this.hide()
    }
  });
  sf.ui.bridge(a, sf.ui.Popup);
  sf.ui.addSelector(a);
  function c(e) {
    var k = 3;
    var j = "";
    var g = "<wbr/>";
    var h = 0;
    for (var f = 0; f < e.length; f++) {
      if (e.charAt(f) == " ") {
        j += "&nbsp;";
        h = 0
      } else {
        if (h >= k && f < e.length - 1) {
          j += g;
          h = 0
        }
        j += e.charAt(f);
        h++
      }
    }
    return j
  }
}(jQuery));
(function ($) {
  var widgetName = "sfDatepicker";
  var MARGIN_ITEMS = 4;
  var region = null;
  var regionalInputElement = {
    1: ["time_year", "time_month", "time_day", "time_ampm", "time_hour", "time_minute"],
    2: ["time_month", "time_day", "time_year", "time_hour", "time_minute", "time_ampm"],
    3: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    4: ["time_day", "time_month", "time_year", "time_hour24", "time_minute"],
    5: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    6: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    7: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    8: ["time_day", "time_month", "time_year", "time_hour24", "time_minute"],
    9: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    10: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    11: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    12: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    13: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    14: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    15: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    16: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    17: ["time_day", "time_month", "time_year", "time_hour", "time_minute", "time_ampm"],
    0: null,
  };
  sf.ui.Datepicker = sf.ui.widgetFactory({
    baseCssClass: "sf-ui-datepicker",
    widgetName: widgetName,
    region: region,
    dayNormalYear: [31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    dayLeapYear: [31, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    inputElement: regionalInputElement[2],
    options: {
      title: null,
      timePicker: false,
      timeout: 30,
      format: "yyyy-MM-dd",
      callback: null,
      date: new Date()
    },
    templates: {
      frame: $.template(null, "<div class='dim' waper_focus='false'></div><div class='bg alpha' waper_focus='false'><div class='bgTop' waper_focus='false'><div class='leftTop' waper_focus='false'></div><div class='centerTop' waper_focus='false'></div><div class='rightTop' waper_focus='false'></div></div><div class='bgMid' waper_focus='false'><div class='leftMid' waper_focus='false'></div><div class='centerMid' waper_focus='false'></div><div class='rightMid' waper_focus='false'></div></div><div class='bgBtm' waper_focus='false'><div class='leftBtm' waper_focus='false'></div><div class='centerBtm' waper_focus='false'></div><div class='rightBtm' waper_focus='false'></div></div></div><div class='bg' waper_focus='false'><div class='bgTop' waper_focus='false'><div class='leftTop' waper_focus='false'></div><div class='centerTop' waper_focus='false'></div><div class='rightTop' waper_focus='false'></div></div><div class='bgMid' waper_focus='false'><div class='leftMid' waper_focus='false'></div><div class='centerMid' waper_focus='false'></div><div class='rightMid' waper_focus='false'></div></div><div class='bgBtm' waper_focus='false'><div class='leftBtm' waper_focus='false'></div><div class='centerBtm' waper_focus='false'></div><div class='rightBtm' waper_focus='false'></div></div></div><div class='titletext' waper_focus='false'>${titletext}</div><div class='keyhelp' waper_focus='false'></div><div class='time_unit' waper_focus='false'>{{each unittexts}}<div class='${$index}' waper_focus='false'>${$value}</div>{{/each}}</div><div class='time_text' waper_focus='false'></div><a href=\"javascript:void(0);\" onkeydown=\"$('#${id}').sfDatepicker('key');\" waper_focus='false'></a>"),
      inputCell: $.template(null, "<div class='inputCell ${selectId}' waper_focus='false'><div class='left' waper_focus='false'></div><div class='center' waper_focus='false'>${selectText}</div><div class='right' waper_focus='false'></div></div>")
    },
    tempDate: {
      year: 0,
      month: 0,
      day: 0,
      ampm: "am",
      hour: 0,
      minute: 0
    },
    dataDefault: {
      focusIndex: 0,
      patternParts: /^(yy(yy)?|M(M(M(M)?)?)?|d(d)?|EEE(E)?|a|H(H)?|h(h)?|m(m)?|s(s)?|S)/,
      monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    },
    _create: function () {
      alert("[sf.Datepicker] _create()");
      this._super();
      if (!region) {
        region = sf.env.getTargetLocation()
      }
      alert("Selected type: " + region);
      this.inputElement = regionalInputElement[region];
      if (!this.inputElement) {
        region = sf.env.TARGETLOCATION_USA;
        this.inputElement = regionalInputElement[region];
        alert("Alternative type: " + region)
      }
      if (!this.options.title && this.options.title !== "") {
        this.options.title = sf.lang.TV_SID_SETTING
      }
      this.tempDate.ampm = sf.lang.SID_AM;
      this.dataDefault.monthNames = [sf.lang.SID_JANUARY, sf.lang.SID_FEBRUARY, sf.lang.SID_MARCH, sf.lang.SID_APRIL, sf.lang.SID_MAY_FULL, sf.lang.SID_JUNE, sf.lang.SID_JULY, sf.lang.SID_AUGUST, sf.lang.SID_SEPTEMBER, sf.lang.SID_OCTOBER, sf.lang.SID_NOVEMBER, sf.lang.SID_DECEMBER];
      this.dataDefault.monthNamesShort = [sf.lang.SID_JAN, sf.lang.SID_FEB, sf.lang.SID_MAR, sf.lang.SID_APR, sf.lang.SID_MAY, sf.lang.SID_JUN, sf.lang.SID_JUL, sf.lang.SID_AUG, sf.lang.SID_SEP, sf.lang.SID_OCT, sf.lang.SID_NOV, sf.lang.SID_DEC];
      this.dataDefault.dayNames = [sf.lang.SID_SUNDAY, sf.lang.SID_MONDAY, sf.lang.SID_TUESDAY, sf.lang.SID_WEDNESDAY, sf.lang.SID_THURSDAY, sf.lang.SID_FRIDAY, sf.lang.SID_SATURDAY];
      this.dataDefault.dayNamesShort = [sf.lang.SID_SUN, sf.lang.SID_MON, sf.lang.SID_TUE, sf.lang.SID_WED, sf.lang.SID_THU, sf.lang.SID_FRI, sf.lang.SID_SAT]
    },
    _init: function () {
      alert("[sf.Datepicker] _init()");
      this._createTpl();
      this.widget().hide();
      this._setDate(this.options.date);
      
      //LDW>      
      compSetAttrDatepicker(this.widget());
    },
    _createTpl: function () {
      var leftPx, widthPx, parentId;
      this._beginLayoutSetting();
      if (this.options.timePicker) {
        if (this.inputElement.length == 6) {
          this.widget().addClass("timepicker")
        } else {
          if (this.inputElement.length == 5) {
            this.widget().addClass("timepicker24")
          }
        }
      } else {
        this.widget().removeClass("timepicker");
        this.widget().removeClass("timepicker24")
      }
      var dataTpl = {
        id: this.widget().attr("id"),
        titletext: this.options.title
      };
      var unittexts = {
        unit_year: sf.lang.SID_YEAR,
        unit_month: sf.lang.SID_MONTH,
        unit_day: sf.lang.SID_DAY,
        unit_ampm: sf.lang.SID_AM_PM,
        unit_hour: sf.lang.SID_HOUR,
        unit_hour24: sf.lang.SID_HOUR,
        unit_minute: sf.lang.SID_MINUTE,
      };
      dataTpl.unittexts = {};
      for (var i = 0; i < this.inputElement.length; i++) {
        var unit = "unit_" + this.inputElement[i].toLowerCase().split("_")[1];
        if (!this.options.timePicker && unit != "unit_year" && unit != "unit_month" && unit != "unit_day") {
          alert("pass " + unit);
          continue
        }
        dataTpl.unittexts[unit] = unittexts[unit]
      }
      this.widget().empty().append($.tmpl(this.templates.frame, dataTpl));
      this.widget().css({
        left: ($(document).width() - this.widget().find(".bg").width()) / 2 + "px",
        top: ($(document).height() - this.widget().find(".bg").height()) / 2 + "px"
      });
      this.widget().find(".keyhelp").sfKeyHelp({
        iconset: "WHITE",
        updown: sf.lang.SID_CHANGE_KR_CHANGE,
        enter: sf.lang.SID_SELECT,
        "return": sf.lang.SID_RETURN
      });
      this._endLayoutSetting()
    },
    _setOption: function (name, value) {
      switch (name) {
      case "timePicker":
        this.options.timePicker = value;
        this.widget().empty();
        this._createTpl();
        this._updateTimeHtml();
        break;
      case "date":
        this.options.date = value;
        this._setDate(this.options.date);
        this._updateTimeHtml();
        break;
      case "format":
        this.options.format = value;
        break;
      case "title":
        this.options.title = value;
        break;
      case "timeout":
        this.options.timeout = value;
        break;
      case "callback":
        this.options.callback = value;
        break
      }
    },
    show: function () {
      alert("[sf.Datepicker] _show()");
      this._setDate(this.options.date);
      this._updateTimeHtml();
      this.widget().show();
      this._setFocus(0);
      this._popupTimerProcess();
      this.handlerId = null;
      if (sf.scene._isSceneArchUsed()) {
        this.handlerId = sf.scene.pushKeyHandler(function () {
          this.key()
        }, {
          context: this
        })
      } else {
        this.widget().find("a").focus()
      }
      return this
    },
    _setFocus: function (focusIndex) {
      alert("[sf.Datepicker] _setFocus(" + focusIndex + ")");
      this.dataDefault.focusIndex = focusIndex;
      this.widget().find(".inputCell").removeClass("focused").eq(this.dataDefault.focusIndex).addClass("focused")
    },
    _getDateFormat: function (date, pattern) {
      alert("[sf.Datepicker] _getDateFormat(" + date + "," + pattern + ")");
      var matched, dd = this.dataDefault,
        result = [];
      while (pattern.length > 0) {
        dd.patternParts.lastIndex = 0;
        matched = dd.patternParts.exec(pattern);
        if (matched) {
          result.push(this.patternValue[matched[0]].call(this, date));
          pattern = pattern.slice(matched[0].length)
        } else {
          result.push(pattern.charAt(0));
          pattern = pattern.slice(1)
        }
      }
      return result.join("")
    },
    _setDate: function (date) {
      alert("[sf.Datepicker] _setDate(): " + date);
      var ted = this.tempDate;
      if (typeof date === "object") {
        ted.year = date.getFullYear();
        ted.month = this._toFixedWidth(parseInt(date.getMonth(), 10) + 1, 2, "0");
        ted.day = this._toFixedWidth(date.getDate(), 2, "0");
        var hour = date.getHours();
        if (hour >= 0 && date.getHours() <= 11) {
          ted.ampm = sf.lang.SID_AM;
          hour = (hour == 0) ? 12 : hour;
          ted.hour = this._toFixedWidth(hour, 2, "0")
        } else {
          ted.ampm = sf.lang.SID_PM;
          ted.hour = (hour == 12 ? hour : this._toFixedWidth(hour - 12, 2, "0"))
        }
        ted.minute = this._toFixedWidth(date.getMinutes(), 2, "0");
        this._setHour24()
      }
    },
    _daysInMonth: function (iYear, iMonth) {
      alert("[sf.Datepicker] _daysInMonth");
      var endDay, isLunar;
      isLunar = (((iYear % 4) === 0) || ((iYear % 4) === 0 && ((iYear % 100) !== 0 || (iYear % 400) === 0)));
      endDay = (isLunar) ? this.dayLeapYear[parseInt(iMonth, 10)] : this.dayNormalYear[parseInt(iMonth, 10)];
      return endDay
    },
    _toFixedWidth: function (value, length, fill) {
      alert("[sf.Datepicker] _toFixedWidth()");
      var n;
      if (!fill) {
        fill = "0"
      }
      var result = value.toString();
      var padding = length - result.length;
      if (padding < 0) {
        result = result.substr(-padding)
      } else {
        for (n = 0; n < padding; n++) {
          result = fill + result
        }
      }
      return result
    },
    _updateTimeHtml: function () {
      alert("[sf.Datepicker] _updateTimeHtml()");
      var inpEle = this.inputElement,
        td = this.tempDate,
        dateValue = [];
      for (var i = 0; i < inpEle.length; i++) {
        if (!this.options.timePicker && inpEle[i] != "time_year" && inpEle[i] != "time_month" && inpEle[i] != "time_day") {
          continue
        }
        dateValue.push({
          selectId: inpEle[i],
          selectText: eval("td." + inpEle[i].toLowerCase().split("_")[1])
        });
        alert("td." + inpEle[i].toLowerCase().split("_")[1])
      }
      this.widget().find(".time_text").html($.tmpl(this.templates.inputCell, dateValue));
      var self = this;
      this.widget().find(".time_text .inputCell .center").each(function (index, elmt) {
        $(elmt).bind("click", (function (index) {
          var idx = index;
          return function () {
            self._resetCloseTimer();
            self._setFocus(idx)
          }
        })(index));
        $(elmt).bind("mousewheel", (function (index) {
          var idx = index;
          return function () {
            alert("MouseWheel event: " + event.wheelDelta);
            self._setFocus(idx);
            var fn = self.inputElement[self.dataDefault.focusIndex].replace("_", "");
            self._resetCloseTimer();
            self._setInput[fn].call(self, event.wheelDelta > 0 ? true : false);
            if (fn == "timeyear" || fn == "timemonth") {
              var days = self._daysInMonth(self.tempDate.year, self.tempDate.month);
              if (self.tempDate.day > days) {
                self.tempDate.day = days
              }
            }
            self._updateTimeHtml()
          }
        })(index))
      });
      this._setFocus(this.dataDefault.focusIndex)
    },
    _getDateObject: function (date) {
      alert("[sf.Datepicker] _getDateObject(" + date + ")");
      var year = date.year,
        month = date.month,
        day = date.day,
        hour = parseInt(date.hour, 10);
      var dateString = "";
      var dateobj = null;
      if (this.options.timePicker) {
        if (date.ampm === sf.lang.SID_AM) {
          hour = (hour == 12) ? 0 : hour
        } else {
          hour = (hour == 12) ? 12 : hour + 12
        }
        dateobj = new Date(year, month - 1, day, hour, date.minute, 0)
      } else {
        dateobj = new Date(year, month - 1, day)
      }
      alert(dateobj);
      return dateobj
    },
    patternValue: {
      yy: function (date) {
        return this._toFixedWidth(date.getFullYear(), 2)
      },
      yyyy: function (date) {
        return date.getFullYear().toString()
      },
      MMMM: function (date) {
        return this.dataDefault.monthNames[date.getMonth()]
      },
      MMM: function (date) {
        return this.dataDefault.monthNamesShort[date.getMonth()]
      },
      MM: function (date) {
        return this._toFixedWidth(date.getMonth() + 1, 2)
      },
      M: function (date) {
        return date.getMonth() + 1
      },
      dd: function (date) {
        return this._toFixedWidth(date.getDate(), 2)
      },
      d: function (date) {
        return date.getDate()
      },
      EEEE: function (date) {
        return this.dataDefault.dayNames[date.getDay()]
      },
      EEE: function (date) {
        return this.dataDefault.dayNamesShort[date.getDay()]
      },
      HH: function (date) {
        return this._toFixedWidth(date.getHours(), 2)
      },
      H: function (date) {
        return date.getHours()
      },
      hh: function (date) {
        var hours = date.getHours();
        if (hours == 0) {
          hours = 12
        } else {
          if (hours > 12) {
            hours = (hours - 12)
          } else {}
        }
        return this._toFixedWidth(hours > 12 ? hours - 12 : hours, 2)
      },
      h: function (date) {
        var hours = date.getHours();
        if (hours == 0) {
          hours = 12
        } else {
          if (hours > 12) {
            hours = (hours - 12)
          } else {}
        }
        return hours
      },
      mm: function (date) {
        return this._toFixedWidth(date.getMinutes(), 2)
      },
      m: function (date) {
        return date.getMinutes()
      },
      ss: function (date) {
        return this._toFixedWidth(date.getSeconds(), 2)
      },
      s: function (date) {
        return date.getSeconds()
      },
      S: function (date) {
        return this._toFixedWidth(date.getMilliseconds(), 3)
      },
      a: function (date) {
        return (date.getHours() >= 0 && date.getHours() <= 11) ? sf.lang.SID_AM : sf.lang.SID_PM
      }
    },
    _navigate: function (nav) {
      var next, prev;
      if (nav && this.dataDefault.focusIndex < (this.options.timePicker ? 6 : 3) - 1) {
        this._setFocus(this.dataDefault.focusIndex + 1)
      } else {
        if (!nav && this.dataDefault.focusIndex > 0) {
          this._setFocus(this.dataDefault.focusIndex - 1)
        }
      }
    },
    key: function () {
      alert("[sf.Datepicker] key()");
      var EKC = event.keyCode,
        fn = this.inputElement[this.dataDefault.focusIndex].replace("_", "");
      this._resetCloseTimer();
      switch (EKC) {
      case sf.key.LEFT:
        this._navigate(false);
        break;
      case sf.key.RIGHT:
        this._navigate(true);
        break;
      case sf.key.UP:
        this._setInput[fn].call(this, true);
        if (fn == "timeyear" || fn == "timemonth") {
          var days = this._daysInMonth(this.tempDate.year, this.tempDate.month);
          if (this.tempDate.day > days) {
            this.tempDate.day = days
          }
        }
        this._updateTimeHtml();
        break;
      case sf.key.DOWN:
        this._setInput[fn].call(this, false);
        if (fn == "timeyear" || fn == "timemonth") {
          var days = this._daysInMonth(this.tempDate.year, this.tempDate.month);
          if (this.tempDate.day > days) {
            this.tempDate.day = days
          }
        }
        this._updateTimeHtml();
        break;
      case sf.key.ENTER:
        this.options.date = this._getDateObject(this.tempDate);
        $.data(this.widget(), "date", this.options.date);
        alert(this.options.date);
        this._closePopup(this._getDateFormat(this.options.date, this.options.format), this.options.date);
        break;
      case sf.key.RETURN:
      case sf.key.EXIT:
        sf.key.preventDefault();
        this._closePopup(null);
        break
      }
    },
    _popupTimerProcess: function () {
      alert("[sf.Datepicker] _popupTimerProcess()");
      this._resetCloseTimer()
    },
    _resetCloseTimer: function () {
      alert("[sf.Datepicker] _resetCloseTimer()");
      var self = this;
      if (this.hideTimer) {
        clearTimeout(this.hideTimer);
        this.hideTimer = null
      }
      /*LDW>
      this.hideTimer = setTimeout(function () {
        alert("Datepicker timeout");
        self._closePopup(null)
      }, this.options.timeout * 1000)
      */
    },
    _closePopup: function (result, date) {
      alert("[sf.Datepicker] _closePopup(" + result + ", " + date + ")");
      this.widget().hide();
      if (this.hideTimer) {
        clearTimeout(this.hideTimer);
        this.hideTimer = null
      }
      if (this.handlerId) {
        sf.scene.removeKeyHandler(this.handlerId);
        this.handlerId = null
      } else {
        sf.scene.returnFocus()
      }
      if (this.options.callback && this.options.callback instanceof Function) {
        try {
          this.options.callback(result || null, date || null)
        } catch (e) {
          alert("EXCEPTION(Datepicker callback) : " + e)
        }
      }
    },
    _setHour24: function () {
      var ted = this.tempDate;
      ted.hour24 = parseInt(ted.hour, 10);
      if (ted.ampm == sf.lang.SID_AM && ted.hour24 == 12) {
        ted.hour24 = 0
      } else {
        if (ted.ampm == sf.lang.SID_PM && ted.hour24 != 12) {
          ted.hour24 += 12
        }
      }
      ted.hour24 = this._toFixedWidth(ted.hour24, 2, "0")
    },
    _setInput: {
      timeyear: function (action) {
        var ted = this.tempDate;
        if (action) {
          if (ted.year < 2900) {
            ted.year++
          }
        } else {
          if (ted.year > 1900) {
            ted.year--
          }
        }
      },
      timemonth: function (action) {
        var ted = this.tempDate;
        if (action) {
          if (ted.month < 12) {
            ted.month++;
            ted.month = this._toFixedWidth(ted.month, 2, "0")
          } else {
            ted.month = this._toFixedWidth(1, 2, "0")
          }
        } else {
          if (ted.month > 1) {
            ted.month--;
            ted.month = this._toFixedWidth(ted.month, 2, "0")
          } else {
            ted.month = 12
          }
        }
      },
      timeday: function (action) {
        var ted = this.tempDate;
        if (action) {
          var endDay = this._daysInMonth(ted.year, ted.month);
          if (parseInt(this.tempDate.day, 10) < endDay) {
            ted.day++;
            ted.day = this._toFixedWidth(ted.day, 2, "0")
          } else {
            ted.day = this._toFixedWidth(1, 2, "0")
          }
        } else {
          if (parseInt(ted.day, 10) > 1) {
            ted.day--;
            ted.day = this._toFixedWidth(ted.day, 2, "0")
          } else {
            ted.day = this._daysInMonth(ted.year, ted.month)
          }
        }
      },
      timehour: function (action) {
        var ted = this.tempDate;
        if (action) {
          if (ted.hour < 12) {
            ted.hour++;
            ted.hour = this._toFixedWidth(ted.hour, 2, "0")
          } else {
            ted.hour = this._toFixedWidth(1, 2, "0")
          }
        } else {
          if (ted.hour > 1) {
            ted.hour--;
            ted.hour = this._toFixedWidth(ted.hour, 2, "0")
          } else {
            ted.hour = 12
          }
        }
      },
      timehour24: function (action) {
        var ted = this.tempDate;
        if (action) {
          if (ted.hour < 12) {
            ted.hour++;
            if (ted.hour == 12) {
              ted.ampm = (ted.ampm == sf.lang.SID_AM) ? sf.lang.SID_PM : sf.lang.SID_AM
            }
          } else {
            ted.hour = 1
          }
        } else {
          if (ted.hour < 12) {
            ted.hour--;
            if (ted.hour == 0) {
              ted.hour = 12
            }
          } else {
            ted.hour = 11;
            ted.ampm = (ted.ampm == sf.lang.SID_AM) ? sf.lang.SID_PM : sf.lang.SID_AM
          }
        }
        ted.hour = this._toFixedWidth(ted.hour, 2, "0");
        this._setHour24()
      },
      timeampm: function () {
        this.tempDate.ampm = (this.tempDate.ampm === sf.lang.SID_AM) ? sf.lang.SID_PM : sf.lang.SID_AM
      },
      timeminute: function (action) {
        var ted = this.tempDate;
        if (action) {
          if (ted.minute < 59) {
            ted.minute++;
            ted.minute = this._toFixedWidth(ted.minute, 2, "0")
          } else {
            ted.minute = this._toFixedWidth(0, 2, "0")
          }
        } else {
          if (ted.minute > 0) {
            ted.minute--;
            ted.minute = this._toFixedWidth(ted.minute, 2, "0")
          } else {
            ted.minute = 59
          }
        }
      }
    }
  });
  function DateFormat2PickerFormat(str) {
    var map = {
      d: "dd",
      D: "EEE",
      j: "d",
      l: "EEEE",
      F: "MMMM",
      m: "MM",
      M: "MMM",
      n: "M",
      Y: "yyyy",
      y: "yy",
      a: "a",
      A: "a",
      g: "h",
      G: "H",
      h: "hh",
      H: "HH",
      i: "mm"
    };
    str = str.replace(/(d|D|j|l|F|m|M|n|Y|y|a|A|g|G|h|H|i)/gi, function ($1) {
      return map[$1] || $1
    });
    alert(str);
    return str
  }
  sf.ui.Datepicker.getLocaleDateFormat = function () {
    var tmp = Date.getLocaleFormatStr().split(" ")[0];
    return DateFormat2PickerFormat(tmp)
  };
  sf.ui.Datepicker.getLocaleTimeFormat = function () {
    return DateFormat2PickerFormat(Date.getLocaleFormatStr())
  };
  sf.ui.bridge(widgetName, sf.ui.Datepicker);
  sf.ui.addSelector(widgetName)
}(jQuery));
(function (c) {
  var g = "sfMaps";
  var l = sf.core.getEnvValue("country").toUpperCase();
  var e = true;
  function h(n) {
    if (e) {
      alert("[AF ui.maps] " + n)
    }
  }
  function m(n) {
    alert("[AF ui.maps] " + n)
  }
  var k = "/ui.maps";
  var d = {
    url: k + "/sfmaps_marker.png",
    anchorpos: [11, 31]
  };
  var j = {};
  j.google = {
    checkAvailFunc: function () {
      return window.google && window.google.maps
    },
    cls: function (n, y) {
      h("[sfMapsGoogle(" + n + ")]create");
      var o = {
        roadmap: google.maps.MapTypeId.ROADMAP,
        hybrid: google.maps.MapTypeId.HYBRID,
        satellite: google.maps.MapTypeId.SATELLITE,
        terrain: google.maps.MapTypeId.TERRAIN
      };
      var q = {};
      for (var s in o) {
        q[o[s]] = s + ""
      }
      h("Country : " + l + a[l]);
      var p = l && a[l] ? a[l] : a["default"];
      this.elmtID = n;
      this.bMoving = false;
      this.size = {
        width: parseInt(c("#" + n).width(), 10),
        height: parseInt(c("#" + n).height(), 10)
      };
      var r = {
        center: [p[0], p[1]],
        zoom: f(this.size.width, this.size.height, p[2]),
        maptype: "roadmap",
        disableDefaultUI: true
      };
      y = c.extend(r, y);
      var u = document.getElementById(this.elmtID);
      this.objMap = new google.maps.Map(u, {
        center: new google.maps.LatLng(y.center[0], y.center[1]),
        zoom: y.zoom,
        mapTypeId: o[y.maptype],
        disableDefaultUI: true
      });
      var x = this;
      google.maps.event.addListener(this.objMap, "idle", function () {
        h("[sfMapsGoogle(" + this.elmtID + ")] EVENT: idle");
        x.bMoving = false
      });
      this.moveTo = function (z) {
        h("[sfMapsGoogle(" + this.elmtID + ")]moveTo");
        if (!z || !z.center) {
          return
        }
        if (this.bMoving) {
          h("\tmap is already moving...");
          return
        }
        this.objMap.panTo(new google.maps.LatLng(z.center[0], z.center[1]));
        this.bMoving = true;
        var A = this
      };
      this.moveBy = function (z) {
        h("[sfMapsGoogle(" + this.elmtID + ")]moveBy");
        if (!z || z.x == undefined || z.y == undefined) {
          return
        }
        if (this.bMoving) {
          return
        }
        this.objMap.panBy(z.x, z.y);
        this.bMoving = true
      };
      this.zoomIn = function (z) {
        h("[sfMapsGoogle(" + this.elmtID + ")]zoomIn");
        this.bMoving = true;
        this.objMap.setZoom(this.objMap.getZoom() + 1)
      };
      this.zoomOut = function (z) {
        h("[sfMapsGoogle(" + this.elmtID + ")]zoomOut");
        this.bMoving = true;
        this.objMap.setZoom(this.objMap.getZoom() - 1)
      };
      this.setMapType = function (z) {
        h("[sfMapsGoogle(" + this.elmtID + ")]setMapType");
        if (z.type == undefined) {
          h("\ttype option is not defined...");
          return
        }
        if (!o[z.type]) {
          h("\tthere is no such a type : " + z.type);
          return
        }
        return this.objMap.setMapTypeId(o[z.type])
      };
      this.getMapType = function (z) {
        h("[sfMapsGoogle(" + this.elmtID + ")]getMapType");
        return q[this.objMap.getMapTypeId()]
      };
      this.setCenter = function (z) {
        h("[sfMapsGoogle(" + this.elmtID + ")]setCenter");
        if (!z.center && !z.center instanceof Array && z.center.length != 2) {
          return false
        }
        h("\tCenter: " + z.center[0] + ", " + z.center[1]);
        return this.objMap.setCenter(new google.maps.LatLng(z.center[0], z.center[1]))
      };
      this.getCenter = function (A) {
        h("[sfMapsGoogle(" + this.elmtID + ")]getCenter");
        if (!this.objMap) {
          return null
        }
        var z = this.objMap.getCenter();
        h("\tCenter : " + z.toString());
        return new Array(z.lat(), z.lng())
      };
      this.setZoom = function (z) {
        h("[sfMapsGoogle(" + this.elmtID + ")]setZoom");
        return this.objMap.setZoom(z.zoom)
      };
      this.getZoom = function () {
        var z = this.objMap.getZoom();
        h("[sfMapsGoogle(" + this.elmtID + ")]getZoom returns " + z);
        return z
      };
      this.addMarker = function (z) {
        h("[sfMapsGoogle(" + this.elmtID + ")]addMarker");
        if (!z.image) {
          z.image = c.extend(d, {})
        }
        if (!z.location || !z.location instanceof Array || z.location.length != 2) {
          h("\tlocation is not defined");
          return false
        }
        h("\tlocation: " + z.location[0] + ", " + z.location[1]);
        return new t({
          location: new google.maps.LatLng(z.location[0], z.location[1]),
          map: this.objMap,
          image: z.image
        })
      };
      this.addInfoWindow = function (z) {
        h("[sfMapsGoogle(" + this.elmtID + ")]addInfoWindow");
        if (!z.location || !z.location instanceof Array || z.location.length != 2) {
          h("\tlocation is not defined");
          return false
        }
        h("\tlocation: " + z.location[0] + ", " + z.location[1]);
        return new w({
          location: new google.maps.LatLng(z.location[0], z.location[1]),
          map: this.objMap,
          content: z.content || "",
          fixedwidth: z.fixedwidth || 300,
        })
      };
      function t(z) {
        this.location = z.location;
        this.image = z.image;
        if (this.image && !this.image.anchorpos) {
          this.image.anchorpos = [0, 0]
        }
        this.map = z.map;
        this.div = null;
        this.setMap(this.map)
      }
      t.prototype = new google.maps.OverlayView();
      t.prototype.onAdd = function () {
        var B = document.createElement("DIV");
        B.style.border = "none";
        B.style.borderWidth = "0px";
        B.style.position = "absolute";
        var z = document.createElement("img");
        z.src = this.image.url;
        B.appendChild(z);
        this.div = B;
        var A = this.getPanes();
        A.overlayLayer.appendChild(B)
      };
      t.prototype.draw = function () {
        var z = this.getProjection();
        h("\tsfMapsGMarker-pos : " + this.location.lat() + ", " + this.location.lng());
        var B = z.fromLatLngToDivPixel(this.location);
        h("\tsfMapsGMarker-projected pos : " + B.x + ", " + B.y);
        var A = this.div;
        A.style.left = (B.x - this.image.anchorpos[0]) + "px";
        A.style.top = (B.y - this.image.anchorpos[1]) + "px";
      };
      t.prototype.onRemove = function () {
        this.div.parentNode.removeChild(this.div);
        this.div = null
      };
      t.prototype.remove = function () {
        this.setMap(null)
      };
      function w(z) {
        this.location = z.location;
        this.map = z.map;
        this.content = z.content || "";
        this.div = null;
        this.setMap(this.map);
        this.id = "sf-ui-maps-infowin-" + (new Date()).getTime()
      }
      w.prototype = new google.maps.OverlayView();
      w.prototype.onAdd = function () {
        var C = document.createElement("DIV");
        C.style.border = "none";
        C.style.borderWidth = "0px";
        C.style.position = "absolute";
        C.id = this.id;
        var z = "";
        z += '<table border="0px" cellpadding="0px" cellspacing="0px" width="230px" waper_focus="false">';
        z += '<tr height="44px" waper_focus="false">';
        z += '<td width="44px" waper_focus="false"><div style="width:44px;height:44px;background: url(' + k + '/tooltip_top_left.png) no-repeat;" waper_focus="false"></div></td>';
        z += '<td background="' + k + '/tooltip_top_center.png" width="300px" waper_focus="false"></td>';
        z += '<td width="44px" waper_focus="false"><div style="width:44px;height:44px;background: url(' + k + '/tooltip_top_right.png) no-repeat;" waper_focus="false"></div></td>';
        z += "</tr>";
        z += '<tr height="20px" waper_focus="false">';
        z += '<td background="' + k + '/tooltip_middle_left.png" width="15px" waper_focus="false"> </td>';
        z += '<td background="' + k + '/tooltip_middle_center.png" width="200px" waper_focus="false"><div class="sf-ui-maps-infowin-content" waper_focus="false">' + this.content + "</div></td>";
        z += '<td background="' + k + '/tooltip_middle_right.png" width="15px" waper_focus="false"> </td>';
        z += "</tr>";
        z += '<tr height="44px" waper_focus="false">';
        z += '<td width="44px" waper_focus="false"><div style="width:44px;height:44px;background: url(' + k + '/tooltip_bottom_left.png) no-repeat;" waper_focus="false"></div></td>';
        z += '<td background="' + k + '/tooltip_bottom_center.png" width="300px" align="center" waper_focus="false"><div id="sf-ui-maps-infowin-arrow" style="width:44px;height:44px;background: url(' + k + '/tooltip_bottom_arrow.png) no-repeat;" waper_focus="false"></div></td>';
        z += '<td width="44px" waper_focus="false"><div style="width:44px;height:44px;background: url(' + k + '/tooltip_bottom_right.png) no-repeat;" waper_focus="false"></div></td>';
        z += "</tr>";
        z += "</table>";
        C.innerHTML = z;
        this.div = C;
        var A = this.getPanes();
        A.overlayLayer.appendChild(C);
        var B = C.getElementsByClassName("sf-ui-maps-infowin-content")[0];
        this.offsetx = c("#" + this.id).width() / 2;
        this.offsety = c("#" + this.id).height() - 12;
        h("\tOffset : " + this.offsetx + ", " + this.offsety)
      };
      w.prototype.draw = function () {
        var z = this.getProjection();
        h("\tsfMapsGMarker-pos : " + this.location.lat() + ", " + this.location.lng());
        var B = z.fromLatLngToDivPixel(this.location);
        h("\tsfMapsGMarker-projected pos : " + B.x + ", " + B.y);
        var A = this.div;
        A.style.left = (B.x - this.offsetx) + "px";
        A.style.top = (B.y - this.offsety) + "px";
      };
      w.prototype.onRemove = function () {
        this.div.parentNode.removeChild(this.div);
        this.div = null
      };
      w.prototype.remove = function () {
        this.setMap(null)
      };
      this.search = function (A) {
        h("[sfMapsGoogle(" + this.elmtID + ")]search");
        var B = new google.maps.Geocoder();
        if ((!A.address && !A.location) || !A.callback) {
          h("\t(address and location) or callback is not defined");
          return false
        }
        var z = {};
        if (A.address) {
          z.address = A.address
        } else {
          if (A.location) {
            z.latLng = new google.maps.LatLng(A.location[0], A.location[1])
          }
        }
        B.geocode(z, function (D, C) {
          if (C == google.maps.GeocoderStatus.OK) {
            A.callback({
              location: [D[0].geometry.location.lat(), D[0].geometry.location.lng()],
              address: D[0].formatted_address
            })
          } else {
            A.callback(null)
          }
        })
      }
    }
  };
  j.daum = {
    checkAvailFunc: function () {
      return window.daum && window.daum.maps
    },
    cls: function (p, y) {
      h("[sfMapsDaum(" + p + ")]create");
      this.elmtID = p;
      this.objMap = null;
      this.objRoadView = null;
      this.bMoving = false;
      var o = {
        roadmap: daum.maps.MapTypeId.ROADMAP,
        skyview: daum.maps.MapTypeId.SKYVIEW,
        hybrid: daum.maps.MapTypeId.HYBRID
      };
      var t = {};
      for (var w in o) {
        t[o[w]] = w + ""
      }
      this.size = {
        width: parseInt(c("#" + p).width(), 10),
        height: parseInt(c("#" + p).height(), 10)
      };
      function s(z) {
        return 11 - z
      }
      function r(z) {
        return z - 11
      }
      var u = {
        center: [37.258848, 127.054205],
        zoom: 0,
        maptype: "roadmap"
      };
      y = c.extend(u, y);
      var x = document.getElementById(this.elmtID);
      this.objMap = new daum.maps.Map(x, {
        center: new daum.maps.LatLng(y.center[0], y.center[1]),
        level: s(y.zoom),
        mapTypeId: o[y.maptype]
      });
      this.moveTo = function (z) {
        h("[sfMapsDaum(" + this.elmtID + ")]moveTo");
        if (!z || !z.center) {
          return false
        }
        if (this.bMoving) {
          return false
        }
        this.objMap.panTo(new daum.maps.LatLng(z.center[0], z.center[1]));
        this.bMoving = true;
        var A = this;
        setTimeout(function () {
          A.bMoving = false
        }, 500)
      };
      this.moveBy = function (I) {
        h("[sfMapsDaum(" + this.elmtID + ")]moveBy");
        if (this.bMoving) {
          return false
        }
        if (!I || I.x == undefined || I.y == undefined) {
          return false
        }
        h("\tMove : " + I.x + ", " + I.y);
        var H = this.size;
        var D = this.objMap.getBounds();
        h("\tbound : " + D);
        var E = D.getSouthWest();
        var C = D.getNorthEast();
        var A = (C.getLat() - E.getLat()) / H.height;
        h("\tlatPerPixel : " + A);
        var F = (C.getLng() - E.getLng()) / H.width;
        h("\tlngPerPixel : " + F);
        var z = this.objMap.getCenter();
        h("\tcenter : " + z);
        var B = new daum.maps.LatLng(z.getLat() + (-I.y) * A, z.getLng() + I.x * F);
        h("\tnewCenter : " + B);
        this.objMap.panTo(B);
        this.bMoving = true;
        var G = this;
        setTimeout(function () {
          G.bMoving = false
        }, 500)
      };
      this.zoomIn = function (z) {
        h("[sfMapsDaum(" + this.elmtID + ")]zoomIn");
        this.objMap.setLevel(this.objMap.getLevel() - 1)
      };
      this.zoomOut = function (z) {
        h("[sfMapsDaum(" + this.elmtID + ")]zoomOut");
        this.objMap.setLevel(this.objMap.getLevel() + 1)
      };
      this.setMapType = function (z) {
        h("[sfMapsDaum(" + this.elmtID + ")]setMapType");
        if (z.type == undefined) {
          h("\ttype option is not defined...");
          return
        }
        if (!o[z.type]) {
          h("\tNo Such a maptype : " + z.type);
          return
        }
        return this.objMap.setMapTypeId(o[z.type])
      };
      this.getMapType = function (z) {
        h("[sfMapsDaum(" + this.elmtID + ")]getMapType");
        return t[this.objMap.getMapTypeId()]
      };
      this.setZoom = function (z) {
        h("[sfMapsDaum(" + this.elmtID + ")]setZoom");
        if (!z.zoom) {
          return false
        }
        return this.objMap.setLevel(s(z.zoom))
      };
      this.getZoom = function (z) {
        var A = r(this.objMap.getLevel());
        h("[sfMapsDaum(" + this.elmtID + ")]getZoom returns " + A);
        return A
      };
      this.setCenter = function (z) {
        h("[sfMapsDaum(" + this.elmtID + ")]setCenter");
        if (!z.center && !z.center instanceof Array && z.center.length != 2) {
          return false
        }
        return this.objMap.setCenter(new daum.maps.LatLng(z.center[0], z.center[1]))
      };
      this.getCenter = function (z) {
        var A = this.objMap.getCenter();
        h("[sfMapsDaum(" + this.elmtID + ")]getCenter returns " + A.getLat() + ", " + A.getLng());
        return new Array(A.getLat(), A.getLng())
      };
      this.addMarker = function (A) {
        h("[sfMapsDaum(" + this.elmtID + ")]addMarker");
        if (!A.image) {
          A.image = c.extend(d, {})
        }
        if (!A.location || !A.location instanceof Array || A.location.length != 2) {
          h("\tlocation is not defined");
          return false
        }
        h("\tlocation: " + A.location[0] + ", " + A.location[1]);
        var z = new n({
          location: new daum.maps.LatLng(A.location[0], A.location[1]),
          map: this.objMap,
          image: A.image
        });
        return z
      };
      this.addInfoWindow = function (z) {
        h("[sfMapsDaum(" + this.elmtID + ")]addInfoWindow");
        if (!z.location || !z.location instanceof Array || z.location.length != 2) {
          h("\tlocation is not defined");
          return false
        }
        h("\tlocation: " + z.location[0] + ", " + z.location[1]);
        return new q({
          location: new daum.maps.LatLng(z.location[0], z.location[1]),
          map: this.objMap,
          content: z.content || "",
          fixedwidth: z.fixedwidth || 300,
        })
      };
      function n(z) {
        this.location = z.location;
        this.image = z.image;
        if (this.image && !this.image.anchorpos) {
          this.image.anchorpos = [0, 0]
        }
        this.map = z.map;
        this.div = null;
        this.setMap(this.map)
      }
      n.prototype = new daum.maps.AbstractOverlay();
      n.prototype.onAdd = function () {
        var B = document.createElement("DIV");
        B.style.border = "none";
        B.style.borderWidth = "0px";
        B.style.position = "absolute";
        var z = document.createElement("img");
        z.src = this.image.url;
        B.appendChild(z);
        this.div = B;
        var A = this.getPanels();
        A.overlayLayer.appendChild(B)
      };
      n.prototype.draw = function () {
        var z = this.getProjection();
        h("\tsfMapsDMarker-pos : " + this.location.getLat() + ", " + this.location.getLng());
        var B = z.pointFromCoords(this.location);
        h("\tsfMapsDMarker-projected pos : " + B.x + ", " + B.y);
        var A = this.div;
        A.style.left = (B.x - this.image.anchorpos[0]) + "px";
        A.style.top = (B.y - this.image.anchorpos[1]) + "px"
      };
      n.prototype.onRemove = function () {
        this.div.parentNode.removeChild(this.div);
        this.div = null
      };
      n.prototype.remove = function () {
        this.setMap(null)
      };
      function q(z) {
        this.location = z.location;
        this.map = z.map;
        this.content = z.content || "";
        this.div = null;
        this.setMap(this.map);
        this.id = "sf-ui-maps-infowin-" + (new Date()).getTime()
      }
      q.prototype = new daum.maps.AbstractOverlay();
      q.prototype.onAdd = function () {
        var C = document.createElement("DIV");
        C.style.border = "none";
        C.style.borderWidth = "0px";
        C.style.position = "absolute";
        C.id = this.id;
        var z = "";
        z += '<table border="0px" cellpadding="0px" cellspacing="0px" width="230px">';
        z += '<tr height="44px">';
        z += '<td width="44px"><div style="width:44px;height:44px;background: url(' + k + '/tooltip_top_left.png) no-repeat;"></div></td>';
        z += '<td background="' + k + '/tooltip_top_center.png" width="300px"></td>';
        z += '<td width="44px"><div style="width:44px;height:44px;background: url(' + k + '/tooltip_top_right.png) no-repeat;"></div></td>';
        z += "</tr>";
        z += '<tr height="20px">';
        z += '<td background="' + k + '/tooltip_middle_left.png" width="15px"> </td>';
        z += '<td background="' + k + '/tooltip_middle_center.png" width="200px"><div class="sf-ui-maps-infowin-content">' + this.content + "</div></td>";
        z += '<td background="' + k + '/tooltip_middle_right.png" width="15px"> </td>';
        z += "</tr>";
        z += '<tr height="44px">';
        z += '<td width="44px"><div style="width:44px;height:44px;background: url(' + k + '/tooltip_bottom_left.png) no-repeat;"></div></td>';
        z += '<td background="' + k + '/tooltip_bottom_center.png" width="300px" align="center"><div id="sf-ui-maps-infowin-arrow" style="width:44px;height:44px;background: url(' + k + '/tooltip_bottom_arrow.png) no-repeat;"></div></td>';
        z += '<td width="44px"><div style="width:44px;height:44px;background: url(' + k + '/tooltip_bottom_right.png) no-repeat;"></div></td>';
        z += "</tr>";
        z += "</table>";
        C.innerHTML = z;
        this.div = C;
        var A = this.getPanels();
        A.overlayLayer.appendChild(C);
        var B = C.getElementsByClassName("sf-ui-maps-infowin-content")[0];
        this.offsetx = c("#" + this.id).width() / 2;
        this.offsety = c("#" + this.id).height() - 12;
        h("\tOffset : " + this.offsetx + ", " + this.offsety)
      };
      q.prototype.draw = function () {
        var z = this.getProjection();
        h("\tsfMapsDMarker-pos : " + this.location.getLat() + ", " + this.location.getLng());
        var B = z.pointFromCoords(this.location);
        h("\tsfMapsDMarker-projected pos : " + B.x + ", " + B.y);
        h("\tOffset : " + this.offsetx + ", " + this.offsety);
        var A = this.div;
        A.style.left = (B.x - this.offsetx) + "px";
        A.style.top = (B.y - this.offsety) + "px"
      };
      q.prototype.onRemove = function () {
        this.div.parentNode.removeChild(this.div);
        this.div = null
      };
      q.prototype.remove = function () {
        this.setMap(null)
      };
      this.search = function (z) {
        h("[sfMapsDaum(" + this.elmtID + ")]search is not supported in daum map API");
        if (z.callback) {
          setTimeout(function () {
            z.callback(null)
          }, 0)
        }
      }
    }
  };
  var a = {
    "default": [16.29905, 149.41406, 2],
    AD: [42.53486, 1.60057, 11],
    AE: [23.90592, 53.86596, 7],
    AL: [41.15333, 20.16833, 7],
    AM: [40.06909, 45.03818, 7],
    AR: [-38.41609, -63.61667, 4],
    AT: [47.51623, 14.55007, 7],
    AU: [-25.27439, 133.77513, 4],
    AZ: [40.1431, 47.57692, 7],
    BA: [43.91588, 17.67907, 7],
    BB: [13.19388, -59.54319, 11],
    BE: [50.50388, 4.46993, 7],
    BG: [42.73388, 25.48583, 7],
    BH: [26.04691, 50.56045, 10],
    BO: [-16.29015, -63.58865, 5],
    BR: [-14.235, -51.92528, 4],
    BY: [53.7098, 27.95338, 6],
    CA: [56.13036, -106.34677, 4],
    CH: [46.81818, 8.22751, 8],
    CI: [7.53998, -5.54708, 7],
    CL: [-35.67514, -71.54296, 4],
    CN: [35.86166, 104.19539, 4],
    CO: [4.57086, -74.29733, 5],
    CR: [9.74891, -83.75342, 7],
    CY: [35.12641, 33.42985, 9],
    CZ: [49.81749, 15.47296, 7],
    DE: [51.16569, 10.45152, 6],
    DK: [56.26392, 9.50178, 7],
    DM: [15.41499, -61.37097, 10],
    DZ: [28.03388, 1.65962, 5],
    EC: [-1.83123, -78.1834, 6],
    EE: [58.59527, 25.0136, 7],
    EG: [26.82055, 30.80249, 6],
    ES: [40.46366, -3.74922, 6],
    FI: [64.71787, 25.2246, 5],
    FR: [46.22763, 2.21374, 6],
    GB: [53.72271, -3.51562, 6],
    GD: [12.11049, -61.65596, 11],
    GE: [32.15743, -82.90712, 6],
    GF: [3.93388, -53.12578, 7],
    GR: [39.0742, 21.82431, 6],
    GT: [15.78347, -90.23075, 7],
    GY: [4.86041, -58.93018, 6],
    HK: [22.39642, 114.10949, 10],
    HN: [15.19999, -86.2419, 7],
    HR: [45.1, 15.2, 7],
    HU: [47.16249, 19.5033, 7],
    ID: [-0.78927, 113.92132, 5],
    IE: [53.41291, -8.24389, 6],
    IL: [31.04605, 34.85161, 6],
    IN: [20.59368, 78.96288, 5],
    IS: [64.96305, -19.02083, 6],
    IT: [41.87194, 12.56738, 6],
    JM: [18.11191, -77.30804, 9],
    JO: [31.05293, 36.51855, 7],
    KE: [-0.02355, 37.90619, 6],
    KG: [41.20438, 74.76609, 7],
    KR: [35.90775, 127.76692, 6],
    KW: [29.31166, 47.48176, 8],
    KZ: [48.01957, 66.92368, 5],
    LB: [33.85472, 35.86228, 8],
    LT: [55.16943, 23.88127, 7],
    LU: [49.81527, 6.12958, 9],
    LV: [56.87963, 24.60318, 7],
    LY: [26.3351, 17.22833, 5],
    MA: [31.7917, -7.09262, 6],
    MD: [46.91275, 28.36669, 7],
    ME: [42.70867, 19.37439, 8],
    MK: [41.60863, 21.74527, 8],
    MX: [23.6345, -102.55278, 5],
    MY: [4.21048, 101.97576, 5],
    NG: [9.08199, 8.67527, 6],
    NI: [12.86541, -85.20722, 7],
    NL: [52.13263, 5.29126, 7],
    NO: [63.43086, 8.87695, 5],
    NZ: [-40.90055, 174.88597, 5],
    PA: [8.53798, -80.78212, 7],
    PE: [-9.18996, -75.01515, 5],
    PH: [12.87972, 121.77401, 5],
    PK: [30.37532, 69.34511, 5],
    PL: [51.91943, 19.14513, 6],
    PR: [18.22083, -66.59014, 7],
    PT: [39.39987, -8.22445, 6],
    PY: [-23.4425, -58.44383, 6],
    QA: [25.35482, 51.18388, 8],
    RO: [45.94316, 24.96676, 6],
    RS: [44.01652, 21.00585, 7],
    RU: [61.52401, 105.31875, 3],
    SA: [23.88594, 45.07916, 5],
    SE: [61.33353, 16.30371, 5],
    SG: [1.35208, 103.81983, 11],
    SI: [46.15124, 14.99546, 8],
    SK: [48.66902, 19.69902, 7],
    SN: [14.4974, -14.45236, 7],
    SR: [3.9193, -56.02778, 7],
    SV: [13.79418, -88.89653, 9],
    TH: [12.46876, 100.85449, 5],
    TJ: [38.35027, 71.26831, 7],
    TM: [38.96971, 59.55627, 6],
    TN: [33.88691, 9.53749, 6],
    TR: [38.96374, 35.24332, 6],
    TT: [10.6579, -61.20483, 9],
    TW: [23.69781, 120.96051, 7],
    UA: [48.37943, 31.16558, 6],
    US: [37.09024, -95.71289, 4],
    UY: [-32.52277, -55.76583, 7],
    UZ: [41.37749, 64.58526, 6],
    VE: [6.42375, -66.58973, 6],
    VN: [14.05832, 108.27719, 5],
    ZA: [-30.55948, 22.9375, 5]
  };
  function f(n, p, q) {
    h("getProjectedScale(" + n + ", " + p + ", " + q + ")");
    var o = Math.sqrt(n * n + p * p) / Math.sqrt(960 * 960 + 540 * 540);
    if (o - 1 < 0.2 && o - 1 > -0.2) {
      h("\tReturn as the scale is.");
      return q
    }
    if (o - 1 >= 0.2) {
      h("\tReturn increased scale");
      return q + Math.floor(o)
    } else {
      h("\tReturn decreased scale");
      return Math.floor(q - (Math.log(o) / Math.log(2)))
    }
  }
  for (var b in a) {
    a[b][2]
  }
  sf.ui.Maps = sf.ui.widgetFactory({
    widgetName: g,
    baseCssClass: "sf-ui-maps",
    mapObject: null,
    options: {
      api: "google",
      center: [0, 0],
      zoom: 0,
      maptype: "roadmap"
    },
    _create: function () {
      alert("[sf.service.Maps] _create()");
      this._super()
    },
    _init: function () {
      alert("[sf.service.Maps] _init()");
      //LDW>
      var widget = this.widget();
      widget.bind("DOMNodeInserted", function(e){
        if (e.target && e.target.getAttribute("data-role") == undefined) e.target.setAttribute("waper_focus","false");
      });
      
      this._super();
      if (navigator.userAgent.toLowerCase().indexOf("applewebkit") < 0) {
        alert("Not Supported browser!! Only available in webkit browser.");
        this.widget().html("Not supported in this browser.");
        return
      }
      var n = this.options;
      k = sf.core._afPath.images + "/ui.maps";
      d.url = k + "/sfmaps_marker.png";
      if (n && n.api) {
        h("Requested API : " + n.api);
        n.api = n.api.toLowerCase();
        if (j[n.api] && j[n.api].checkAvailFunc && typeof j[n.api].checkAvailFunc == "function" && j[n.api].checkAvailFunc() && j[n.api].cls && typeof j[n.api].cls == "function") {
          if (!this.widget().attr("id")) {
            this.widget().attr("id", "maps" (new Date()).getTime())
          }
          this.mapObject = new j[n.api].cls(this.widget().attr("id"), n);
          alert("MAP OBJECT: " + this.mapObject);
          
          //LDW>
          compSetAttrMaps(this.widget());
        } else {
          h("Can not find suitable maps class!");
          //LDW>
          //this.widget()[0].style.background = "url(.designer/res/images/base/720p/ui.maps/dummy_map.png) no-repeat";
          if (this.widget().children().length == 0) {
            var dummy = document.createElement("img");
            dummy.src = ".designer/res/images/base/540p/ui.maps/dummy_map.png";
            dummy.style.width = "100%";
            dummy.style.height = "100%";
            dummy.style.minWidth = "30px";
            dummy.style.minHeight = "30px";
            dummy.setAttribute("waper_focus", "false");
            this.widget().append(dummy);
          }
        }
      } else {
        h("API is not defined")
      }
    },
    _destroy: function () {
      alert("[sf.service.Maps] _destroy()")
    },
    moveBy: function (n) {
      alert("[sf.service.Maps] moveBy(" + n + ")");
      if (this.mapObject && this.mapObject.moveBy) {
        this.mapObject.moveBy(n)
      } else {
        alert("\tThere's no moveBy function in this map class: " + this.options.api)
      }
      try {
        executeImageGC()
      } catch (o) {
        alert("EXCEPTION: executeImageGC is not supported in this platform!!!")
      }
    },
    zoomIn: function () {
      alert("[sf.service.Maps] zoomIn()");
      if (this.mapObject && this.mapObject.zoomIn) {
        this.mapObject.zoomIn()
      } else {
        alert("\tThere's no zoomIn function in this map class: " + this.options.api)
      }
      try {
        executeImageGC()
      } catch (n) {
        alert("EXCEPTION: executeImageGC is not supported in this platform!!!")
      }
    },
    zoomOut: function () {
      alert("[sf.service.Maps] zoomOut()");
      if (this.mapObject && this.mapObject.zoomOut) {
        this.mapObject.zoomOut()
      } else {
        alert("\tThere's no zoomOut function in this map class: " + this.options.api)
      }
      try {
        executeImageGC()
      } catch (n) {
        alert("EXCEPTION: executeImageGC is not supported in this platform!!!")
      }
    },
    moveTo: function (n) {
      alert("[sf.service.Maps] moveTo(" + n + ")");
      if (this.mapObject && this.mapObject.moveTo) {
        this.mapObject.moveTo(n)
      } else {
        alert("\tThere's no moveTo function in this map class: " + this.options.api)
      }
      try {
        executeImageGC()
      } catch (o) {
        alert("EXCEPTION: executeImageGC is not supported in this platform!!!")
      }
    },
    setMapType: function (n) {
      alert("[sf.service.Maps] setMapType(" + n + ")");
      if (this.mapObject && this.mapObject.setMapType) {
        this.mapObject.setMapType(n)
      } else {
        alert("\tThere's no setMapType function in this map class: " + this.options.api)
      }
      try {
        executeImageGC()
      } catch (o) {
        alert("EXCEPTION: executeImageGC is not supported in this platform!!!")
      }
    },
    getMapType: function (n) {
      alert("[sf.service.Maps] getMapType(" + n + ")");
      if (this.mapObject && this.mapObject.getMapType) {
        return this.mapObject.getMapType(n)
      } else {
        alert("\tThere's no getMapType function in this map class: " + this.options.api)
      }
    },
    setCenter: function (n) {
      alert("[sf.service.Maps] setCenter(" + n + ")");
      if (this.mapObject && this.mapObject.setCenter) {
        this.mapObject.setCenter(n)
      } else {
        alert("\tThere's no setCenter function in this map class: " + this.options.api)
      }
      try {
        executeImageGC()
      } catch (o) {
        alert("EXCEPTION: executeImageGC is not supported in this platform!!!")
      }
    },
    getCenter: function (n) {
      alert("[sf.service.Maps] getCenter(" + n + ")");
      if (this.mapObject && this.mapObject.getCenter) {
        return this.mapObject.getCenter(n)
      } else {
        alert("\tThere's no getCenter function in this map class: " + this.options.api)
      }
    },
    setZoom: function (n) {
      alert("[sf.service.Maps] setZoom(" + n + ")");
      if (this.mapObject && this.mapObject.setZoom) {
        this.mapObject.setZoom(n)
      } else {
        alert("\tThere's no setZoom function in this map class: " + this.options.api)
      }
      try {
        executeImageGC()
      } catch (o) {
        alert("EXCEPTION: executeImageGC is not supported in this platform!!!")
      }
    },
    getZoom: function (n) {
      alert("[sf.service.Maps] getZoom(" + n + ")");
      if (this.mapObject && this.mapObject.getZoom) {
        return this.mapObject.getZoom(n)
      } else {
        alert("\tThere's no getZoom function in this map class: " + this.options.api)
      }
    },
    addMarker: function (n) {
      alert("[sf.service.Maps] addMarker(" + n + ")");
      if (this.mapObject && this.mapObject.addMarker) {
        return this.mapObject.addMarker(n)
      } else {
        alert("\tThere's no addMarker function in this map class: " + this.options.api)
      }
    },
    addInfoWindow: function (n) {
      alert("[sf.service.Maps] addInfoWindow(" + n + ")");
      if (this.mapObject && this.mapObject.addInfoWindow) {
        return this.mapObject.addInfoWindow(n)
      } else {
        alert("\tThere's no addInfoWindow function in this map class: " + this.options.api)
      }
    },
    search: function (n) {
      alert("[sf.service.Maps] search(" + n + ")");
      if (this.mapObject && this.mapObject.search) {
        this.mapObject.search(n)
      } else {
        alert("\tThere's no getZoom function in this map class: " + this.options.api)
      }
      return null
    }
  });
  sf.ui.bridge(g, sf.ui.Maps);
  sf.ui.addSelector(g)
}(jQuery));
(function (b) {
  var a = "sfToggleButton";
  sf.ui.ToggleButton = sf.ui.widgetFactory({
    widgetName: a,
    eventNamespace: "sfToggleButton",
    baseCssClass: "sf-ui-togglebutton",
    options: {
      text: {
        on: "On",
        off: "Off"
      },
      isOn: false,
      state: "blur",
      widgetFocusCssClass: "focused"
    },
    templates: {
      item: b.template(null, "<div class='bg' waper_focus='false'><div class='left' waper_focus='false'></div><div class='center' waper_focus='false'></div><div class='right' waper_focus='false'></div></div><div class='light' waper_focus='false'></div><div class='button_wrapper'><div class='button' waper_focus='false'></div></div>")
    },
    _init: function () {
      alert("[sf.ToggleButton] _init()");
      var e = this.options,
        c = this.widget();
      this.widget().css("visibility", "hidden");
      this._setLayout();
      this._setOn(e.isOn, false);
      this.widget().css("visibility", "visible");
      var d = this;
      //LDW>
      this.widget().unbind();
      this.widget().bind("click", function () {
        d.toggle()
      });
      
      //LDW>
      compSetAttrToggleButton(this.widget());
    },
    _setLayout: function () {
      alert("[sf.ui.ToggleButton] _setLayout()");
      var c = this.widget(),
        e = this.templates,
        h = this.options;
      c.empty();
      b.tmpl(e.item, {}).appendTo(c);
      /*LDW>
      var g = c.width();
      var f = c.find(".bg .left").width();
      var d = c.find(".bg .right").width();
      c.find(".bg .center").width(g - f - d);
      */
      c.find(".button").width("90px");
      c.find(".button").sfButton({
        text: h.isOn ? h.text.on : h.text.off
      });
      g = c.find(".button").width();
      d = c.find(".button .sf-ui-button-r").width();
      c.find(".light").css("left", (g - d) + "px");
      alert("ToggleButton HTML : " + c.html())
    },
    _setOn: function (c, e) {
      alert("[sf.ui.ToggleButton] _setOn(" + c + ")");
      var d = this.widget(),
        f = this.templates,
        h = this.options;
      if (e == undefined) {
        e = true
      }
      h.isOn = c;
      var g = d.width() - d.find(".button").width();
      d.find(".button").sfButton("option", "text", h.isOn ? h.text.on : h.text.off);
      if (!h.isOn) {
        d.find(".light").css("display", "none")
      }
      d.find(".button").animate({
        //LDW> left: h.isOn ? "0px" : (g + "px")
        left: h.isOn ? "0%" : "100%"
      }, {
        duration: (e ? 200 : 0),
        complete: function () {
          d.find(".light").css("display", h.isOn ? "block" : "none")
        }
      })
    },
    _setOption: function (d, e) {
      alert("[sf.ui.ToggleButton] _setOption(" + d + ", " + e + ")");
      var w = this.widget();
      var f = this.options,
        c = this.view;
      switch (d) {
      case "text":
        break;
      //LDW>
      case "on":
        f.text.on = e;
        
        if (f.isOn) w.find(".button").sfButton("option", "text", e);
        break;
      case "off":
        f.text.off = e;
        if (!f.isOn) w.find(".button").sfButton("option", "text", e);
        break;
      }
    },
    _destroy: function () {
      alert("[sf.ui.ToggleButton] _destroy()");
      var c = this.widget(),
        d = this.options;
      c.removeClass(d.widgetFocusCssClass);
      c.empty()
    },
    toggle: function () {
      alert("[sf.ui.ToggleButton] toggle()");
      var c = this.options;
      this._setOn(!c.isOn);
      this._trigger("changed", null, this.options.isOn)
    },
    focus: function () {
      alert("[sf.ui.ToggleButton] focus()");
      var c = this.widget(),
        d = this.view,
        e = this.options;
      c.addClass(e.widgetFocusCssClass);
      c.find(".button").sfButton("focus");
      return this
    },
    blur: function () {
      alert("[sf.ui.ToggleButton] blur()");
      var d = this.options,
        c = this.widget();
      c.removeClass(d.widgetFocusCssClass);
      c.find(".button").sfButton("blur");
      return this
    },
    isOn: function () {
      alert("[sf.ui.ToggleButton] isOn()");
      return this.options.isOn
    }
  });
  sf.ui.bridge(a, sf.ui.ToggleButton);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfTextInput";
  sf.ui.TextInput = sf.ui.widgetFactory({
    widgetName: a,
    baseCssClass: "sf-ui-textinput",
    mapObject: null,
    options: {
      maxlength: -1,
      text: "",
      ontextchanged: null,
      oncomplete: null,
      onkeypadchanged: null
    },
    templates: {
      bg: '<div class="bg" waper_focus="false"><div class="left" waper_focus="false"></div><div class="center" waper_focus="false"></div><div class="right" waper_focus="false"></div>',
      input: '<div class="input" waper_focus="false"><input id="${id}" type="" maxlength="" waper_focus="false"></input></div>'
    },
    objIME: null,
    idIME: null,
    _create: function () {
      alert("[sf.ui.TextInput] _create()");
      this._super();
      var c = this.widget();
      var e = this.options;
      var d = this.view;
      this.idIME = "sf-ui-textinput-" + (new Date()).getTime();
      b.tmpl(this.templates.bg, {}).appendTo(c);
      b.tmpl(this.templates.input, {
        id: this.idIME
      }).appendTo(c);
      d.input = c.find(".input input")
    },
    _init: function () {
      alert("[sf.ui.TextInput] _init()");
      this._super();
      this._setLayout();
      //LDW> this._setIMEObj();
      this._setText();
      this._setMaxLength();
      
      //LDW>
      compSetAttrTextInput(this.widget());
    },
    _setLayout: function () {
      alert("[sf.ui.TextInput] _setLayout()");
      /*LDW> 
      var c = this.widget();
      var d = this.view;
      var e = c.width();
      var f = c.find(".bg .left").width();
      var h = c.find(".bg .right").width();
      c.find(".bg .center").css("width", (e - f - h) + "px");
      var g = parseInt(c.find(".input").css("left"), 10);
      c.find(".input").css("width", (e - g * 2) + "px");
      d.input.css("width", (e - g * 2) + "px")
      */
    },
    _setIMEObj: function () {
      alert("[sf.ui.TextInput] _setIMEObj()");
      var c = this.widget();
      if (!this.objIME) {
        this.objIME = new IMEShell(this.idIME, function () {});
        var d = this;
        this.objIME.setKeyFunc(sf.key.RETURN, function () {
          d._blur();
          d._handleComplete(false)
        });
        this.objIME.setKeyFunc(sf.key.EXIT, function () {
          d._blur();
          d._handleComplete(false)
        });
        if (this.objIME.setEnterFunc) {
          this.objIME.setEnterFunc(function () {
            d._blur();
            d._handleComplete(true)
          })
        }
        if (this.objIME.setInputHighlightFunc) {
          this.objIME.setInputHighlightFunc(function (f, e) {
            alert("setInputHighlightFunc(" + f + ", " + e + ")");
            if (f == "qwerty") {
              if (e == "inputobj") {
                d._focus()
              } else {
                d._blur()
              }
            } else {
              d._focus()
            }
          })
        }
        if (this.objIME.setOnCompleteFunc) {
          this.objIME.setOnCompleteFunc(function () {
            d._handleTextChanged()
          })
        }
        if (this.objIME.setKeypadChangeFunc) {
          this.objIME.setKeypadChangeFunc("12key", function () {
            d._handleKeypadChanged("12key")
          });
          this.objIME.setKeypadChangeFunc("qwerty", function () {
            d._handleKeypadChanged("qwerty")
          })
        }
      }
      if (!this._isXT9Included()) {
        this._handleKeypadChanged("12key")
      }
    },
    _isXT9Included: function () {
      alert("[sf.ui.TextInput] _isXT9Included()");
      var c = (this.objIME && this.objIME.IsSupportXT9 && this.objIME.IsSupportXT9.toUpperCase() == "XT9");
      alert("Is XT9? " + c);
      return c ? true : false
    },
    _setText: function (f) {
      alert("[sf.ui.TextInput] _setText(" + (f || "") + ")");
      var c = this.widget();
      var e = this.options;
      var d = this.view;
      if (f || f == "") {
        e.text = f
      }
      alert(typeof e.text);
      //LDW> if (this.objIME && typeof e.text == "string") {
      if (typeof e.text == "string") {
        alert("TEXT : " + e.text);
        //LDW> this.objIME.setString(e.text)
        d.input.attr("value",e.text);
      }
    },
    _setMaxLength: function (d) {
      alert("[sf.ui.TextInput] _setMaxLength(" + d + ")");
      var c = this.widget();
      var f = this.options;
      if (d && typeof d == "number") {
        f.maxlength = d
      }
      if (f.maxlength > 0) {
        c.find(".input input").attr("maxlength", f.maxlength)
      } else {
        c.find(".input input").attr("maxlength", "10000")
      }
      if (this.objIME) {
        this.objIME._setMaxLength();
        var e = this.getText() + "";
        if (e.length > f.maxlength) {
          this._setText(e.substr(0, f.maxlength))
        }
      }
    },
    _setKeypadPos: function () {
      alert("[sf.ui.TextInput] _setKeypadPos()");
      var c = this.widget();
      var e = c.offset().left;
      var d = c.offset().top;
      this.setKeypadPos(e + c.width(), d)
    },
    _destroy: function () {
      alert("[sf.ui.TextInput] _destroy()")
    },
    _focus: function () {
      alert("[sf.ui.TextInput] _focus()");
      var c = this.widget();
      c.addClass("focused")
    },
    _blur: function () {
      alert("[sf.ui.TextInput] _blur()");
      var c = this.widget();
      var d = this.view;
      c.removeClass("focused");
    },
    _handleComplete: function (d) {
      alert("[sf.ui.TextInput] _handleComplete(" + d + ")");
      var c = this.view;
      if (sf.scene._isSceneArchUsed()) {
        if (this.objIME && this.objIME._blur && this.objIME._blur instanceof Function) {
          alert("Calling IME._blur()");
          this.objIME._blur()
        }
        if (c.input) {
          setTimeout(function () {
            c.input.blur()
          }, 0)
        }
      } else {
        sf.scene.returnFocus()
      }
      if (this.options.oncomplete && this.options.oncomplete instanceof Function) {
        try {
          this.options.oncomplete(d ? this.getText() : null)
        } catch (f) {
          alert("EXCEPTION occured in oncomplete handler")
        }
      }
    },
    _handleTextChanged: function () {
      alert("[sf.ui.TextInput] _handleTextChanged()");
      alert("Current Text: " + this.getText());
      if (this.options.ontextchanged && this.options.ontextchanged instanceof Function) {
        try {
          this.options.ontextchanged(this.getText() || null)
        } catch (c) {
          alert("EXCEPTION occured in oncomplete handler")
        }
      }
    },
    _handleKeypadChanged: function (h) {
      alert("[sf.ui.TextInput] _handleKeypadChanged(" + h + ")");
      var c = this.widget();
      if (this.options.onkeypadchanged && this.options.onkeypadchanged instanceof Function) {
        try {
          this.options.onkeypadchanged(h.toLowerCase())
        } catch (g) {
          alert("EXCEPTION occured in oncomplete handler")
        }
      } else {
        this._setKeypadPos()
      }
      if (this.objIME.setWordBoxPos) {
        var f = c.offset().left;
        var d = c.offset().top;
        var j = b("#ime_wordselect").height();
        this.objIME.setWordBoxPos(f, d - j)
      }
    },
    _setOption: function (d, e) {
      alert("[sf.ui.TextInput] _setOption(" + d + ", " + e + ")");
      var f = this.options,
        c = this.widget();
      switch (d) {
      case "maxlength":
        this._setMaxLength(parseInt(e, 10));
        break;
      case "text":
        this._setText(e + "");
        break;
      case "ontextchanged":
        if (e && e instanceof Function) {
          f.ontextchanged = e
        }
        break;
      case "oncomplete":
        if (e && e instanceof Function) {
          f.oncomplete = e
        }
        break;
      case "onkeypadchanged":
        if (e && e instanceof Function) {
          f.onkeypadchanged = e
        }
        break
      }
    },
    getKeypadType: function () {
      alert("[sf.ui.TextInput] getKeypadType()");
      if (this.objIME) {
        if (this.objIME.getKeySet) {
          return this.objIME.getKeySet().toLowerCase()
        } else {
          return ("12key").toLowerCase()
        }
      } else {
        alert("IME object is not initialized yet...");
        return null
      }
    },
    setKeypadPos: function (d, c) {
      alert("[sf.ui.TextInput] setKeypadPos(" + d + ", " + c + ")");
      if (this.objIME) {
        if (this.objIME.setKeypadPos) {
          this.objIME.setKeypadPos(d, c, 200)
        } else {
          alert("setKeypadPos is not supported...")
        }
        if (this.objIME.setQWERTYPos) {
          this.objIME.setQWERTYPos(d, c, 200)
        } else {
          alert("setQWERTYPos is not supported...")
        }
      } else {
        alert("IME object is not created...")
      }
    },
    focus: function () {
      alert("[sf.ui.TextInput] focus()");
      var c = this.widget();
      c.find(".input input").focus();
      this._focus();
      return this
    },
    blur: function () {
      alert("[sf.ui.TextInput] blur()");
      this._blur();
      return this
    },
    getText: function () {
      alert("[sf.ui.TextInput] getText()");
      var c = this.widget();
      return c.find(".input input").val()
    },
    ime: function () {
      alert("[sf.ui.TextInput] ime(): " + arguments[0]);
      if (this.objIME && this.objIME[arguments[0]]) {
        return this.objIME.call(arguments)
      }
    }
  });
  sf.ui.bridge(a, sf.ui.TextInput);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfProgressBar";
  sf.ui.ProgressBar = sf.ui.widgetFactory({
    baseCssClass: "sf-ui-progressbar",
    eventNamespace: "sfProgressBar",
    options: {
      value: 0,
      max: 100,
      type: "progress",
    },
    stepWidth: 0,
    templates: {
      bg: '<div class="bg" waper_focus="false"><div class="left" waper_focus="false"></div><div class="center" waper_focus="false"></div><div class="right" waper_focus="false"></div></div>',
      bar: '<div class="bar" waper_focus="false"></div>',
      anibar: '<div class="ani" waper_focus="false"></div>'
    },
    totalWidth: 0,
    widgetName: a,
    _create: function () {
      alert("[sf.ProgressBar] _create()");
      var f = this.options,
        e = this.templates,
        d = this.view,
        c = this.widget();
      this._super();
      this.totalWidth = c.width();
      b.tmpl(e.bg, {}).appendTo(c);
      b.tmpl(e.bar, {}).appendTo(c);
      b.tmpl(e.anibar, {}).appendTo(c);
      d.bar = c.find(".bar");
      d.anibar = c.find(".ani");
      alert(c.html())
    },
    _init: function () {
      alert("[sf.ProgressBar] _init()");
      this._super();
      var g = this.options,
        d = this.view,
        c = this.widget();
      /*LDW>
      var e = c.find(".bg .left").width();
      var f = c.find(".bg .right").width();
      alert("Left : " + e + ", Right : " + f);
      c.find(".bg .center").css("width", (this.totalWidth - e - f) + "px");
      */
      this._setType(g.type);
      this._setValue(g.value);
      this._setAnimation();
      alert(c.html());
      
      //LDW>
      compSetAttrProgressBar(this.widget());
    },
    _setType: function (d) {
      alert("[sf.ProgressBar] _setType(" + d + ")");
      var c = this.view;
      switch (d) {
      case "progress":
        c.bar.show();
        c.anibar.show();
        c.anibar.addClass("normal").removeClass("loading");
        break;
      case "buffering":
        c.bar.hide();
        c.anibar.show();
        c.anibar.addClass("normal").removeClass("loading");
        break;
      case "loading":
        c.bar.hide();
        c.anibar.show();
        c.anibar.removeClass("normal").addClass("loading");
        break;
      case "status":
        c.bar.show();
        c.anibar.hide();
        break
      }
    },
    _update: function () {
      alert("[sf.ProgressBar] _update()");
      var f = this.options;
      var d = this.view;
      alert("Range : " + 0 + " ~ " + f.max);
      /*LDW>
      var e = parseInt(d.bar.css("left"));
      var c = (this.totalWidth - e * 2) * (f.value / f.max);
      d.bar.css("width", parseInt(c, 10) + "px");
      d.anibar.css("width", parseInt(c, 10) + "px")
      */
      var value_size = (f.value / f.max) * 100;
      d.bar.css("width", value_size + "%");
      d.anibar.css("width", value_size + "%");
    },
    _setValue: function (c) {
      alert("[sf.ProgressBar] _setValue(" + c + ")");
      var d = this.options;
      d.value = c;
      d.value = Math.max(d.value, 0);
      d.value = Math.min(d.value, d.max);
      this._update()
    },
    _setMax: function (c) {
      alert("[sf.ProgressBar] _setMax(" + c + ")");
      var e = this.options;
      var d = this.view;
      e.max = c;
      alert("Range : " + 0 + " ~ " + e.max);
      e.max = Math.max(e.max, 0);
      e.value = Math.min(e.value, e.max);
      this._update()
    },
    _setAnimation: function () {
      alert("[sf.ProgressBar] _setAnimation()");
      var c = this.view;
      var d = this;
      this.anistep = 0;
      this.anistepcount = 4;
      //LDW>
      if (window._browser != "designer") {
      this.tmrAnimation = setInterval(function () {
        d._nextAnimation()
      }, 200)
      }
      else {
        d._nextAnimation()
      }
    },
    _nextAnimation: function () {
      var c = this.view;
      c.anibar.removeClass("step" + this.anistep);
      this.anistep = (this.anistep + 1) % this.anistepcount;
      c.anibar.addClass("step" + this.anistep)
    },
    _clearAnimation: function () {
      alert("[sf.ProgressBar] _clearAnimation()");
      if (this.tmrAnimation) {
        clearInterval(this.tmrAnimation);
        this.tmrAnimation = null
      }
    },
    _destroy: function () {
      var c = this.view;
      this._clearAnimation()
    },
    show: function () {
      alert("[sf.ProgressBar] show()");
      //LDW>
      if (window._browser != "designer") this._setAnimation()
    },
    hide: function () {
      alert("[sf.ProgressBar] hide()");
      this._clearAnimation()
    },
    next: function () {
      alert("[sf.ProgressBar] next()");
      var c = this.options;
      alert(c.value);
      this._setValue(c.value + 1)
    },
    prev: function () {
      alert("[sf.ProgressBar] prev()");
      var c = this.options;
      alert(c.value);
      this._setValue(c.value - 1)
    },
    setValue: function (c) {
      alert("[sf.ProgressBar] setValue(" + c + ")");
      this._setValue(c)
    },
    getValue: function () {
      alert("[sf.ProgressBar] getValue(): " + this.options.value);
      return this.option.value
    },
    setMax: function (c) {
      alert("[sf.ProgressBar] setMax(" + c + ")");
      this._setMax(c)
    },
    getMax: function () {
      alert("[sf.ProgressBar] getMax(): " + this.options.max);
      return this.option.max
    },
    _setOption: function (c, d) {
      alert("[sf.ProgressBar] _setOption(" + c + ", " + d + ")");
      var e = this.options;
      switch (c) {
      case "value":
        e.value = d;
        this._setValue(e.value);
        break;
      case "max":
        e.max = d;
        this._setValue(e.value);
        break;
      case "type":
        e.type = d;
        this._setType(e.type);
        break
      }
    },
  });
  sf.ui.bridge(a, sf.ui.ProgressBar);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfPageIndicator";
  sf.ui.PageIndicator = sf.ui.widgetFactory({
    baseCssClass: "sf-ui-pageindicator",
    eventNamespace: "sfPageIndicator",
    options: {
      index: 0,
      count: 10
    },
    templates: {
      dot: '<div class="dot" waper_focus="false"></div>'
    },
    widgetName: a,
    _create: function () {
      alert("[sf.PageIndicator] _create()");
      var f = this.options,
        e = this.templates,
        d = this.view,
        c = this.widget();
      this._super()
    },
    _init: function () {
      alert("[sf.PageIndicator] _init()");
      this._super();
      var h = this.options,
        f = this.templates,
        c = this.widget();
      var g = [];
      for (var e = 0; e < h.count; e++) {
        g.push({})
      }
      //LDW> 
      c.empty();
      if (!c.find(".dot").length)
      b.tmpl(f.dot, g).appendTo(c);
      var d = this;
      /*LDW>
      c.find(".dot").each(function (j, k) {
        b(k).bind("click", function () {
          d.setIndex(j)
        })
      });
      */
      //LDW>
      if (typeof(h.index) == "number" && !isNaN(h.index))
      this._setIndex(h.index);
      alert(c.html());
      
      //LDW>
      compSetAttrPageIndicator(this.widget());
    },
    _setIndex: function (e) {
      alert("[sf.PageIndicator] _setIndex(" + e + ")");
      var d = this.view,
        c = this.widget(),
        f = this.options;
      f.index = e;
      f.index = Math.max(f.index, 0);
      f.index = Math.min(f.index, (f.count - 1));
      c.find(".dot").removeClass("selected");
      c.find(".dot").eq(f.index).addClass("selected");
      this._trigger("selected", null, e)
    },
    _destroy: function () {
      var c = this.view
    },
    next: function () {
      alert("[sf.PageIndicator] next()");
      var c = this.options;
      this.setIndex(c.index + 1)
    },
    prev: function () {
      alert("[sf.PageIndicator] prev()");
      var c = this.options;
      this.setIndex(c.index - 1)
    },
    setIndex: function (c) {
      alert("[sf.PageIndicator] setIndex(" + c + ")");
      this._setIndex(c)
    },
    getIndex: function () {
      alert("[sf.PageIndicator] getIndex()");
      return this.option.index
    },
    _setOption: function (c, d) {
      alert("[sf.PageIndicator] _setOption(" + c + ", " + d + ")");
      var e = this.options;
      switch (c) {
      case "index":
        e.index = d;
        //LDW> this._setIndex(e.value);
        this._setIndex(e.index);
        break;
      case "count":
        e.count = d;
        //LDW> this._setIndex(e.value);
        this._init();
        break
      }
    },
  });
  sf.ui.bridge(a, sf.ui.PageIndicator);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfSlider";
  sf.ui.Slider = sf.ui.widgetFactory({
    widgetName: a,
    baseCssClass: "sf-ui-slider",
    options: {
      vertical: false,
      value: 0,
      max: 100,
      showtooltip: true,
      showprogress: true,
      reverse: false
    },
    templates: {
      bg: '<div class="bg" waper_focus="false"><div class="begin" waper_focus="false"></div><div class="mid" waper_focus="false"></div><div class="end" waper_focus="false"></div></div>',
      bar: '<div class="bar" waper_focus="false"><div class="begin" waper_focus="false"></div><div class="mid" waper_focus="false"></div><div class="end" waper_focus="false"></div></div>',
      thumb: '<div class="thumb-wrapper"><div class="thumb" waper_focus="false"></div><div class="tooltip" waper_focus="false"></div></div>'
      //tooltip: '<div class="tooltip" waper_focus="false"></div>'
    },
    scrollSize: 0,
    _create: function () {
      alert("[sf.ui.Slider] _create()");
      this._super();
      var c = this.widget(),
        d = this.templates,
        e = this.options;
      b.tmpl(d.bg, {}).appendTo(c);
      b.tmpl(d.bar, {}).appendTo(c);
      b.tmpl(d.thumb, {}).appendTo(c);
      //b.tmpl(d.tooltip, {}).appendTo(c)
    },
    _init: function () {
      alert("[sf.ui.Slider] _init()");
      this._super();
      var c = this.widget(),
        d = this.templates,
        e = this.options;
      if (e.vertical && !c.hasClass("vertical")) {
        c.addClass("vertical")
      } else {
        if (!e.vertical && c.hasClass("vertical")) {
          c.removeClass("vertical")
        }
      }
      this._setLayout();
      this._updateValue();
      
      compSetAttrSlider(this.widget());
    },
    _setLayout: function () {
      alert("[sf.ui.Slider] _setLayout()");
      var j = this.widget(),
        l = this.templates,
        d = this.options;
      j.find(".tooltip").show();
      if (d.vertical) {
        var k = j.height();
        /*LDW>
        var m = j.find(".bg .begin").height();
        var f = j.find(".bg .end").height();
        j.find(".bg .mid").css({
          height: (k - m - f) + "px",
          width: ""
        });
        */
        j.find(".thumb-wrapper").css({
            top:"22px",
            bottom:"22px",
            left:"",
            right:""
        });
        
        this.scrollSize = k - j.find(".thumb").height();
        var h = j.find(".thumb").width();
        j.find(".tooltip").css("left", h + "px").sfTooltip({
          text: d.value,
          orientation: "left"
        })
      } else {
        var c = j.width();
        /*LDW>
        var e = j.find(".bg .begin").width();
        var g = j.find(".bg .end").width();
        j.find(".bg .mid").css({
          width: (c - e - g) + "px",
          height: ""
        });
        */
        j.find(".thumb-wrapper").css({
            left:"22px",
            right:"22px",
            top:"",
            bottom:""
        });
        
        this.scrollSize = c - j.find(".thumb").width();
        j.find(".tooltip").css("top", "0px").sfTooltip({
          text: d.value,
          orientation: "down"
        })
      }
      if (j.hasClass("focused") && this.options.showtooltip) {
        j.find(".tooltip").show()
      } else {
        j.find(".tooltip").hide()
      }
    },
    _updateValue: function () {
      alert("[sf.ui.Slider] _updateValue()");
      var m = this.widget(),
        p = this.templates,
        d = this.options;
      if (this.options.showprogress) {
        m.find(".bar").show()
      } else {
        m.find(".bar").hide()
      }
      m.find(".tooltip").show();
      var h = m.find(".thumb").height();
      var thumb_position = (d.value / d.max) * 100;
      if (!d.reverse) {
        m.find(".bar .begin").css("visibility", "visible");
        m.find(".bar .end").css("visibility", "hidden");
      }
      else {
        m.find(".bar .begin").css("visibility", "hidden");
        m.find(".bar .end").css("visibility", "visible");
      }
      if (d.vertical) {
        var e = parseInt(this.scrollSize * ((!d.reverse ? d.value : (d.max - d.value)) / d.max), 10);
        /*LDW>
        m.find(".thumb").css({
          top: e + "px",
          left: ""
        });
        var h = m.find(".thumb").height();
        m.find(".bar").css({
          top: (!d.reverse ? 0 : parseInt(e + h / 2, 10)) + "px",
          left: ""
        });
        var q = m.find(".bar .begin").height();
        var j = m.find(".bar .end").height();
        var n = m.height();
        m.find(".bar .mid").css({
          height: (!d.reverse ? parseInt(e + h / 2, 10) - (q + j) : (n - parseInt(e + h / 2, 10) - (q + j))) + "px",
          width: ""
        });
        */
        m.find(".thumb").css({
          top: (!d.reverse ? thumb_position + "%" : "auto"),
          bottom: (!d.reverse ? "" : thumb_position + "%"),
          left: "",
          right: "",
          marginTop: (!d.reverse ? "-24px" : ""),
          marginLeft: "",
          marginBottom: (!d.reverse ? "" : "-24px"),
          marginRight: ""
        });
        m.find(".bar").css({
          height: (thumb_position + 2) + "%",
          top: (!d.reverse ? 0 : "auto"),
          bottom: (!d.reverse ? "" : 0),
          left: "",
          right: ""
        });
        
        //LDW> m.find(".tooltip").css("top", (e + parseInt(h / 2, 10)) + "px").sfTooltip("option", "text", d.value)
        m.find(".tooltip").css({
            top: (!d.reverse ? thumb_position + "%" : ""),
            bottom: (!d.reverse ? "" : thumb_position + "%")
        }).sfTooltip("option", "text", d.value);
      } else {
        var g = parseInt(this.scrollSize * ((d.reverse ? (d.max - d.value) : d.value) / d.max), 10);
        /*LDW
        m.find(".thumb").css({
          left: g + "px",
          top: ""
        });
        var l = m.find(".thumb").width();
        m.find(".bar").css({
          left: (!d.reverse ? 0 : parseInt(g + l / 2, 10)) + "px",
          top: ""
        });
        var f = m.find(".bar .begin").width();
        var k = m.find(".bar .end").width();
        var c = m.width();
        m.find(".bar .mid").css({
          width: (!d.reverse ? parseInt(g + l / 2, 10) - (f + k) : (c - parseInt(g + l / 2, 10) - (f + k))) + "px",
          height: ""
        });
        */
        m.find(".thumb").css({
          left: (!d.reverse ? thumb_position + "%" : ""),
          right: (!d.reverse ? "" : thumb_position + "%"),
          top: "",
          bottom: "",
          marginTop: "",
          marginRight: (!d.reverse ? "" : "-22px"),
          marginBottom: "",
          marginLeft: (!d.reverse ? "-22px" : "")
        });
        m.find(".bar .mid").css({
          width: (thumb_position + 2) + "%",
          left: (!d.reverse ? "10px" : "auto"),
          right: (!d.reverse ? "auto" : "10px"),
          top: "",
          bottom: ""
        });
        
        //LDW> m.find(".tooltip").css("left", (g + parseInt(h / 2, 10)) + "px").sfTooltip("option", "text", d.value)
        m.find(".tooltip").css({
            left: (!d.reverse ? thumb_position + "%" : ""),
            right: (!d.reverse ? "" : thumb_position + "%")
        }).sfTooltip("option", "text", d.value)
      }
      if (m.hasClass("focused") && this.options.showtooltip) {
        m.find(".tooltip").show()
      } else {
        m.find(".tooltip").hide()
      }
    },
    _setOption: function (c, d) {
      alert("[sf.ui.Slider] _setOption(" + c + ", " + d + ")");
      switch (c) {
      case "vertical":
        this.setVertical((d === undefined || d == true) ? true : false);
        break;
      case "value":
        this.setValue(d);
        break;
      case "max":
        this.setMax(d);
        break;
      case "showtooltip":
        this.showTooltip((d === undefined || d == true) ? true : false);
        break;
      case "showprogress":
        this.showProgress((d === undefined || d == true) ? true : false);
        break;
      case "reverse":
        this.setReverse((d === undefined || d == true) ? true : false);
        break
      }
    },
    _destroy: function () {
      alert("[sf.ui.Slider] _destroy()");
      this.widget().empty()
    },
    focus: function () {
      alert("[sf.ui.Slider] focus()");
      var c = this.widget();
      if (!c.hasClass("focused")) {
        c.addClass("focused")
      }
      if (this.options.showtooltip) {
        c.find(".tooltip").show()
      }
    },
    blur: function () {
      alert("[sf.ui.Slider] blur()");
      var c = this.widget();
      if (c.hasClass("focused")) {
        c.removeClass("focused")
      }
      c.find(".tooltip").hide()
    },
    setVertical: function (d) {
      alert("[sf.ui.Slider] setVertical(" + d + ")");
      var c = this.widget(),
        e = this.options;
      e.vertical = d ? true : false;
      if (e.vertical && !c.hasClass("vertical")) {
        c.addClass("vertical")
      } else {
        if (!e.vertical && c.hasClass("vertical")) {
          c.removeClass("vertical")
        }
      }
      this._setLayout();
      this._updateValue()
    },
    isVertical: function () {
      alert("[sf.ui.Slider] isVertical(): " + this.options.vertical);
      return this.options.vertical
    },
    showTooltip: function (d) {
      alert("[sf.ui.Slider] showTooltip(" + d + ")");
      this.options.showtooltip = (d || d === undefined) ? true : false;
      var c = this.widget();
      this._updateValue()
    },
    getTooltipVisible: function (c) {
      alert("[sf.ui.Slider] getTooltipVisible(): " + this.options.showtooltip);
      return this.options.showtooltip
    },
    showProgress: function (d) {
      alert("[sf.ui.Slider] showProgress(" + d + ")");
      this.options.showprogress = (d || d === undefined) ? true : false;
      var c = this.widget();
      this._updateValue()
    },
    getProgressVisible: function () {
      alert("[sf.ui.Slider] getProgressVisible(): " + this.options.showprogress);
      return this.options.showprogress
    },
    setValue: function (c) {
      alert("[sf.ui.Slider] setValue(" + c + ")");
      this.options.value = parseInt(c, 10);
      this.options.value = Math.min(this.options.value, this.options.max);
      this.options.value = Math.max(this.options.value, 0);
      this._updateValue()
    },
    getValue: function () {
      alert("[sf.ui.Slider] getValue(): " + this.options.value);
      return this.options.value
    },
    setMax: function (c) {
      alert("[sf.ui.Slider] setMax(" + c + ")");
      this.options.max = parseInt(c, 10);
      this.options.value = Math.min(this.options.value, this.options.max);
      this._updateValue()
    },
    getMax: function () {
      alert("[sf.ui.Slider] getMax(): " + this.options.max);
      return this.options.max
    },
    setReverse: function (c) {
      alert("[sf.ui.Slider] setReverse()");
      this.options.reverse = (c || c === undefined) ? true : false;
      this._updateValue()
    },
    isReverse: function () {
      alert("[sf.ui.Slider] isReverse(): " + this.options.reverse);
      return this.options.reverse
    }
  });
  sf.ui.bridge(a, sf.ui.Slider);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfTooltip";
  sf.ui.Tooltip = sf.ui.widgetFactory({
    widgetName: a,
    baseCssClass: "sf-ui-tooltip",
    options: {
      text: "",
      title: "",
      orientation: "down"
    },
    templates: {
      bg: '<div class="bg" waper_focus="false"><table border="0px" cellpadding="0px" cellspacing="0px" waper_focus="false"><tbody waper_focus="false"><tr class="top" waper_focus="false"><td waper_focus="false"><div class="left" waper_focus="false"></div></td><td waper_focus="false"><div class="center" waper_focus="false"></div></td><td waper_focus="false"><div class="right" waper_focus="false"></div></td></tr><tr class="middle" waper_focus="false"><td waper_focus="false"><div class="left" waper_focus="false"></div></td><td waper_focus="false"><div class="center" waper_focus="false"><div class="text" waper_focus="false"></div></div></td><td waper_focus="false"><div class="right" waper_focus="false"></div></td></tr><tr class="bottom" waper_focus="false"><td waper_focus="false"><div class="left" waper_focus="false"></div></td><td waper_focus="false"><div class="center" waper_focus="false"></div></td><td waper_focus="false"><div class="right" waper_focus="false"></div></td></tr></tbody></table></div>',
      arrow: '<div class="arrow" waper_focus="false"></div>'
    },
    arrowSelectors: {
      left: ".bg .middle .left",
      right: ".bg .middle .right",
      up: ".bg .top .center",
      down: ".bg .bottom .center"
    },
    _create: function () {
      alert("[sf.ui.Tooltip] _create()");
      this._super();
      var c = this.widget(),
        d = this.templates,
        e = this.options
    },
    _init: function () {
      alert("[sf.ui.Tooltip] _init()");
      this._super();
      var c = this.widget(),
        d = this.templates,
        e = this.options;
      this._setLayout();
      
      //LDW>
      compSetAttrTooltip(this.widget());
    },
    _setLayout: function () {
      alert("[sf.ui.Tooltip] _setLayout()");
      var h = this.widget(),
        l = this.templates,
        d = this.options;
      b.tmpl(l.bg, {}).appendTo(h.empty());
      for (var k in this.arrowSelectors) {
        if (k == this.options.orientation) {
          h.find(this.arrowSelectors[k]).html("").append(b.tmpl(l.arrow, {}).addClass("arrow-" + k))
        } else {
          h.find(this.arrowSelectors[k]).html("")
        }
      }
      h.find(".bg .middle .center .text").html((this.options.title != "" ? '<div class="title" waper_focus="false">' + this.options.title + "</div>" : "") + this.options.text);
      var m = h.find(".bg .middle .center .text").width();
      var e = h.find(".bg .middle .center .text").height();
      var f = h.find(".arrow").height();
      var g = h.find(".arrow").width();
      if (this.options.orientation == "left" || this.options.orientation == "right") {
        if (e < f) {
          alert("centerHeight < arrowHeight ? " + e + " < " + f);
          h.find(".bg .middle .center .text").css("margin-top", parseInt((f - e) / 2, 10) + "px");
          e = f
        }
        h.find(".arrow").css("margin-top", parseInt((e - f) / 2, 10) + "px")
      } else {
        if (m < g) {
          m = g
        }
      }
      alert("Text size : " + m + "x" + e);
      h.find(".bg .middle .left").css("height", e + "px");
      h.find(".bg .middle .center").css({
        width: m + "px",
        height: e + "px"
      });
      h.find(".bg .middle .right").css("height", e + "px");
      h.find(".bg .top .center").css("width", m + "px");
      h.find(".bg .bottom .center").css("width", m + "px");
      var c = h.find(".bg").width();
      var j = h.find(".bg").height();
      switch (this.options.orientation) {
      case "left":
        h.find(".bg").css({
          left: "0px",
          top: -parseInt(j / 2, 10) + "px"
        });
        break;
      case "right":
        h.find(".bg").css({
          left: (-c) + "px",
          top: -parseInt(j / 2, 10) + "px"
        });
        break;
      case "up":
        h.find(".bg").css({
          left: -parseInt(c / 2, 10) + "px",
          top: "0px"
        });
        break;
      case "down":
        h.find(".bg").css({
          left: -parseInt(c / 2, 10) + "px",
          top: -j + "px"
        });
        break
      }
    },
    _setOption: function (c, d) {
      alert("[sf.ui.Tooltip] _setOption(" + c + ", " + d + ")");
      switch (c) {
      case "orientation":
        this.setOrientation(d);
        break;
      case "text":
        this.setText(d);
        break;
      case "title":
        this.setTitle(d);
        break
      }
    },
    _destroy: function () {
      alert("[sf.ui.Tooltip] _destroy()");
      this.widget().empty()
    },
    setText: function (c) {
      alert("[sf.ui.Tooltip] setText(" + c + ")");
      this.options.text = c;
      this._setLayout()
    },
    setTitle: function (c) {
      alert("[sf.ui.Tooltip] setTitle(" + c + ")");
      this.options.title = c;
      this._setLayout()
    },
    setOrientation: function (d) {
      alert("[sf.ui.Tooltip] setOrientation(" + d + ")");
      var c = this.widget(),
        e = this.options;
      d = d.toLowerCase();
      if (this.arrowSelectors[d]) {
        this.options.orientation = d
      }
      this._setLayout()
    },
    getOrientation: function () {
      alert("[sf.ui.Tooltip] getOrientation(): " + this.options.orientation);
      return this.options.orientation
    }
  });
  sf.ui.bridge(a, sf.ui.Tooltip);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfArrowButton";
  sf.ui.ArrowButton = sf.ui.widgetFactory({
    widgetName: a,
    eventNamespace: "sfArrowButton",
    baseCssClass: "sf-ui-arrowbutton",
    options: {
      text: "",
      arrow: "all",
      onup: function (c) {
        return c
      },
      ondown: function (c) {
        return c
      },
      onleft: function (c) {
        return c
      },
      onright: function (c) {
        return c
      }
    },
    templates: {
      button: '<div class="button" waper_focus="false"><div class="left" waper_focus="false"></div><div class="center sf-ui-common-ellipsis" waper_focus="false"></div><div class="right" waper_focus="false"></div></div>',
      arrows: '<div class="arrows" waper_focus="false"><center><div class="arrowup" waper_focus="false"></div><div class="arrowdown" waper_focus="false"></div></center><div class="arrowleft" waper_focus="false"></div><div class="arrowright" waper_focus="false"></div></div>'
    },
    arrowClasses: {
      all: "all",
      updown: "updown",
      leftright: "leftright"
    },
    _init: function () {
      alert("[sf.ArrowButton] _init()");
      var c = this.widget(),
        j = this.options,
        d = this.view,
        e = this.templates;
      this._beginLayoutSetting();
      c.empty();
      this._setArrowType(null);
      d.button = b.tmpl(e.button, null);
      d.arrows = b.tmpl(e.arrows, null);
      d.button.appendTo(c);
      d.arrows.appendTo(c);
      this.widgetWidth = c.width();
      this.widgetHeight = c.height();
      alert("Widget width : " + this.widgetWidth);
      alert("Widget height : " + this.widgetHeight);
      var g = d.button.find(".left").width();
      var h = d.button.find(".right").width();
      if (this.widgetWidth < (g + h)) {
        this.widgetWidth = (g + h)
      }
      //LDW> d.button.find(".center").width(this.widgetWidth - (g + h));
      d.button.width(this.widgetWidth).height(this.widgetHeight);
      //LDW> d.arrows.width(this.widgetWidth).height(this.widgetHeight);
      d.arrows.width("100%").height(this.widgetHeight);
      /*LDW> 
      var f = d.arrows.find(".arrowup").width();
      alert("arrowwidth : " + f);
      d.arrows.find(".arrowup").css("left", parseInt((this.widgetWidth - f) / 2, 10) + "px");
      var f = d.arrows.find(".arrowdown").width();
      alert("arrowwidth : " + f);
      d.arrows.find(".arrowdown").css("left", parseInt((this.widgetWidth - f) / 2, 10) + "px");
      d.arrows.find(".arrowright").css("left", this.widgetWidth + "px");
      */
      this.setText(j.text);
      this.blur();
      this._setArrowType(j.arrowtype);
      this._endLayoutSetting();
      alert(c.html());
      
      //LDW>
      compSetAttrArrowButton(c);
    },
    _setArrowType: function (e) {
      alert("[sf.ui.ArrowButton] _setArrowType(" + e + ")");
      var c = this.widget();
      for (var d in this.arrowClasses) {
        c.removeClass(this.arrowClasses[d])
      }
      if (e && this.arrowClasses[e.toLowerCase()]) {
        c.addClass(this.arrowClasses[e.toLowerCase()])
      } else {
        alert("There's no such a type: " + e)
      }
    },
    _focus: function () {
      alert("[sf.ui.ArrowButton] _focus()");
      this.widget().addClass("focused")
    },
    _blur: function () {
      alert("[sf.ui.ArrowButton] _blur()");
      this.widget().removeClass("focused")
    },
    _setOption: function (d, e) {
      alert("[sf.ui.ArrowButton] _setOption(" + d + ", " + e + ")");
      var f = this.options,
        c = this.view;
      switch (d) {
      case "text":
        f.text = e;
        break;
      case "arrow":
        f.arrow = e;
        break;
      case "onup":
        if (e && e instanceof Function) {
          f.onup = e
        }
        break;
      case "ondown":
        if (e && e instanceof Function) {
          f.ondown = e
        }
        break;
      case "onleft":
        if (e && e instanceof Function) {
          f.onleft = e
        }
        break;
      case "onright":
        if (e && e instanceof Function) {
          f.onright = e
        }
        break
      }
    },
    focus: function () {
      alert("[sf.ui.ArrowButton] focus()");
      this._focus()
    },
    blur: function () {
      alert("[sf.ui.ArrowButton] blur()");
      this._blur()
    },
    up: function () {
      alert("[sf.ui.ArrowButton] up()");
      if (this.options.onup && this.options.onup instanceof Function) {
        var c = this.options.onup(this.options.text);
        alert("onup returns " + c);
        if (c !== undefined) {
          this.setText(c)
        }
      }
    },
    down: function () {
      alert("[sf.ui.ArrowButton] down()");
      if (this.options.ondown && this.options.ondown instanceof Function) {
        var c = this.options.ondown(this.options.text);
        alert("ondown returns " + c);
        if (c !== undefined) {
          this.setText(c)
        }
      }
    },
    left: function () {
      alert("[sf.ui.ArrowButton] left()");
      if (this.options.onleft && this.options.onleft instanceof Function) {
        var c = this.options.onleft(this.options.text);
        alert("onleft returns " + c);
        if (c !== undefined) {
          this.setText(c)
        }
      }
    },
    right: function () {
      alert("[sf.ui.ArrowButton] right()");
      if (this.options.onright && this.options.onright instanceof Function) {
        var c = this.options.onright(this.options.text);
        alert("onright returns " + c);
        if (c !== undefined) {
          this.setText(c)
        }
      }
    },
    setText: function (d) {
      alert("[sf.ui.ArrowButton] setText(" + d + ")");
      var c = this.view;
      this.options.text = d + "";
      c.button.find(".center").html(d + "")
    },
    getText: function () {
      alert("[sf.ui.ArrowButton] getText()");
      alert("returns " + this.options.text);
      return this.options.text
    }
  });
  sf.ui.bridge(a, sf.ui.ArrowButton);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfBackground";
  sf.ui.Background = sf.ui.widgetFactory({
    baseCssClass: "sf-ui-background",
    options: {
      light: false,
      column: null,
      columnShadow: false,
      columnSize: 500
    },
    templates: {
      main: b.template(null, '<div class="sf-ui-background">{{if light}}<div class="sf-ui-background-light" style="left:${lightLeft}px;width:${lightWidth}px;"></div>{{/if}}{{if column == "left"}}{{tmpl(subdata) "sf_background_leftColumn"}}{{/if}}{{if column == "right"}}{{tmpl(subdata) "sf_background_rightColumn"}}{{/if}}{{if column == "bottom"}}{{tmpl(subdata) "sf_background_horizontalColumn"}}{{/if}}</div>'),
      leftColumn: b.template("sf_background_leftColumn", '<div class="sf-ui-background-column-vertical-left" style="width:${columnSize}px;"></div>{{if columnShadow}}<div class="sf-ui-background-column-vertical-shadow-right" style="left:${columnSize}px;"></div>{{else}}<div class="sf-ui-background-column-vertical-parting-line-right" style="left:${columnSize}px;"></div>{{/if}}'),
      rightColumn: b.template("sf_background_rightColumn", '<div class="sf-ui-background-column-vertical-right" style="width:${columnSize}px;"></div>{{if columnShadow}}<div class="sf-ui-background-column-vertical-shadow-left" style="right:${columnSize}px;"></div>{{else}}<div class="sf-ui-background-column-vertical-parting-line-left" style="right:${columnSize}px;"></div>{{/if}}'),
      horizontalColumn: b.template("sf_background_horizontalColumn", '<div class="sf-ui-background-column-horizontal" style="height: ${columnSize}px;"></div>{{if columnShadow}}<div class="sf-ui-background-column-horizontal-shadow-bottom " style="bottom:${columnSize}px;"></div>{{else}}<div class="sf-ui-background-column-horizontal-parting-line-bottom" style="bottom:${columnSize}px;"></div>{{/if}}')
    },
    widgetName: a,
    _create: function () {
      this._super();
      this.view.mainTemplate = this.templates.main
    },
    _init: function () {
      this.data = this._getData();
      this._redraw()
    },
    _destroy: function () {
      this.view.mainTemplate.remove()
    },
    _setOption: function (c, d) {
      alert("[sf.Background] _setOption(" + c + ", " + d + ")");
      switch (c) {
      case "column":
        this.options.column = d;
        break;
      case "light":
        this.options.light = d;
        break;
      case "columnSize":
        this.options.columnSize = d;
        break;
      case "columnShadow":
        this.options.columnShadow = d;
        break
      }
      this.data = this._getData();
      this._redraw()
    },
    _redraw: function () {
      this.widget().html(b.tmpl(this.templates.main, this.data))
    },
    _getData: function () {
      var c = this,
        g = this.options;
      var f = 0;
      var d = sf.ui.width;
      var e;
      if (g.column == "left") {
        d = d - g.columnSize;
        f = g.columnSize
      }
      if (g.column == "right") {
        d = d - g.columnSize
      }
      e = {
        column: g.column,
        light: g.light,
        lightWidth: d,
        lightLeft: f,
        subdata: {
          columnSize: g.columnSize,
          columnShadow: g.columnShadow
        }
      };
      return e
    },
    setColumnType: function (c) {
      alert("[sf.ui.TitleBar] setColumn(" + c + ")");
      if (c == null || c == "left" || c == "right" || c == "bottom") {
        this.options.type = c;
        this.data = this._getData();
        this._redraw()
      } else {
        alert("Not supported type : " + column)
      }
    },
    showLight: function (c) {
      alert("[sf.ui.TitleBar] setColumn(" + c + ")");
      if (c || c === undefined) {
        this.options.light = true
      } else {
        this.options.light = false
      }
      this.data = this._getData();
      this._redraw()
    },
    setColumnSize: function (c) {
      alert("[sf.ui.TitleBar] setColumn(" + c + ")");
      this.options.columnSize = parseInt(c, 10);
      this.data = this._getData();
      this._redraw()
    },
    showColumnShadow: function (c) {
      alert("[sf.ui.TitleBar] setColumn(" + c + ")");
      if (c || c === undefined) {
        this.options.columnShadow = true
      } else {
        this.options.columnShadow = false
      }
      this.data = this._getData();
      this._redraw()
    }
  });
  sf.ui.bridge(a, sf.ui.Background);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfTitleBar";
  sf.ui.TitleBar = sf.ui.widgetFactory({
    widgetName: a,
    baseCssClass: "sf-ui-titlebar",
    options: {
      title: "Title",
      subtitle: "",
      icon: null,
      showarrow: false
    },
    templates: {
      main: b.template(null, '<div class="sf-ui-titlebar-bg" waper_focus="false">{{if arrow}}<div class="sf-ui-titlebar-arrow-left" waper_focus="false"></div><div class="sf-ui-titlebar-arrow-right" waper_focus="false"></div>{{/if}}{{if titletext}}<div class="sf-ui-titlebar-title" {{if subtitle}}style="float:left;"{{/if}}  waper_focus="false">{{if iconURL}}<img src="${iconURL}" ${iconWidthProp} ${iconHeightProp} valign="middle" waper_focus="false"/>{{/if}}${titletext}</div>{{/if}}{{if subtitle}}<div class="sf-ui-titlebar-subtitle" waper_focus="false">${subtitle}</div>{{/if}}</div>')
    },
    _create: function () {
      alert("[sf.ui.TitleBar] _create()");
      this._super()
    },
    _init: function () {
      alert("[sf.ui.TitleBar] _init()");
      this._redraw();
      
      compSetAttrTitleBar(this.widget());
    },
    _setOption: function (c, d) {
      alert("[sf.ui.TitleBar] _setOption(" + c + ", " + d + ")");
      switch (c) {
      case "title":
        this.options.title = d;
        break;
      case "subtitle":
        this.options.subtitle = d;
        break;
      case "icon":
        this.options.icon = d;
        break;
      case "showarrow":
        this.options.showarrow = d;
        break
      }
      this._redraw()
    },
    _redraw: function () {
      alert("[sf.ui.TitleBar] _redraw()");
      var c = this.widget(),
        f = this.options,
        d = this.templates;
      var e = {
        titletext: f.title || false,
        subtitle: (f.subtitle && f.subtitle != "") ? f.subtitle : null,
        arrow: f.showarrow ? true : false
      };
      if (f.icon && f.icon.URL) {
        e.iconURL = f.icon.URL;
        if (f.icon.width) {
          e.iconWidthProp = "width=" + parseInt(f.icon.width, 10) + "px"
        }
        if (f.icon.height) {
          e.iconHeightProp = "height=" + parseInt(f.icon.height, 10) + "px"
        }
      }
      c.empty().append(b.tmpl(d.main, e))
    },
    setTitle: function (c) {
      alert("[sf.ui.TitleBar] setTitle(" + c + ")");
      this.options.title = c;
      this._redraw()
    },
    setSubTitle: function (c) {
      alert("[sf.ui.TitleBar] setSubTitle(" + c + ")");
      this.options.subtitle = c;
      this._redraw()
    },
    setIcon: function (c) {
      alert("[sf.ui.TitleBar] setTitle(" + c + ")");
      if (c && c.URL) {
        this.options.icon = c
      } else {
        this.options.icon = null
      }
      this._redraw()
    },
    showArrow: function (c) {
      alert("[sf.ui.TitleBar] showArrow(" + c + ")");
      if (c || c === undefined) {
        this.options.showarrow = true
      } else {
        this.options.showarrow = false
      }
      this._redraw()
    }
  });
  sf.ui.bridge(a, sf.ui.TitleBar);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfTextList";
  sf.ui.TextList = sf.ui.widgetFactory({
    widgetName: a,
    baseCssClass: "sf-ui-textlist",
    eventNamespace: "sftextlist",
    options: {
      items: [],
      type: "text",
      index: 0,
      itemsPerPage: 0,
      start: 0,
      selectField: "selected",
      disabledField: "disabled",
      loop: true,
      selectable: 0,
      selectPos: "left",
      selectCssClass: "sf-ui-textlist-select",
      disabledCssClass: "sf-ui-textlist-disabled",
      focusCssClass: "sf-ui-textlist-focus",
      scrollSingle: false
    },
    templates: {
      checkbox: "<div></div>",
      column_left: {
        height: [58, 78, 116],
        tmpl: '<div class="sf-ui-textlist-wrap"><span class="text">${text}</span></div>'
      },
      column_right: {
        height: [58, 78, 116],
        tmpl: '<div class="sf-ui-textlist-wrap"><span class="text">${text}</span></div>'
      },
      comment: {
        height: [76, 102, 152],
        thumb: [60, 80, 120],
        tmpl: '<div class="sf-ui-textlist-thumb">${shadow}<div class="sf-ui-textlist-thumbcrop"><img src="${thumbnail.url}" style="${thumbstyle}"/></div></div><div class="sf-ui-textlist-wrap"><span class="text">${text}</span><span class="subtext">${subtext}</span></div>'
      },
      cursor: {
        size: [4, 6, 8],
        tmpl: "<div></div>"
      },
      line: {
        height: [2, 2, 4],
        tmpl: '<div class="${lineClass}" style="height: ${height}px;"><div class="line-left"></div><div class="line-center"></div><div class="line-right"></div></div>'
      },
      list: "<div></div>",
      radio: "<div></div>",
      shadow: {
        size: [30, 40, 60],
        offset: [10, 17, 20],
        tmpl: '<div class="sf-ui-textlist-shadow" style="width: ${shadowSize}px; height: ${shadowSize}px; top: -${shadowOffset}px; left: -${shadowOffset}px;"><div class="sf-ui-textlist-shadow-lt"></div><div class="sf-ui-textlist-shadow-t" style="width: ${innerSize}px;"></div><div class="sf-ui-textlist-shadow-rt"></div><div class="sf-ui-textlist-shadow-r" style="height: ${innerSize}px;"></div><div class="sf-ui-textlist-shadow-rb"></div><div class="sf-ui-textlist-shadow-b"style="width: ${innerSize}px;"></div><div class="sf-ui-textlist-shadow-lb"></div><div class="sf-ui-textlist-shadow-l" style="height: ${innerSize}px;"></div></div>'
      },
      subtitle: {
        height: [28, 38, 58],
        tmpl: '<span class="text">${text}</span><span class="right">${right}</span>'
      },
      text: {
        height: [58, 78, 116],
        tmpl: '<div class="sf-ui-textlist-wrap"><span class="text">${text}</span><span class="right">${right}</span></div>'
      },
      text2: {
        height: [58, 78, 116],
        tmpl: '<div class="sf-ui-textlist-wrap"><span class="text">${text}</span><span class="subtext">${subtext}</span><span class="right">${right}</span></div>'
      },
      text3: {
        height: [73, 98, 146],
        tmpl: '<div class="sf-ui-textlist-wrap"><span class="text">${text}</span><span class="subtext">${subtext}</span><span class="bottom">${bottom}</span><span class="right">${right}</span></div>'
      },
      thumbnail2: {
        height: [58, 78, 116],
        thumb: [48, 64, 96],
        tmpl: '<div class="sf-ui-textlist-thumb">${shadow}<div class="sf-ui-textlist-thumbcrop"><img src="${thumbnail.url}" style="${thumbstyle}"/></div></div>${tmpl.text2}'
      },
      thumbnail3: {
        height: [73, 98, 146],
        thumb: [60, 80, 120],
        tmpl: '<div class="sf-ui-textlist-thumb">${shadow}<div class="sf-ui-textlist-thumbcrop"><img src="${thumbnail.url}" style="${thumbstyle}"/></div></div>${tmpl.text3}'
      },
      video: {
        height: [78, 102, 152],
        thumb: [60, 80, 120],
        tmpl: '<div class="sf-ui-textlist-thumb">${shadow}<div class="sf-ui-textlist-thumbcrop"><img src="${thumbnail.url}" style="${thumbstyle}"/></div></div><div class="sf-ui-textlist-wrap"><span class="text">${text}</span><span class="subtext">${subtext}</span><span class="bottom">${bottom}</span></div>'
      }
    },
    isFocused: false,
    resolution: 0,
    offset: 0,
    calculatedIPP: 0,
    itemHeight: 0,
    doRefresh: false,
    widgetHeight: 0,
    addItem: function (e, d) {
      alert("[sf.ui.TextList] addItem()");
      var f = this.options,
        c = f.items.length - 1;
      if (d && !isNaN(d)) {
        d = d < 0 ? 0 : d > c ? c : d;
        f.items.splice(d, 0, e)
      } else {
        f.items.push(e)
      }
      this._refresh();
      return this
    },
    _bindEvents: function () {
      var c = this.view,
        e = this.options,
        d = this;
      c.items.each(function (f) {
        b(this).bind({
          mouseover: function () {
            d._drawCursor(f)
          },
          click: function () {
            e.index = f + e.start;
            d.focus()
          }
        })
      });
      c.list.bind("mouseleave", function () {
        c.cursor.hide()
      })
    },
    _blur: function () {
      var c = this.view,
        d = this.options;
      c.cursor.hide();
      c.focus.hide();
      c.items.removeClass(d.focusCssClass);
      this.isFocused = false
    },
    blur: function () {
      alert("[sf.ui.TextList] blur()");
      this._blur();
      return this
    },
    _calculateIPP: function (d, h) {
      var e = this.options,
        m = this.templates,
        c = this.resolution,
        g = this.widgetHeight,
        j = m.line.height[c],
        l = m.subtitle.height[c],
        k = 0,
        f = d;
      h = typeof h === "undefined" ? true : h;
      if (e.itemsPerPage > 0) {
        this.calculatedIPP = e.itemsPerPage
      } else {
        this.calculatedIPP = 0;
        while (e.items[f] && k < g) {
          k += e.items[f].subtitle ? l : this.itemHeight;
          k += j;
          f = h ? f + 1 : f - 1;
          this.calculatedIPP++
        }
      }
    },
    _changeState: function (f) {
      var k = this.options,
        g = k.selectable,
        e = this.view,
        j = k.items[f][k.selectField],
        h = [null, "checkbox", "radio"],
        d = [this.baseCssClass, h[g], k.selectPos].join("-"),
        c = b(e.items[f - k.start]).find("." + d);
      j ? c.addClass(k.selectCssClass) : c.removeClass(k.selectCssClass)
    },
    clear: function () {
      alert("[sf.ui.TextList] clear()");
      var c = this.view;
      this._blur();
      c.wrap.empty();
      c.focus.hide();
      c.cursor.hide();
      this.options.items = [];
      return this
    },
    _destroy: function () {
      alert("[sf.ui.TextList] _destroy()");
      var c = this.widget();
      c.empty()
    },
    _drawCursor: function (d) {
      var c = this.view,
        e = b(c.items[d]).position().top;
      c.cursor.css({
        display: "block",
        top: e + "px"
      })
    },
    _drawFocus: function (d, e) {
      var c = this.view,
        f = this.options;
      c.items.removeClass(f.focusCssClass);
      b(c.items[d]).addClass(f.focusCssClass);
      c.focus.css({
        display: "block",
        top: e + "px"
      })
    },
    _drawItems: function (h) {
      var c = this.options,
        m = this.view,
        p = this.templates,
        g = this.baseCssClass,
        k = p[c.type].tmpl,
        l = p.subtitle.tmpl,
        j, f = [],
        n, d, e;
      m.wrap.empty();
      j = c.type === "column_left" ? g + "-column-left" : c.type === "column_right" ? g + "-column-right" : "";
      for (e = 0, d = h.length; e < d; e++) {
        n = h[e];
        if (n.subtitle) {
          f.push(this._tmpl('<div class="' + g + "-item " + g + '-subtitle" style="height: ' + p.subtitle.height[this.resolution] + 'px;">' + l + "</div>", n))
        } else {
          if (!n.thumbstyle && n.thumbnail) {
            n.thumbstyle = this._thumbSize(n.thumbnail)
          }
          f.push(this._tmpl('<div class="' + g + "-item " + j + '" style="height: ' + this.itemHeight + 'px;">' + (c.selectable > 0 ? this._drawSelect(n) + k : k) + "</div>", n.thumbnail ? b.extend({
            shadow: m.shadow
          }, n) : n))
        }
        f.push(m.line)
      }
      m.wrap.html(f.join(""));
      m.items = m.wrap.find("." + g + "-item")
    },
    _drawSelect: function (f) {
      var h = this.options,
        d = this.templates,
        e = h.selectable,
        g = [null, "checkbox", "radio"],
        c = [this.baseCssClass, g[e], h.selectPos].join("-");
      return '<div class="' + c + (f[h.selectField] ? " " + h.selectCssClass : "") + (f[h.disabledField] ? " " + h.disabledCssClass : "") + '">' + d[g[e]] + "</div>"
    },
    _focus: function (d) {
      var f = this.options,
        g = f.start,
        c = g + this.calculatedIPP,
        e;
      if (!isNaN(d)) {
        this.isFocused = true;
        d = this._validateIndex(d);
        if (f.scrollSingle) {
          if (d > g + (this.calculatedIPP - 1)) {
            this._calculateIPP(d, false);
            c = d + 1;
            g = c - this.calculatedIPP
          } else {
            if (d < g) {
              this._calculateIPP(d);
              g = d;
              c = g + this.calculatedIPP
            }
          }
          if (d === 1 && f.items[0].subtitle && g === 1) {
            g = 0;
            this._calculateIPP(g);
            c = g + this.calculatedIPP
          }
        } else {
          e = Math.floor(d / this.calculatedIPP);
          g = e * this.calculatedIPP;
          c = g + this.calculatedIPP
        }
        f.index = d;
        this._renderPage(g, c);
        f.start = g
      }
    },
    focus: function (c) {
      alert("[sf.ui.TextList] focus()");
      this._focus(typeof c === "undefined" ? this.options.index : c);
      return this
    },
    getIndex: function () {
      alert("[sf.ui.TextList] getIndex()");
      return this.isFocused ? this.options.index : null
    },
    getItem: function (c) {
      alert("[sf.ui.TextList] getItem()");
      var d = this.options;
      c = c || d.index;
      return this.isFocused ? d.items[c] : null
    },
    getSelected: function () {
      alert("[sf.ui.TextList] getSelected()");
      var h = this.options,
        e = h.selectable,
        g = [],
        c = h.items.length,
        f, d;
      if (e > 0) {
        for (d = 0; d < c; d++) {
          f = h.items[d];
          if (f[h.selectField]) {
            if (e === 1) {
              g.push(f)
            } else {
              if (e === 2) {
                return f
              }
            }
          }
        }
        return g
      }
    },
    _getStyles: function (f, g) {
      var c = this.resolution,
        m = this.templates,
        k = m.subtitle.height[c],
        j = m.line.height[c],
        l = 0,
        h = 0,
        d, e;
      for (e = 0, d = g.length; e < d; e++) {
        l += g[e].subtitle ? k : this.itemHeight;
        l += j;
        if (e < f) {
          h = l
        }
      }
      return {
        top: h,
        height: l
      }
    },
    _init: function () {
      alert("[sf.ui.TextList] _init()");
      var f = this.options,
        d = this.view,
        c = this.widget(),
        e = this.templates;
      this._super();
      c.empty();
      if (typeof f.items !== "object" || (typeof f.items === "object" && !f.items.length)) {
        f.items = []
      }
      if (!e.hasOwnProperty(f.type)) {
        f.type = "text"
      }
      this._pickResolution();
      this.itemHeight = e[f.type].height[this.resolution];
      this.widgetHeight = c.height();
      d.list = b(e.list).addClass(this.baseCssClass + "-list " + this.baseCssClass + "-list-" + f.type).width(c.width());
      c.append(d.list);
      d.focus = b("<img />").attr("src", sf.ui.images + "/ui.textlist/list_highlighted.png").addClass(f.focusCssClass + "-bg").width(c.width()).height(this.itemHeight).hide();
      d.cursor = b(e.cursor.tmpl).addClass(this.baseCssClass + "-cursor").height(this.itemHeight - e.cursor.size[this.resolution]).width(c.width() - e.cursor.size[this.resolution]).hide();
      d.wrap = b("<div></div>").addClass(this.baseCssClass + "listbox").width(c.width());
      d.list.append(d.focus, d.cursor, d.wrap);
      d.shadow = this._tmpl(e.shadow.tmpl, this._shadowSize());
      d.line = this._tmpl(e.line.tmpl, {
        lineClass: this.baseCssClass + "-line",
        height: e.line.height[this.resolution]
      });
      if (f.items.length) {
        this._calculateIPP(f.start);
        this.doRefresh = true;
        this._renderPage()
      } else {
        d.wrap.html("No items")
      }
    },
    next: function () {
      alert("[sf.ui.TextList] next()");
      this._focus(this.options.index + this.isFocused);
      return this
    },
    _pickResolution: function () {
      var c = sf.ui.height;
      this.resolution = c === 540 ? 0 : c === 720 ? 1 : c === 1080 ? 2 : 0
    },
    prev: function () {
      alert("[sf.ui.TextList] prev()");
      this._focus(this.options.index - this.isFocused);
      return this
    },
    _refresh: function () {
      this.doRefresh = true;
      this._renderPage()
    },
    refresh: function () {
      alert("[sf.ui.TextList] refresh()");
      this._refresh();
      return this
    },
    removeItem: function (c) {
      alert("[sf.ui.TextList] removeItem()");
      var d = this.options;
      c = c || d.index;
      if (!isNaN(c) && c > -1 && c < d.items.length - 1) {
        d.items.splice(c, 1)
      }
      this._refresh();
      return this
    },
    _renderPage: function (g, c) {
      var f = this.options,
        e, d;
      g = typeof g === "undefined" ? f.start : g;
      c = typeof c === "undefined" ? g + this.calculatedIPP : c;
      d = this._setItems(g, c);
      if (g !== f.start || c !== f.start + this.calculatedIPP || this.doRefresh) {
        !f.scrollSingle && this.view.focus.css("display", "none");
        this._drawItems(d);
        this.doRefresh = false
      }
      e = this._getStyles(f.index - g, d);
      this._setOffset(e.top, e.height);
      this.isFocused && this._drawFocus(f.index - g, e.top)
    },
    _repl: function (c, e) {
      var d = c.split(".");
      return e.hasOwnProperty(d[0]) ? typeof e[d[0]] === "object" ? e[d[0]].hasOwnProperty(d[1]) ? e[d[0]][d[1]] : "" : e[d[0]] : d[0] === "tmpl" ? this.templates[d[1]] ? this._tmpl(this.templates[d[1]].tmpl, e) : "" : ""
    },
    selectAll: function () {
      alert("[sf.ui.TextList] selectAll()");
      var f = this.options,
        c = f.items.length,
        e, d;
      if (f.selectable === 1) {
        for (d = 0; d < c; d++) {
          e = f.items[d];
          if (!e[f.disabledField] && !e[f.selectField]) {
            e[f.selectField] = true;
            this._changeState(d)
          }
        }
      }
      return this
    },
    _selectItem: function (c) {
      var f = this.options,
        d = f.selectable,
        e;
      c = c || f.index;
      e = f.items[c];
      if (e && !e[f.disabledField] && !e[f.selectField] && d > 0) {
        d === 2 && this._unselectAll();
        e[f.selectField] = true;
        this._changeState(c)
      }
    },
    selectItem: function (c) {
      alert("[sf.ui.TextList] selectItem()");
      this._selectItem(c);
      return this
    },
    _setItems: function (d, c) {
      return this.options.items.slice(d, c)
    },
    _setOffset: function (h, c) {
      var f = this.widgetHeight,
        g = this.offset,
        d = this.view,
        e = [{
          top: 0,
          bottom: ""
        }, {
          top: "",
          bottom: 0
        }];
      this.offset = (!this.offset && h + this.itemHeight > f) ? 1 : (this.offset && (f - c + h < 0)) ? 0 : (this.offset && c < f) ? 0 : g;
      g !== this.offset && d.list.css(e[this.offset])
    },
    _shadowSize: function () {
      var h = this.options,
        e = this.templates,
        g = this.resolution,
        d = e[h.type].thumb ? e[h.type].thumb[g] : 0,
        c = g === 2 ? 2 : 1,
        f = e.shadow;
      return {
        shadowSize: d + 2 * (f.size[g] - f.offset[g]) - 2 * c,
        innerSize: d - 2 * f.offset[g] - 2 * c,
        shadowOffset: f.size[g] - f.offset[g]
      }
    },
    _thumbSize: function (c) {
      var e = this.options,
        l = this.templates,
        g = l[e.type].thumb ? l[e.type].thumb[this.resolution] : 0,
        d, k, j = 0,
        f = 0,
        h;
      if (c && c.width && c.height) {
        h = c.width / c.height;
        if (h < 1) {
          d = g;
          k = Math.round(d / h);
          j = Math.round((g - k) / 2)
        } else {
          k = g;
          d = Math.round(k * h);
          f = Math.round((g - d) / 2)
        }
        return "width: " + d + "px; height: " + k + "px;top: " + j + "px; left: " + f + "px;"
      } else {
        return this.resolution === 2 ? "top: -2px; left: -2px;" : "top: -1px; left: -1px;"
      }
    },
    _tmpl: function (c, e) {
      var d = this;
      return typeof c === "string" && typeof e === "object" ? c.replace(/\$\{([a-zA-Z0-9_\.]*)\}/g, function (f, g) {
        return d._repl(g, e)
      }) : ""
    },
    _toggleItem: function (c) {
      var f = this.options,
        d = f.selectable,
        e;
      c = c || f.index;
      e = f.items[c];
      if (d === 1 && e && !e[f.disabledField]) {
        e[f.selectField] = !e[f.selectField];
        this._changeState(c)
      }
    },
    toggleItem: function (c) {
      alert("[sf.ui.TextList] toggleItem()");
      var e = this.options,
        d = e.selectable;
      if (d === 1) {
        this._toggleItem(c)
      } else {
        if (d === 2) {
          this._selectItem(c)
        }
      }
      return this
    },
    _unselectAll: function () {
      var g = this.options,
        d = this.view,
        c = g.items.length,
        f, e;
      for (e = 0; e < c; e++) {
        f = g.items[e];
        if (!f[g.disabledField] && f[g.selectField]) {
          f[g.selectField] = false
        }
      }
      d.items.children("div:not('." + g.disabledCssClass + "')").removeClass(g.selectCssClass)
    },
    unselectAll: function () {
      alert("[sf.ui.TextList] unselectAll()");
      this._unselectAll();
      return this
    },
    unselectItem: function (c) {
      alert("[sf.ui.TextList] unselectItem()");
      var f = this.options,
        d = f.selectable,
        e;
      c = c || f.index;
      e = f.items[c];
      if (d === 1 && e && !e[f.disabledField] && e[f.selectField]) {
        e[f.selectField] = false;
        this._changeState(c)
      }
      return this
    },
    _validateIndex: function (d) {
      var e = this.options,
        c = e.items.length - 1;
      d = e.loop ? (d < 0 ? c : d > c ? 0 : d) : (d < 0 ? 0 : d > c ? c : d);
      if (e.items[d].subtitle) {
        if ((e.index === c && d === 0) || d >= e.index) {
          return this._validateIndex(d + 1)
        } else {
          return this._validateIndex(d - 1)
        }
      }
      return d
    }
  });
  sf.ui.bridge(a, sf.ui.TextList);
  sf.ui.addSelector(a)
}(jQuery));
(function (b) {
  var a = "sfWizard";
  sf.ui.Wizard = sf.ui.widgetFactory({
    widgetName: a,
    baseCssClass: "sf-ui-wizard",
    eventNamespace: "sfwizard",
    isFocused: false,
    width: null,
    options: {
      stepcount: 0,
      step: 0
    },
    templates: {
      step: '<div class="step" waper_focus="false"><div class="left" waper_focus="false"></div><div class="right" waper_focus="false"></div><div class="center" waper_focus="false"></div></div>'
    },
    _init: function () {
      alert("[sf.ui.Wizard] _init()");
      var h = this.options,
        d = this.view,
        c = this.widget(),
        f = this.templates;
      //LDW>
      c.empty();
      this._super();
      if (h.stepcount < 1) {
        alert("[sf.ui.Wizard] ERROR: no scenes defined for Wizard. Exiting.");
        return false
      }
      for (var e = 0; e < h.stepcount; e++) {
        b.tmpl(f.step, null).appendTo(c);
        alert("append step")
      }
      var g = c.width();
      //LDW> c.find(".step").width(parseInt(g, 10) / h.stepcount);
      c.find(".step").width((100 / h.stepcount) + "%");
      this._renderSteps();
      
      //LDW>
      compSetAttrWizard(this.widget());
    },
    _destroy: function () {
      alert("[sf.ui.Wizard] _destroy()");
      this.widget().empty()
    },
    _renderSteps: function () {
      var f = this.options,
        c = this.view,
        e = this.templates;
      for (var d = 0; d < f.stepcount; d++) {
        if (d < f.step) {
          this._setState(d, "normal")
        } else {
          if (d == f.step) {
            this._setState(d, "focused")
          } else {
            if (d > f.step) {
              this._setState(d, "dim")
            }
          }
        }
      }
    },
    _setState: function (d, e) {
      var c = this.widget();
      e = e.toLowerCase();
      c.find(".step").eq(d).removeClass("focused").removeClass("dim");
      if (e == "focused" || e == "dim") {
        c.find(".step").eq(d).addClass(e)
      }
    },
    _nextStep: function () {
      if (this.options.step < this.options.stepcount - 1) {
        this.move(this.options.step + 1)
      }
    },
    _previousStep: function () {
      if (this.options.step > 0) {
        this.move(this.options.step - 1)
      }
    },
    move: function (c) {
      if (c >= 0 && c < this.options.stepcount) {
        this.options.step = c;
        this._renderSteps()
      }
    },
    next: function () {
      this._nextStep()
    },
    prev: function () {
      this._previousStep()
    },
    show: function () {
      this.widget().show()
    },
    hide: function () {
      this.widget().hide()
    },
    getStep: function () {
      return this.options.step
    }
  });
  sf.ui.bridge(a, sf.ui.Wizard);
  sf.ui.addSelector(a)
}(jQuery));
sf.core.init();
sf.ui.init();




//LDW>
function compSetAttrButton(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvButton func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-text'){
    			var text_split = value.split(",");
    			if (text_split.length == 1) {
    				obj.sfButton({text:value});
    			}
    			else if (text_split.length > 1) {
    				var text_array = Array();
    				for (var j = 0; j < text_split.length; j++) {
    					text_array.push(text_split[j]);
    				}
    				obj.sfButton({text:text_array});
    			}
		    }
		}
	};
}

function compSetAttrArrowButton(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvArrowButton func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-text'){
                obj.sfArrowButton("setText", value);
    		}
    		/* else if(name == 'data-arrow'){
    		    obj.sfArrowButton({ 
    		        text:obj.sfArrowButton("getText"),
    		        arrow:value
    		    });
    		} */
		}
	};
}

function compSetAttrLabel(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvLabel func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-text'){
			    obj.sfLabel({text:value});
			}
		}
	};
}

function compSetAttrImage(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvImage func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-src'){
			    obj.sfImage({src:value});
			}
		}
	};
}

function compSetAttrCheckbox(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvCheckbox func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-checked'){
			    obj.sfCheckBox(value);	
			}
		}
	};
}

function compSetAttrPopup(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvPopup func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
			if(name == 'data-visible'){
				obj.sfPopup(value);
			}else if(name == 'data-text'){
				obj.sfPopup("option", "text", value);
			}else if(name == 'data-title'){
				obj.sfPopup("option", "title", value);
			}else if(name == 'data-dim'){
				if (value == "true") obj.find(".dim").show();
                else obj.find(".dim").hide();
			}
		}
	};
}

function compSetAttrLoading(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvLoading func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
			if(name == 'data-visible'){
				obj.sfLoading(value);
			} else if(name == 'data-stepintervaltime'){
				obj.sfLoading({stepIntervalTime:value});
			}
		}
	};
}

function compSetAttrPageIndicator(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvPageIndicator func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
			if(name == 'data-visible'){
				obj.sfPageIndicator(value);
			}else if(name == 'data-count'){
				obj.sfPageIndicator("option", "count", parseInt(value));
			}else if(name == 'data-index'){
				obj.sfPageIndicator("option", "index", parseInt(value));
			}
		}
	};
}

function compSetAttrTextInput(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvTextInput func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
			if(name == 'data-text'){
				obj.sfTextInput("option", "text", value);
			}else if(name == 'data-maxlength'){
				obj.sfTextInput("option", "maxlength", parseInt(value));
			}
		}
	};
}

function compSetAttrScroll(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvScroll func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
			if(name == 'data-visible'){
				obj.sfScroll(value);
			}else if(name == 'data-pages'){
				obj.sfScroll("option", "pages", parseInt(value));
			}else if(name == 'data-currentpage'){
				obj.sfScroll("option", "currentPage", parseInt(value));
			}
		}
	};
}

function compSetAttrHScroll(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvHScroll func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
			if(name == 'data-visible'){
				obj.sfHScroll(value);
			}else if(name == 'data-pages'){
				obj.sfHScroll("option", "pages", parseInt(value));
			}else if(name == 'data-currentpage'){
				obj.sfHScroll("option", "currentPage", parseInt(value));
			}
		}
	};
}

function compSetAttrKeyHelp(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvKeyHelp func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
			
		}
	};
}

function compSetAttrList(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvList func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-data'){
		        var text_split = value.split(",");
    			var text_array = Array();
    			for (var j = 0; j < text_split.length; j++) {
    				text_array.push(text_split[j]);
    			}
    			obj.sfList("option", "data", text_array);
    		} else if (name == 'data-index') {
    		    obj.sfList("option", "index", value);
    		} else if (name == 'data-itemsperpage') {
    		    obj.sfList("option", "itemsPerPage", value);
    		}
		}
	};
}

function compSetAttrDatepicker(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvDatepicker func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
			if(name == 'data-visible'){
				obj.sfDatepicker(value);
			} else if(name == 'data-title'){
				obj.find(".titletext").html(value);
			} else if(name == 'data-format'){
				obj.sfDatepicker("option", "format", value);
			} else if(name == 'data-timepicker'){
			    if(value != "true") value = false;
                else value = true;
				obj.sfDatepicker("option", "timePicker", value);
				obj.sfDatepicker(obj[0].getAttribute("data-visible"));
			}
		}
	};
}

function compSetAttrMaps(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvMaps func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
			if(name == 'data-latitude'){
    			obj.sfMaps({
    			    api:'google',
    			    center:[parseFloat(value), parseFloat(obj.attr('data-longitude'))],
    			    zoom:parseInt(obj.attr('data-zoom'))
    			});
    		} else if(name == 'data-longitude'){
    		    obj.sfMaps({
    			    api:'google',
    			    center:[parseFloat(obj.attr('data-latitude')), parseFloat(value)],
    			    zoom:parseInt(obj.attr('data-zoom'))
    			});
    		} else if(name == 'data-zoom'){
    		    obj.sfMaps({
    			    api:'google',
    			    center:[parseFloat(obj.attr('data-latitude')), parseFloat(obj.attr('data-longitude'))],
    			    zoom:parseInt(value)
    			});
    		}
		}
	};
}

function compSetAttrToggleButton(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvToggleButton func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-on'){
    			obj.sfToggleButton("option", "on", value);
    		} else if(name == 'data-off'){
    			obj.sfToggleButton("option", "off", value);
    		} else if(name == 'data-ison'){
    		    obj.sfToggleButton("toggle");
    		}
		}
	};
}

function compSetAttrProgressBar(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvProgressBar func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-value'){
    			obj.sfProgressBar("setValue", value);
    		}
    		else if(name == 'data-max'){
    		    obj.sfProgressBar("setMax", value);
    		}
    		else if(name == 'data-type'){
    		    obj.sfProgressBar("option", "type", value);
    		}
		}
	};
}

function compSetAttrSlider(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvSlider func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(value == "true") value = true;
            else if(value == "false") value = false;
                
		    if(name == 'data-value'){
    			obj.sfSlider("setValue", value);
    		}
    		else if(name == 'data-max'){
    		    obj.sfSlider("setMax", value);
    		}
    		else if(name == 'data-showtooltip'){
    		    obj.sfSlider("showTooltip", value);
    		}
    		else if(name == 'data-showprogress'){
    		    obj.sfSlider("showProgress", value);
    		}
    		else if(name == 'data-reverse'){
    		    obj.sfSlider("setReverse", value);
    		}
		}
	};
}

function compSetAttrTooltip(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvTooltip func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-text'){
    			obj.sfTooltip("setText", value);
    		}
    		else if(name == 'data-title'){
    		    obj.sfTooltip("setTitle", value);
    		}
    		else if(name == 'data-orientation'){
    		    obj.sfTooltip("setOrientation", value);
    		}
		}
	};
}

function compSetAttrTitleBar(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvTitleBar func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-title'){
    			obj.sfTitleBar("setTitle", value);
    		}
    		else if(name == 'data-subtitle'){
    		    obj.sfTitleBar("setSubTitle", value);
    		}
    		else if(name == 'data-showarrow'){
    		    if(value != "true") value = false;
                else value = true;
    		    obj.sfTitleBar("showArrow", value);
    		}
		}
	};
}

function compSetAttrWizard(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvTitleBar func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-stepcount'){
    			obj.sfWizard({
                    stepcount: parseInt(value)
                });
    		}
    		else if(name == 'data-step'){
    		    obj.sfWizard("move", value);
    		}
		}
	};
}

function compSetAttrAVSetting(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvAVSetting func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-visible'){
    		    if (value == "show") sf.service.AVSetting.show();
    		    else obj.hide();
    		}
		}
	};
}

function compSetAttrUSB(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvUSB func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-visible'){
    			if (value == "show") sf.service.USB.show({});
                else obj.hide();
    		}
		}
	};
}

function compSetAttrVideoPlayer(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvVideoPlayer func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-visible'){
    			if (value == "show") obj.show();
                else obj.hide();
    		}
    		else if(name == 'data-fullscreen'){
    		    if(isEmpty(value) || value != "true") value = false;
                else value = true;
    		    __setVideoFullScreen(obj, value);
    		}
		}
	};
}
function __setVideoFullScreen(elem, V){
	var video_elem = elem.find("#_pluginObjectPlayerContainer");
    var mini = elem.find("#sf-service-videoplayer-mini");
    var full = elem.find("#sf-service-videoplayer-full");
    if (V) {
        mini.hide();
        full.show();
        video_elem[0].className = "full";
        video_elem.show();
	}
    else {
        full.hide();
        mini.show();
        video_elem[0].className = "mini";
	}
}

function compSetAttrAudioPlayer(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvAudioPlayer func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-visible'){
    			if (value == "hide") obj.hide();
                else obj.show();
    		}
		}
	};
}

function compSetAttrImageViewer(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvImageViewer func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-visible'){
    			if (value == "hide") obj.hide();
                else obj.show();
    		}
    		else if(name == 'data-url'){
    			obj.find("img").attr("src", value);
    		}
		}
	};
}

function compSetAttrSlideShow(obj){
	obj[0].old_setAttribute = obj[0].setAttribute;
	obj[0].setAttribute = function(name, value, param){
		console.log(" dtvSlideShow func : " + name + "  " + value + "  " + param);
		if(param == undefined){
			obj[0].old_setAttribute(name, value);
		}else{
		    if(name == 'data-visible'){
    			if (value == "hide") obj.hide();
                else obj.show();
    		}
		}
	};
}

function _onParentRefresh(obj) {
    var $obj = $(obj);
    if (!obj) return;
    
    var dataRole = obj.getAttribute("data-role");
    
    if (dataRole == "page") return;

    obj.innerHTML = "";
    for (var i = obj.attributes.length - 1; i >= 0; i--) {
        var attr = obj.attributes[i];
        if (attr.name.indexOf("ev-on") == 0) {
            obj.removeAttribute(obj.attributes[i].name);
        }
    }
              
    switch (dataRole) {
        case "dtvAVSetting":
        case "dtvUSB":
        case "dtvVideoPlayer":
        case "dtvAudioPlayer":
        case "dtvImageViewer":
        case "dtvSlideShow":
            console.log(dataRole+" Component can not add more than 1.");
            break;
        default:
            _createComponent($obj, dataRole);
            break;
    }
}

function _createComponent(obj, type) {
    switch (type) {
		case 'dtvButton':
			var dataText = obj.attr("data-text");
			viewCompButton(obj, dataText);
		    break;
		case 'dtvArrowButton':
			var dataText = obj.attr("data-text");
			// var dataArrow = obj.attr("data-arrow");
			viewCompArrowButton(obj, dataText);
		    break;
		case 'dtvLabel':
			var dataText = obj.attr("data-text");
			viewCompLabel(obj, dataText);
		    break;
		case 'dtvImage':
			var dataSrc = obj.attr("data-src");
			viewCompImage(obj, dataSrc);
		    break;
		case 'dtvCheckBox':
			var dataChecked = obj.attr("data-checked");
			viewCompCheckbox(obj, dataChecked);
		    break;
		case 'dtvPopup':
			var dataText = obj.attr("data-text");
			var dataTitle = obj.attr("data-title");
			var dataDim = obj.attr("data-dim");
			var dataVisible = obj.attr("data-visible");
			viewCompPopup(obj, dataText, dataTitle, dataDim, dataVisible, false);
		    break;
		case 'dtvPopupOkCancel':
			var dataText = obj.attr("data-text");
			var dataTitle = obj.attr("data-title");
			var dataDim = obj.attr("data-dim");
			var dataVisible = obj.attr("data-visible");
			viewCompPopup(obj, dataText, dataTitle, dataDim, dataVisible, true);
		    break;
		case 'dtvLoading':
		    var dataStepIntervalTime = obj.attr("data-stepintervaltime");
			var dataVisible = obj.attr("data-visible");
			viewCompLoading(obj, dataStepIntervalTime, dataVisible);
		    break;
		case 'dtvPageIndicator':
			var dataCount = obj.attr("data-count");
			var dataIndex = obj.attr("data-index");
			var dataVisible = obj.attr("data-visible");
			viewCompPageIndicator(obj, dataCount, dataIndex, dataVisible);
		    break;
		case 'dtvTextInput':
			var dataText = obj.attr("data-text");
			var dataMaxLength = obj.attr("data-maxlength");
			viewCompTextInput(obj, dataText, dataMaxLength);
		    break;
		case 'dtvScroll':
			var dataPages = obj.attr("data-pages");
			var dataCurPages = obj.attr("data-currentpage");
			var dataVisible = obj.attr("data-visible");
			viewCompScroll(obj, dataPages, dataCurPages, dataVisible);
		    break;
		case 'dtvHScroll':
			var dataPages = obj.attr("data-pages");
			var dataCurPages = obj.attr("data-currentpage");
			var dataVisible = obj.attr("data-visible");
			viewCompHScroll(obj, dataPages, dataCurPages, dataVisible);
		    break;
		case 'dtvProgressBar':
			var dataValue = obj.attr("data-value");
			var dataMax = obj.attr("data-max");
			var dataType = obj.attr("data-type");
			viewCompProgressBar(obj, dataValue, dataMax, dataType);
		    break;
		case 'dtvHSlider':
			var dataValue = obj.attr("data-value");
			var dataMax = obj.attr("data-max");
			var dataShowtooltip = obj.attr("data-showtooltip");
			var dataShowprogress = obj.attr("data-showprogress");
			var dataReverse = obj.attr("data-reverse");
			viewCompSlider(obj, dataValue, dataMax, dataShowtooltip, dataShowprogress, dataReverse, false);
		    break;
		case 'dtvSlider':
			var dataValue = obj.attr("data-value");
			var dataMax = obj.attr("data-max");
			var dataShowtooltip = obj.attr("data-showtooltip");
			var dataShowprogress = obj.attr("data-showprogress");
			var dataReverse = obj.attr("data-reverse");
			viewCompSlider(obj, dataValue, dataMax, dataShowtooltip, dataShowprogress, dataReverse, true);
		    break;
		case 'dtvToggleButton':
			var dataOn = obj.attr("data-on");
			var dataOff = obj.attr("data-off");
			var dataIson = obj.attr("data-ison");
			viewCompToggleButton(obj, dataOn, dataOff, dataIson);
		    break;
		case 'dtvKeyHelp':
			viewCompKeyHelp(obj);
		    break;
		case 'dtvTitleBar':
		    var dataTitle = obj.attr("data-title");
			var dataSubtitle = obj.attr("data-subtitle");
			var dataShowarrow = obj.attr("data-showarrow");
			viewCompTitleBar(obj, dataTitle, dataSubtitle, dataShowarrow);
		    break;
		case 'dtvDatepicker':
		    var dataTimepicker = obj.attr("data-timepicker");
		    var dataTitle = obj.attr("data-title");
		    var dataFormat = obj.attr("data-format");
		    var dataVisible = obj.attr("data-visible");
		    viewCompDatepicker(obj, dataTimepicker, dataTitle, dataFormat, dataVisible);
		    break;
		case 'dtvList':
		    var dataData = obj.attr("data-data");
		    var dataIndex = obj.attr("data-index");
		    var dataItemsPerPage = obj.attr("data-itemsperpage");
		    viewCompList(obj, dataData, dataIndex, dataItemsPerPage);
		    break;
		case 'dtvWizard':
		    var dataStepcount = obj.attr("data-stepcount");
		    var dataStep = obj.attr("data-step");
		    viewCompWizard(obj, dataStepcount, dataStep);
		    break;
		case 'dtvTooltip':
		    var dataText = obj.attr("data-text");
		    var dataTitle = obj.attr("data-title");
		    var dataOrientation = obj.attr("data-orientation");
		    viewCompTooltip(obj, dataText, dataTitle, dataOrientation);
		    break;
		case 'dtvMaps':
		    var dataApi = obj.attr("data-api");
		    var dataLatitude = obj.attr("data-latitude");
		    var dataLongitude = obj.attr("data-longitude");
		    var dataZoom = obj.attr("data-zoom");
		    viewCompMaps(obj, dataApi, dataLatitude, dataLongitude, dataZoom);
		    break;
		case 'dtvAVSetting':
		    var dataVisible = obj.attr("data-visible");
		    var callback = "$id_$event";
		    viewCompAVSetting(obj, dataVisible, callback);
		    break;
		case 'dtvUSB':
		    var dataVisible = obj.attr("data-visible");
		    var dataFileType = obj.attr("data-filetype");
		    var callback = "$id_$event";
		    viewCompUSB(obj, dataFileType, dataVisible, callback);
		    break;
		case 'dtvVideoPlayer':
		    var dataVisible = obj.attr("data-visible");
		    var dataFullscreen = obj.attr("data-fullscreen");
		    viewCompVideoPlayer(obj, dataFullscreen, dataVisible);
		    break;
		case 'dtvAudioPlayer':
		    var dataVisible = obj.attr("data-visible");
		    viewCompAudioPlayer(obj, dataVisible);
		    break;
		case 'dtvImageViewer':
		    var dataUrl = obj.attr("data-url");
		    var dataVisible = obj.attr("data-visible");
		    viewCompImageViewer(obj, dataUrl, dataVisible);
		    break;
		case 'dtvSlideShow':
		    var dataVisible = obj.attr("data-visible");
		    viewCompSlideShow(obj, dataVisible);
		    break;
		case 'secButton':
			var dataText = obj.attr("data-text");
			viewCompSecButton(obj, dataText);
		    break;
		case 'secLoading':
		    var dataStepIntervalTime = obj.attr("data-stepintervaltime");
			var dataVisible = obj.attr("data-visible");
			viewCompSecLoading(obj, dataStepIntervalTime, dataVisible);
		    break;
		case 'secProgressBar':
			var dataValue = obj.attr("data-value");
			var dataMax = obj.attr("data-max");
			var dataType = obj.attr("data-type");
			viewCompSecProgressBar(obj, dataValue, dataMax, dataType);
		    break;
		case 'secPopup':
			var dataText = obj.attr("data-text");
			var dataTitle = obj.attr("data-title");
			var dataDim = obj.attr("data-dim");
			var dataVisible = obj.attr("data-visible");
			viewCompSecPopup(obj, dataText, dataTitle, dataDim, dataVisible);
		    break;
		case 'secArrowButton':
			var dataText = obj.attr("data-text");
			var dataArrow = obj.attr("data-arrow");
			viewCompSecArrowButton(obj, dataText, dataArrow);
		    break;
    }
}

function viewCompButton(obj, data_text){
    if(isEmpty(data_text)) data_text = "";
    
    var text_split = data_text.split(",");
    if (text_split.length == 1) {
    	obj.sfButton({text:data_text});
    }
    else if (text_split.length > 1) {
        var text_array = Array();
        for (var j = 0; j < text_split.length; j++) {
            text_array.push(text_split[j]);
        }
        obj.sfButton({text:text_array});
    }
}

function viewCompArrowButton(obj, data_text){
    if(isEmpty(data_text)) data_text = "";
    // if(isEmpty(data_arrow)) data_arrow = "all";
    
    obj.sfArrowButton({
        text:data_text
    });
}

function viewCompLabel(obj, data_text){
	if(isEmpty(data_text)) data_text = "";
	obj.sfLabel({text:data_text});
}

function viewCompImage(obj, data_src){
	if(isEmpty(data_src)) data_src = "";
	obj.sfImage({src:data_src});
}

function viewCompCheckbox(obj, data_checked){
	if(isEmpty(data_checked)) data_checked = "";
	obj.sfCheckBox(data_checked);
}

function viewCompPopup(obj, data_text, data_title, data_dim, data_visible, isCancel){
	if(isEmpty(data_text)) data_text = "";
	if(isEmpty(data_title)) data_title = "";
	if(isEmpty(data_dim) || data_dim != "true") data_dim = false;
    else data_dim = true;

	var btns = isCancel ? ["OK", "Cancel"] : ["OK"];
	obj.sfPopup({
	    title:data_title,
	    text:data_text,
		buttons:btns,
		dim:data_dim,
		defaultFocus: 0
	});
    
	if(!isEmpty(data_visible)){
		obj.sfPopup(data_visible);
	}
}

function viewCompLoading(obj, data_stepIntervalTime, data_visible){
    if(isEmpty(data_stepIntervalTime)) data_stepIntervalTime = 100;
    
    obj.sfLoading({
        stepIntervalTime:data_stepIntervalTime
    });
    
	if(!isEmpty(data_visible)){
		obj.sfLoading(data_visible);
	}
}

function viewCompPageIndicator(obj, data_count, data_index, data_visible){
	if(isEmpty(data_count)) data_count = "3";
	if(isEmpty(data_index)) data_index = "0";
	obj.sfPageIndicator({
		count:parseInt(data_count),
		index:parseInt(data_index)
	});
    
	if(!isEmpty(data_visible)){
		obj.sfPageIndicator(data_visible);
	}
}

function viewCompTextInput(obj, data_text, data_maxlength){
	if(isEmpty(data_text)) data_text = "";
	if(isEmpty(data_maxlength)) data_maxlength = "4";
	obj.sfTextInput({text:data_text, maxlength:parseInt(data_maxlength)});
}

function viewCompScroll(obj, data_pages, data_currentpage, data_visible){
	if(isEmpty(data_pages)) data_pages = "5";
	if(isEmpty(data_currentpage)) data_currentpage = "1";
	obj.sfScroll({
		pages:parseInt(data_pages),
		currentPage:parseInt(data_currentpage)
	});
	
	if(!isEmpty(data_visible)){
		obj.sfScroll(data_visible);
	}
}

function viewCompHScroll(obj, data_pages, data_currentpage, data_visible){
	if(isEmpty(data_pages)) data_pages = "5";
	if(isEmpty(data_currentpage)) data_currentpage = "1";
	obj.sfHScroll({
		pages:parseInt(data_pages),
		currentPage:parseInt(data_currentpage)
	});
	
	if(!isEmpty(data_visible)){
		obj.sfHScroll(data_visible);
	}
}

function viewCompKeyHelp(obj){
    obj.sfKeyHelp({'return':'Return'});
}

function viewCompList(obj, data_data, data_index, data_itemsPerPage){
    if(isEmpty(data_data)) return;
    if(isEmpty(data_index)) data_index = 0;
    if(isEmpty(data_itemsPerPage)) data_itemsPerPage = 3;
    
    var text_split = data_data.split(",");
    var text_array = Array();
    for (var j = 0; j < text_split.length; j++) {
        text_array.push(text_split[j]);
    }
    
    obj.sfList({
        data:text_array,
        index:data_index,
        itemsPerPage:data_itemsPerPage
    });
}

function viewCompDatepicker(obj, data_timepicker, data_title, data_format, data_visible){
	if(isEmpty(data_timepicker) || data_timepicker != "true") data_timepicker = false;
    else data_timepicker = true;
    if(isEmpty(data_title)) data_title = "Setting";
    if(isEmpty(data_format)) data_format = "yyyy-MM-dd";
    
	obj.sfDatepicker({
		timePicker:data_timepicker,
		title:data_title,
		format:data_format
	});
    
	if(!isEmpty(data_visible)){
		obj.sfDatepicker(data_visible);
	}
}

function viewCompMaps(obj, dataApi, data_latitude, data_longitude, data_zoom){
    //if(isEmpty(dataApi)) dataApi = "google";
    if(isEmpty(data_latitude)) data_latitude = "37.5";
    if(isEmpty(data_longitude)) data_longitude = "127";
    if(isEmpty(data_zoom)) data_zoom = "9";
    
    var maps_elem = obj.sfMaps({
		api: "google",
		center: [parseFloat(data_latitude), parseFloat(data_longitude)],
		zoom: parseInt(data_zoom)
	});
}

function viewCompToggleButton(obj, data_on, data_off, data_isOn){
    if(isEmpty(data_on)) data_on = "On";
    if(isEmpty(data_off)) data_off = "Off";
    if(isEmpty(data_isOn) || data_isOn != "true") data_isOn = false;
    else data_isOn = true;
    
	obj.sfToggleButton({
        text: {
            on: data_on,
            off: data_off
        },
        isOn:data_isOn
    });
}

function viewCompProgressBar(obj, data_value, data_max, data_type){
    if(isEmpty(data_value)) data_value = 20;
    if(isEmpty(data_max)) data_max = 100;
    if(isEmpty(data_type)) data_type = "progress";
    
    obj.sfProgressBar({
        value: parseInt(data_value),
        max: parseInt(data_max),
        type: data_type
    });
}

function viewCompSlider(obj, data_value, data_max, data_showtooltip, data_showprogress, data_reverse, data_vertical){
    if(isEmpty(data_value)) data_value = 20;
    if(isEmpty(data_max)) data_max = 100;
    if(isEmpty(data_showtooltip) || data_showtooltip != "true") data_showtooltip = false;
    else data_showtooltip = true;
    if(isEmpty(data_showprogress) || data_showprogress != "true") data_showprogress = false;
    else data_showprogress = true;
    if(isEmpty(data_reverse) || data_reverse != "true") data_reverse = false;
    else data_reverse = true;

    obj.sfSlider({
        value: data_value,
        max: data_max,
        showtooltip: data_showtooltip,
        showprogress: data_showprogress,
        vertical: data_vertical,
        reverse: data_reverse
    });
}

function viewCompTooltip(obj, data_text, data_title, data_orientation){
    if(isEmpty(data_text)) data_text = "";
    if(isEmpty(data_title)) data_title = "";
    if(isEmpty(data_orientation)) data_orientation = "";
    
    obj.sfTooltip({
        text: data_text,
        title: data_title,
        orientation: data_orientation
    });
}

function viewCompTitleBar(obj, data_title, data_subtitle, data_showarrow){
    if(isEmpty(data_title)) data_title = "";
    if(isEmpty(data_subtitle)) data_subtitle = "";
    if(isEmpty(data_showarrow) || data_showarrow != "true") data_showarrow = false;
    else data_showarrow = true;
    
    obj.sfTitleBar({
        title: data_title,
        subtitle: data_subtitle,
        showarrow: data_showarrow
    });
}

function viewCompWizard(obj, data_stepcount, data_step){
    if(isEmpty(data_stepcount)) data_stepcount = "5";
    if(isEmpty(data_step)) data_step = "0";
    
    obj.sfWizard({
        stepcount: parseInt(data_stepcount),
        step: parseInt(data_step)
    });
}

function viewCompAVSetting(obj, data_visible, callback){
    sf.service.AVSetting.show();
    
    compSetAttrAVSetting(obj);
}

function viewCompUSB(obj, data_filetype, data_visible, ev_callback){
    sf.service.USB.show({});
    
    compSetAttrUSB(obj);
}

function viewCompVideoPlayer(obj, data_fullscreen, data_visible){
    sf.service.VideoPlayer.init();
	__setVideoFullScreen(obj, false);
	
    compSetAttrVideoPlayer(obj);
}

function viewCompAudioPlayer(obj, data_visible){
    sf.service.AudioPlayer.init({});
	
	compSetAttrAudioPlayer(obj);
}

function viewCompImageViewer(obj, data_url, data_visible){
    if (isEmpty(data_url)) data_url = "";
    sf.service.ImageViewer.draw({
        url:data_url,
        width:obj[0].offsetWidth,
        height:obj[0].offsetHeight
    });
    obj.show();
    
    compSetAttrImageViewer(obj);
}

function viewCompSlideShow(obj, data_visible){
    sf.service.ImageViewer.SlideShow.init({});
    obj.show();
    
    compSetAttrSlideShow(obj);
}

function viewCompSecButton(obj, data_text){
    if(isEmpty(data_text)) data_text = "";
    
    var text_split = data_text.split(",");
    if (text_split.length == 1) {
    	obj.secButton({text:data_text});
    }
    else if (text_split.length > 1) {
        var text_array = Array();
        for (var j = 0; j < text_split.length; j++) {
            text_array.push(text_split[j]);
        }
        obj.secButton({text:text_array});
    }
}

function viewCompSecProgressBar(obj, data_value, data_max, data_type){
    if(isEmpty(data_value)) data_value = 20;
    if(isEmpty(data_max)) data_max = 100;
    if(isEmpty(data_type)) data_type = "progress";
    
    obj.secProgressBar({
        value: parseInt(data_value),
        max: parseInt(data_max),
        type: data_type
    });
}

function viewCompSecLoading(obj, data_stepIntervalTime, data_visible){
    if(isEmpty(data_stepIntervalTime)) data_stepIntervalTime = 2000;
    
    obj.sfLoading({
        stepIntervalTime:data_stepIntervalTime
    });
    
	if(!isEmpty(data_visible)){
		obj.secLoading(data_visible);
	}
}

function viewCompSecPopup(obj, data_text, data_title, data_dim, data_visible){
	if(isEmpty(data_text)) data_text = "";
	if(isEmpty(data_title)) data_title = "";
	if(isEmpty(data_dim) || data_dim != "true") data_dim = false;
    else data_dim = true;
	
	obj.secPopup({
	    text:data_text,
		title:data_title,
		buttons:["OK"],
		dim:data_dim
	});
    
	if(!isEmpty(data_visible)){
		obj.secPopup(data_visible);
	}
}

function viewCompSecArrowButton(obj, data_text, data_arrow){
    if(isEmpty(data_text)) data_text = "";
    if(isEmpty(data_arrow)) data_arrow = "all";
    
    obj.secArrowButton({
        text:data_text,
        arrow:data_arrow
    });
}


function isEmpty(value){
	return (value == undefined || value == null || value.length == 0);
}

// to change color at designer 
function __isColor(col) {
	var regex = /(#([0-9A-Fa-f]{6})\b)|(aqua)|(black)|(blue)|(fuchsia)|(gray)|(green)|(lime)|(maroon)|(navy)|(olive)|(orange)|(purple)|(red)|(silver)|(teal)|(white)|(yellow)|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\))/;
	return (col.match(regex) != null);
}
function isColor_waper(col, id) {
	var ret = false;    
	ret = __isColor(col);
	return (ret ? "true" : "false"); 
}